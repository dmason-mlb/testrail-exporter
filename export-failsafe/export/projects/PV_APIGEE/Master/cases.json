[
  {
    "id": 30716060,
    "title": "Verify successful response is returned in Event Venue Config API GET request without includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 1,
    "custom_is_automated": false,
    "custom_refs": "C151131",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL without includeAllSeatMapDetails parameter and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for event without seat map details since default value of includeAllSeatMapDetails is false \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716061,
    "title": "Verify successful response is returned in  Ticket Forward API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 2,
    "custom_is_automated": false,
    "custom_refs": "C154505",
    "custom_category_misc": 1,
    "custom_preconds": "Create a finacial patron FP1 and attending patron AP 1\r\nPerfrom a sale for a  event created with patron FP 1\r\n Get the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Perform Ticket forward API with financial patron FP1\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Call V2 checkout API with attending patron AP1",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed success Status \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed success Status"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716062,
    "title": "Verify successful response is returned in  Recall API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 3,
    "custom_is_automated": false,
    "custom_refs": "C154507",
    "custom_category_misc": 1,
    "custom_preconds": "Create a financial patron FP1 and attending patron AP 1\r\nPerform a sale for a  event created with patron FP 1\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Perform Ticket forward API with financial patron FP1\r\n5. Verify the Response\r\n6. Call V2 checkout API with attending patron AP1\r\n7. Call Recall API with FP1 in request body\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed success Status \r\n6. Response should be displayed success Status \r\n7. Response should be displayed success Status \r\n8.  All the API proxy and target response should be displayed along with API key and header values"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716063,
    "title": "Verify successful response is returned in Return to sender API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 4,
    "custom_is_automated": false,
    "custom_refs": "C154508",
    "custom_category_misc": 1,
    "custom_preconds": "Create a financial patron FP1 and attending patron AP 1\r\nPerform a sale for a  event created with patron FP 1\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Perform Ticket forward API with financial patron FP1\r\n5. Verify the Response\r\n6. Call V2 checkout API with attending patron AP1\r\n7. Call return to sender API with AP1 in request body\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed success Status \r\n6. Response should be displayed success Status \r\n7. Response should be displayed success Status \r\n8.  All the API proxy and target response should be displayed along with API key and header values"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716064,
    "title": "Verify successful response is returned in  Ticket Forward API when three patron are involved",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 5,
    "custom_is_automated": false,
    "custom_refs": "C154506",
    "custom_category_misc": 1,
    "custom_preconds": "Create a finacial patron FP1 and attending patron AP 1 and AP2\r\nPerfrom a sale for a  event created with patron FP 1 and forward during sale to AP1\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Perform Ticket forward API with patron AP1\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Call V2 checkout API with attending patron AP2",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed success Status \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed success Status"
      }
    ],
    "custom_jiras": "AES-1.2.3"
  },
  {
    "id": 30716065,
    "title": "Verify successful response is returned in Lock Seats API- New Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 6,
    "custom_is_automated": false,
    "custom_refs": "C151510",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with Lock seats APi\ndetails for event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716066,
    "title": "Verify successful response is returned in Assign delivery API while locking event seats",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 7,
    "custom_is_automated": false,
    "custom_refs": "C151545",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as PUT\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the Assign Delivery API - new Cart request and Run the request:\neg: PUT https://dev.pvapi.provenue.com/v2/carts/46023/deliveries/assign\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716067,
    "title": "Verify successful response is returned in Return tickets API- New Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 8,
    "custom_is_automated": false,
    "custom_refs": "C151540",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event \r\nPerform perform transaction in PV of 2 tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the GET Ticket Details and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/deliveries/536001\r\n5. Enter the Return tickets Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/carts/return\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716068,
    "title": "Verify successful response is returned in Return tickets API- Existing Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 9,
    "custom_is_automated": false,
    "custom_refs": "C151543",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event \r\nPerform perform transaction in PV of 2 tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the GET Ticket Details and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/deliveries/536001\r\n5. Enter the Return tickets Event API - new Cart request for one ticket and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/carts/return\r\n6. Enter the Return tickets Event API - Existing Cart request for one ticket and Run the request:\neg: PUT https://dev.pvapi.provenue.com/v2/carts/46014/return \r\n7. Verify the Response\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Request should be successfully submitted\r\n7. Response should be displayed with Lock seats APi\ndetails for event \r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716069,
    "title": "Verify successful response is returned in Edit ticket Price API by ticket Id when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 10,
    "custom_is_automated": false,
    "custom_refs": "C151531",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter edit ticket price API with ticket ID and run the request eg:-PUT https://dev.pvapi.provenue.com/v2/carts/46022//offers/16029/editTicketPrice \r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716070,
    "title": "Verify successful response is returned in Edit ticket Price API by buyer type Id when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 11,
    "custom_is_automated": false,
    "custom_refs": "C151535",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter edit ticket price API with buyer type ID and run the request eg:-PUT https://dev.pvapi.provenue.com/v2/carts/46022//offers/16029/editTicketPrice\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716071,
    "title": "Verify successful response is returned in Checkout API when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 12,
    "custom_is_automated": false,
    "custom_refs": "C151525",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the checkout API and run the request :\neg: POST https://dev.pvapi.provenue.com/v2/carts/46018/checkout\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716072,
    "title": "Verify successful response is returned in Cancel Cart API when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 13,
    "custom_is_automated": false,
    "custom_refs": "C151520",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as DELETE\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the Cancel Cart API and run the request : eg DELETE https://dev.pvapi.provenue.com/v2/carts/46007\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716073,
    "title": "Verify successful response is returned in Get Cart API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 14,
    "custom_is_automated": false,
    "custom_refs": "C151537",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as DELETE\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the Get Cart API and run the request : eg GET https://dev.pvapi.provenue.com/api/v2/carts/9406002\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716074,
    "title": "Verify successful response is returned in Cancel Cart Offer API when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 15,
    "custom_is_automated": false,
    "custom_refs": "C151521",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as DELETE\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the Cancel Cart offer API and run the request and run the request:DELETE  https://dev.pvapi.provenue.com/v2/carts/46007\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716075,
    "title": "Verify successful response is returned in Cancel Cart OfferItem API when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 16,
    "custom_is_automated": false,
    "custom_refs": "C151523",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/api/v2/carts/lock\r\n5. Enter the Cancel Cart OfferItem API and run the request and run the request: eg : DELETE https://dev.pvapi.provenue.com/v2/carts/46008/offers/16012/offerItems/16012\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716076,
    "title": "Verify successful response is returned in Claim Seats API - New Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 17,
    "custom_is_automated": false,
    "custom_refs": "C151514",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event \r\nComplete reservation transaction",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Claim seats API - new Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/carts/claim\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with Lock seats APi\ndetails for event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716077,
    "title": "Verify successful response is returned in Get Patron Loyalty Summary API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 18,
    "custom_is_automated": false,
    "custom_refs": "C151670",
    "custom_category_misc": 1,
    "custom_preconds": "Create a loyalty program \r\nCreate a patron \r\nAssociate a loyalty program to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as POST\r\n3. Set the authentication parameters\r\n4. Enter the Get Patron Loyalty Summary API and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/loyaltyPrograms?status=OPEN/CLOSED/ALL&loyaltyProgramCode=XXXX\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Enter the Get Patron Loyalty Summary API and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/loyaltyPrograms/{loyaltyProgramId}\r\n8. Verify the Response\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with GET patron loyalty summary API v1 version \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Request should be successfully submitted\r\n8. Response should be displayed with GET patron loyalty summary API v2 version \r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716078,
    "title": "Verify successful response is returned in Claim Seats API - Existing Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 19,
    "custom_is_automated": false,
    "custom_refs": "C151517",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event \r\nComplete reservation transaction of 2 tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as PUT\r\n3. Set the authentication parameters\r\n4. Enter claim seats API with new cart and run the request :\neg POST https://dev.pvapi.provenue.com/v2/carts/claim\r\n5. Enter the Claim seats API - Existing Cart request and Run the request:\neg: PUT https://dev.pvapi.provenue.com/v2/carts/46018/claim\n\nCart id should be retrieved from step 4\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Response should display Cart id \r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716079,
    "title": "Verify successful response is returned in Lock Seats API - Existing Cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 20,
    "custom_is_automated": false,
    "custom_refs": "C151512",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as PUT \r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - New Cart request and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/carts/lock\r\n5. Enter the Lock Event API - Existing Cart request and Run the request:\neg: PUT https://dev.pvapi.provenue.com/v2/carts/46008/lock\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716080,
    "title": "Verify successful response is returned in Lock Seats API - Add offer Item to cart when event is locked",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 21,
    "custom_is_automated": false,
    "custom_refs": "C151513",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as PUT\r\n3. Set the authentication parameters\r\n4. Enter the Lock Event API - New cart and Run the request:\neg: POST https://dev.pvapi.provenue.com/v2/lock\r\n5. Enter the Lock Event API - AddOfferItem request and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/carts/46008/offers/16008/lock\r\n6. Verify the Response\r\n7. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Request should be successfully submitted\r\n6. Response should be displayed with Lock seats APi\ndetails for event \r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716081,
    "title": "Verify successful response is returned in Event Venue Config API HEAD request without includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 22,
    "custom_is_automated": false,
    "custom_refs": "C151132",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD\r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL without includeAllSeatMapDetails parameter and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for event without seat map details since default value of includeAllSeatMapDetails is false \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716082,
    "title": "Verify successful response is returned in Event Venue Config API GET request with includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 23,
    "custom_is_automated": false,
    "custom_refs": "C151151",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL with includeAllSeatMapDetails=true and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/events/1151?includeAllSeatMapDetails=true\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with includeAllSeatMapDetails=false\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/events/1151?includeAllSeatMapDetails=false\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for event with all not hidden / masked seats & trim are returned for all of the seat maps.\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed with venue config \ndetails for event without seat map details.\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716083,
    "title": "Verify successful response is returned in Event Venue Config API HEAD request with includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 24,
    "custom_is_automated": false,
    "custom_refs": "C151133",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD\r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL with includeAllSeatMapDetails=true and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/events/1151?includeAllSeatMapDetails=true\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with includeAllSeatMapDetails=false\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/events/1151?includeAllSeatMapDetails=false\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for event with all not hidden / masked seats & trim are returned for all of the seat maps.\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed with venue config \ndetails for event without seat map details.\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716084,
    "title": "Verify successful response is returned in Package List Venue Config API GET request without includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 25,
    "custom_is_automated": false,
    "custom_refs": "C151152",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL without includeAllSeatMapDetails parameter and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for package list without seat map details since default value of includeAllSeatMapDetails is false \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716085,
    "title": "Verify successful response is returned in Package List Venue Config API HEAD request without includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 26,
    "custom_is_automated": false,
    "custom_refs": "C151172",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD \r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL without includeAllSeatMapDetails parameter and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for package list without seat map details since default value of includeAllSeatMapDetails is false \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716086,
    "title": "Verify successful response is returned in Package List Venue Config API GET request with includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 27,
    "custom_is_automated": false,
    "custom_refs": "C151236",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL with includeAllSeatMapDetails=true and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026?includeAllSeatMapDetails=true\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with includeAllSeatMapDetails=false\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026?includeAllSeatMapDetails=false\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for Package List with all not hidden / masked seats & trim are returned for all of the seat maps.\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed with venue config \ndetails for Package List without seat map details.\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716087,
    "title": "Verify successful response is returned in Package List Venue Config API HEAD request with includeAllSeatMapDetails parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 28,
    "custom_is_automated": false,
    "custom_refs": "C151237",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD \r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL with includeAllSeatMapDetails=true and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026?includeAllSeatMapDetails=true\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with includeAllSeatMapDetails=false\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1026?includeAllSeatMapDetails=false\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with venue config \ndetails for Package List with all not hidden / masked seats & trim are returned for all of the seat maps.\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Response should be displayed with venue config \ndetails for Package List without seat map details.\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716088,
    "title": "Verify proper error is returned in Event Venue Config API GET response on providing invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 29,
    "custom_is_automated": false,
    "custom_refs": "C151246",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL with invalid Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid includeAllSeatMapDetails value\r\n8. Repeat the above steps after setting event status as CLOSED",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716089,
    "title": "Verify proper error is returned in Event Availability API GET request with invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 30,
    "custom_is_automated": false,
    "custom_refs": "C151276",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event Availability API  request URL with invalid Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/availability/events/1001?availabilityType=SCALE_ZONE_SUMMARY\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid availability value\r\n8. Repeat the above steps after setting event status as OFFSALE, CLOSED\r\n9. Repeat the above steps when user does not have access to API",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716090,
    "title": "Verify proper error is returned in Event Seat Availability API GET request with invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 31,
    "custom_is_automated": false,
    "custom_refs": "C151506",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event Availability API  request URL with invalid Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/availability/events/1001/sections/1001\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid availability value\r\n8. Repeat the above steps after setting event status as OFFSALE, CLOSED\r\n9. Repeat the above steps when user does not have access to API",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716091,
    "title": "Verify proper error is returned in Package List Availability API GET request with invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 32,
    "custom_is_automated": false,
    "custom_refs": "C151282",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the PackageList Availability API  request URL with invalid Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/availability/packageLists/1221?packageId=1220&eventId=1218&eventId=1219&availabilityType=SCALE_ZONE_SUMMARY\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid availability value\r\n8. Repeat the above steps after setting event status as OFFSALE, CLOSED\r\n9. Repeat the above steps when user does not have access to API",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716092,
    "title": "Verify proper error is returned in Package List Seat  Availability API GET request with invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 33,
    "custom_is_automated": false,
    "custom_refs": "C151507",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Package List Seat Availability API  request URL with invalid Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/availability/packageLists/1026/sections/1001?packageId=1015&eventId=1001&eventId=1002&eventId=1003\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid availability value\r\n8. Repeat the above steps after setting event status as OFFSALE, CLOSED\r\n9. Repeat the above steps when user does not have access to API",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716093,
    "title": "Verify proper error is returned in Event Venue Config API HEAD response on providing invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 34,
    "custom_is_automated": false,
    "custom_refs": "C151251",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD \r\n3. Set the authentication parameters\r\n4. Enter the Event Venue Configuration API request URL with invalid Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps with invalid includeAllSeatMapDetails value\r\n8. Repeat the above steps after setting event status as CLOSED",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716094,
    "title": "Verify proper error is returned in Package List Venue Config API GET response on providing invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 35,
    "custom_is_automated": false,
    "custom_refs": "C151252",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL with invalid Package List ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1151\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps in invalid includeAllSeatMapDetails value\r\n8. Repeat the above steps after setting null in Venue Configuration\nBitmask\r\n9. Repeat the above steps after making venue configuration in not loadable \nstate(other than available or maintenance)\r\n10. Repeat the above steps after setting package list status as Unavailable",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n10. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716095,
    "title": "Verify proper error is returned in Package List Venue Config API HEAD response on providing invalid URL/invalid set up",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 36,
    "custom_is_automated": false,
    "custom_refs": "C151255",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD \r\n3. Set the authentication parameters\r\n4. Enter the Package List Venue Configuration API request URL with invalid Package List ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1151\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat above steps in invalid includeAllSeatMapDetails value\r\n8. Repeat the above steps after setting null in Venue Configuration\nBitmask\r\n9. Repeat the above steps after making venue configuration in not loadable \nstate(other than available or maintenance)\r\n10. Repeat the above steps after setting package list status as Unavailable",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 6\r\n10. Valid Error message should be returned and should be logged correctly as mentioned in step 6"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716096,
    "title": "Verify proper error is returned in Event Venue Config HEAD API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 37,
    "custom_is_automated": false,
    "custom_refs": "C151263",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Event in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Event Venue Configuration HEAD API request URL with Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716097,
    "title": "Verify proper error is returned in Cart API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 38,
    "custom_is_automated": false,
    "custom_refs": "C151583",
    "custom_category_misc": 1,
    "custom_preconds": "Create an Event\r\nPerform transaction in PV",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as DELETE\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the POST details API request URL : \neg: POST \nhttps://dev.pvapi.provenue.com/api/v2/carts/lock\r\n6. Enter the Cancel Offer  request URL with invalid header values \neg: DELETE https://dev.pvapi.provenue.com/v2/carts/162343/offers/123\r\n7. Verify the Response\r\n8. Verify Logs\r\n9. Repeat the above steps after setting invalid Content Type value in header\r\n10. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Request should be added \r\n6. Error should be returned\r\n7. Valid Error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n10. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716098,
    "title": "Verify proper error is returned in Event Availability GET API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 39,
    "custom_is_automated": false,
    "custom_refs": "C151504",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Event Venue Configuration GET API request URL with Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/availability/events/1001?availabilityType=SCALE_ZONE_SUMMARY\n\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716099,
    "title": "Verify proper error is returned in Event Seat Availability GET API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 40,
    "custom_is_automated": false,
    "custom_refs": "C151508",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Event Venue Configuration GET API request URL with Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/availability/events/1001/sections/1001\n\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716100,
    "title": "Verify proper error is returned in Package Availability GET API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 41,
    "custom_is_automated": false,
    "custom_refs": "C151505",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Event Venue Configuration GET API request URL with Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/availability/packageLists/1221?packageId=1220&eventId=1218&eventId=1219&availabilityType=SCALE_ZONE_SUMMARY\n\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716101,
    "title": "Verify proper error is returned in Package List Seat Availability GET API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 42,
    "custom_is_automated": false,
    "custom_refs": "C151509",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Event Venue Configuration GET API request URL with Event ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/availability/packageLists/1026/sections/1001?packageId=1015&eventId=1001&eventId=1002&eventId=1003\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716102,
    "title": "Verify proper error is returned in Package List Venue Config GET API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 43,
    "custom_is_automated": false,
    "custom_refs": "C151266",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Package List  Venue Configuration GET API request URL with Package List ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1151\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716103,
    "title": "Verify proper error is returned in Package List Venue Config HEAD API request on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 44,
    "custom_is_automated": false,
    "custom_refs": "C151267",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Venue\r\nCreate an Package in the same venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as HEAD \r\n3. Set the authentication parameters\r\n4. Set invalid Accept value in header\r\n5. Enter the Package List  Venue Configuration GET API request URL with Package List ID and Run the request:\neg: HEAD https://dev.pvapi.provenue.com/v2/venueConfig/packageLists/1151\r\n6. Verify the Response\r\n7. Verify Logs\r\n8. Repeat the above steps after setting invalid Content Type value in header\r\n9. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. HEAD method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Invalid value should be set\r\n5. Error should be returned\r\n6. Valid Error message should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716104,
    "title": "Verify that User can perform PRINT Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 45,
    "custom_is_automated": false,
    "custom_refs": "C151277",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5 .Perform a sale with a Delivery",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as PRINT for print action tags\r\n4. Verify Logs\r\n5. Verify that the tickets are printed in PV > Ticket Services portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should be printed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716105,
    "title": "Verify that User can perform RESET Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 46,
    "custom_is_automated": false,
    "custom_refs": "C151278",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5 .Perform a sale with a Delivery\r\n6. Print the tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as RESET for print action tags\r\n4. Verify Logs\r\n5. Verify that the printed tickets are reset in PV > Ticket Services portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Printed tickets should be reset"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716106,
    "title": "Verify that User can perform REISSUE Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 47,
    "custom_is_automated": false,
    "custom_refs": "C151279",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery\r\n6.Print the tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as REISSUE for print action tags\r\n4. Verify Logs\r\n5. Verify that the printed tickets are reissued in PV > Ticket Services portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Printed tickets should be reissued"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716107,
    "title": "Verify that User can perform REPRINT Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 48,
    "custom_is_automated": false,
    "custom_refs": "C151280",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery\r\n6.Print the tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as REPRINT for print action tags\r\n4. Verify Logs\r\n5. Verify that the printed tickets are reprinted in PV > Ticket Services portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Printed tickets should be reprinted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716108,
    "title": "Verify that User can perform REISSUE_PRINT Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 49,
    "custom_is_automated": false,
    "custom_refs": "C151281",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery\r\n6.Print the tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as REISSUE_PRINT for print action tags\r\n4. Verify Logs\r\n5. Verify REISSUE_PRINT is successful in PV > Ticket Services",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. REISSUE_PRINT should be successful"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716109,
    "title": "Verify that User can perform REPRINT_PRINT Action via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 50,
    "custom_is_automated": false,
    "custom_refs": "C151296",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery\r\n6.Print the tickets",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as REPRINT_PRINT for print action tags\r\n4. Verify Logs\r\n5. Verify REPRINT_PRINT is successful in PV > Ticket Services",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. REPRINT_PRINT should be successful"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716110,
    "title": "Verify proper error is returned in Print API response on providing invalid request URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 51,
    "custom_is_automated": false,
    "custom_refs": "C151299",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5 .Perform a sale with a Delivery",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the invalid PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/prints\nEnter the parameters for Printing and Run the request:\nGive the Action as PRINT for print action tags\r\n4. Verify Logs\r\n5. Verify that the tickets are not printed in PV > Ticket Services portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Valid error message should be returned in response\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should not be printed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716111,
    "title": "Verify proper error is returned in Forward API's  response on providing invalid request URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 52,
    "custom_is_automated": false,
    "custom_refs": "C154509",
    "custom_category_misc": 1,
    "custom_preconds": "Create a financial patron FP1 and attending patron AP1\r\nPre-requisite: Perfrom a sale for a  event created with patron FP 1\r\n\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the invalid Ticket forward  API Request base URL: eg: https://dev.pvapi.provenue.com/v2/forwards \nEnter the parameters and Run the request:\n\r\n4. Verify Logs\r\n5. Verify that the tickets forward is not succesful",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Valid error message should be returned in response\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should not be forwarded in ticket services"
      }
    ],
    "custom_jiras": "AES-1.2.3"
  },
  {
    "id": 30716112,
    "title": "Verify proper error is returned in Forward API's  response on providing invalid parameter in request body",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 53,
    "custom_is_automated": false,
    "custom_refs": "C154510",
    "custom_category_misc": 1,
    "custom_preconds": "Create a financial patron FP1 and attending patron AP1\r\nPre-requisite: Perfrom a sale for a  event created with patron FP 1\r\n\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the valid Ticket forward  API Request base URL: eg: https://dev.pvapi.provenue.com/v2/forward \nEnter the invalid parameters and Run the request:\n\r\n4. Verify Logs\r\n5. Verify that the tickets forward is not succesful",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Valid error message should be returned in response\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should not be forwarded in ticket services"
      }
    ],
    "custom_jiras": "AES-1.2.3"
  },
  {
    "id": 30716113,
    "title": "Verify proper error is returned in Forward API's response on providing invalid header in request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-40",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 54,
    "custom_is_automated": false,
    "custom_refs": "C154511",
    "custom_category_misc": 1,
    "custom_preconds": "Create a financial patron FP1 and attending patron AP1\r\nPre-requisite: Perfrom a sale for a  event created with patron FP 1\r\n\r\nGet the ticket ids from DB",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the valid Ticket forward  API Request base URL: eg: https://dev.pvapi.provenue.com/v2/forward \nEnter the invalid header and Run the request:\n\r\n4. Verify Logs\r\n5. Verify that the tickets forward is not succesful",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Valid error message should be returned in response\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should not be forwarded in ticket services"
      }
    ],
    "custom_jiras": "AES-1.2.3"
  },
  {
    "id": 30716114,
    "title": "Verify proper error is returned in Print Actions API response on providing  invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 55,
    "custom_is_automated": false,
    "custom_refs": "C151258",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set invalid Accept value in header\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing and Run the request:\nGive the Action as PRINT for print action tags\r\n4. Verify the Response\r\n5. Verify Logs\r\n6. Repeat the above steps after setting invalid Content Type value in header\r\n7. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. Invalid value should be set\r\n3. Error should be returned\r\n4. Valid Error message should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Valid Error message should be returned and should be logged correctly as mentioned in step 7\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716115,
    "title": "Verify proper error is returned in Event Venue config API response on providing invalid Header values",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-26",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 56,
    "custom_is_automated": false,
    "custom_refs": "C153314",
    "custom_category_misc": 1,
    "custom_preconds": "1.Create a venue and create an event in that venue",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET \r\n3. Set invalid Accept value in header\r\n4. Enter the Event Venue Configuration GET API request URL with Event ID and Run the request:\neg: GET https://dev.pvapi.provenue.com/v2/venueConfig/events/1151\r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat the above steps after setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Invalid value should be set\r\n4. Error should be returned\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 7"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716116,
    "title": "Verify proper error is returned in Print Actions API response on providing  invalid request parameters",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 57,
    "custom_is_automated": false,
    "custom_refs": "C151304",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5.Perform a sale with a Delivery",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter invalid printAction and Run the request:\nGive the Action as PRINT for print action tags\r\n4. Verify the Response\r\n5. Verify Logs\r\n6. Repeat the above steps providing invalid deliveryId\neg: \n1. Non existing delivery id\n2. Delivery id of tickets already returned\n\r\n7. Repeat the above steps providing invalid printerId\r\n8. Repeat the above steps providing invalid ticketId\neg: \n1. Non existing ticket id\n2. Ticket id of returned tickets",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Error should be returned\r\n4. Valid Error message should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Valid Error message should be returned and should be logged correctly as mentioned in step 5\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 5\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 5"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716117,
    "title": "Verify proper error is returned in Cart API response on providing  invalid request parameters",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 58,
    "custom_is_automated": false,
    "custom_refs": "C151592",
    "custom_category_misc": 1,
    "custom_preconds": "Create an event and complete a transaction in PV",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the GET API Request base URL: eg: api/v2/deliveries/536001\n\n\r\n4. Enter invalid Claim Action API and Run the request:\nhttps://dev.pvapi.provenue.com/v2/carts/claim \r\n5. Verify the Response\r\n6. Verify Logs\r\n7. Repeat the above steps providing invalid OrderID\neg: \n1. Non existing orderId\n2. Order id of tickets already Claimed\n\r\n8. Repeat the above steps providing invalid printerId\r\n9. Repeat the above steps providing invalid ticketId\neg: \n1. Non existing ticket id\n2. Ticket id of Claimed tickets",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Error should be returned\r\n4. Request should be successfully submitted\r\n5. Valid Error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid Error message should be returned and should be logged correctly as mentioned in step 5\r\n8. Valid Error message should be returned and should be logged correctly as mentioned in step 5\r\n9. Valid Error message should be returned and should be logged correctly as mentioned in step 5"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716118,
    "title": "Verify Self Service Print via APIGEE Print Actions API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-28",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 59,
    "custom_is_automated": false,
    "custom_refs": "C151314",
    "custom_category_misc": 1,
    "custom_preconds": "1.Set the Printer for External Client Primary printer\r\n2.Set the Printing Permissions AFPs\r\n3.Set the Printer as External\r\n4.Set the Workstation\r\n5 .Perform a sale with a Delivery\r\n6. Enable Self-Service Printing Permission in Patron Market Permission and delivery method",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers\r\n3. Enter the PRINT API Request base URL: eg: https://dev.pvapi.provenue.com/v2/print\nEnter the parameters for Printing with patron id and Run the request:\nGive the Action as REPRINT_PRINT/REISSUE_PRINT for print action tags\r\n4. Verify Logs\r\n5. Verify that the tickets are printed in PV > Ticket Services portal\r\n6. Repeat above steps not providing patron account id\r\n7. Repeat above steps disabling Self-Service Printing Permission in Patron Market Permission and delivery method",
        "expected": "1. Tool should be launched successfully\r\n2. Headers should be set\r\n3. Successful response should be returned\r\n4. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n5. Tickets should be printed\r\n6. Valid error message should be returned and logged as mentioned in step 4\r\n7. Successful response should be returned and logged as mentioned in step 4"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716119,
    "title": "Verify successful response is returned in Package Lock Seats API - New Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 60,
    "custom_is_automated": false,
    "custom_refs": "C151511",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716120,
    "title": "Verify successful response is returned in Package Lock Seats API - Existing Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 61,
    "custom_is_automated": false,
    "custom_refs": "C151515",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Existing Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/46008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":true)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716121,
    "title": "Verify successful response is returned in Package Lock Seats API - Add offer Item",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 62,
    "custom_is_automated": false,
    "custom_refs": "C151516",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Add offer Item: \neg: https://dev.pvapi.provenue.com/v2/carts/46006/offers/16008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL2\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":false)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716122,
    "title": "Verify successful response is returned in Claim Package API - New Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 63,
    "custom_is_automated": false,
    "custom_refs": "C151518",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a reservation order for 2 tickets and note the ticket ids from DB - Ticket table",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Claim API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/claim\nâ€¢ Enter the parameters for Claim API:\n  ticket id of 1 ticket noted in preconditions\n\n\r\n4. Run the request\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716123,
    "title": "Verify successful response is returned in Claim Package API - Existing Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 64,
    "custom_is_automated": false,
    "custom_refs": "C151519",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a reservation order for 2 tickets and note the ticket ids from DB - Ticket table",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Claim API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/claim\nâ€¢ Enter the parameters for Claim API:\n  ticket id of 1 ticket noted in preconditions\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Claim API Request base URL-Existing Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46018/claim\nâ€¢ Enter the parameters for Claim API:\n  ticket id of any another ticket noted in preconditions\n\n\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":true)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716124,
    "title": "Verify successful response is returned in Package Cancel Cart API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 65,
    "custom_is_automated": false,
    "custom_refs": "C151522",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request and note the cart id\r\n5. Verify Logs\r\n6. Set Headers and set method as DELETE\r\n7. Enter the Cancel Cart API Request base URL and Run the request: \neg: https://dev.pvapi.provenue.com/v2/carts/46007\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and DELETE method should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716125,
    "title": "Verify successful response is returned in Package Cancel Offer API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 66,
    "custom_is_automated": false,
    "custom_refs": "C151524",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request and note the offer id - offerID1\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Existing Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/46008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\r\n8. Run the request and note the offer id - offerID2\r\n9. Verify Logs\r\n10. Set Headers and set method as DELETE\r\n11. Enter the Cancel Offer Request base URL and run the request providing offerID2 : \neg: https://dev.pvapi.provenue.com/v2/carts/46008/offers/16011\n\r\n12. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":true)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Headers and DELETE method should be set\r\n11. Successful response should be returned and the cart must contain only offerID1\r\n12. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716126,
    "title": "Verify successful response is returned in Package Cancel Offer Item ID API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 67,
    "custom_is_automated": false,
    "custom_refs": "C151526",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n  packageEvent id of E1\n\n\r\n4. Run the request and note the Offer Item ID=offerItemID1\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Add offer Item: \neg: https://dev.pvapi.provenue.com/v2/carts/46006/offers/16008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n  packageEvent id of E2\r\n8. Run the request and note the Offer Item ID=offerItemID2\r\n9. Verify Logs\r\n10. Set Headers and set method as DELETE\r\n11. Enter the Cancel Offer Item ID API Request base URL providing offerItemID1 and run the request\r\n12. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":false)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Headers and DELETE method should be set\r\n11. Successful response should be returned and the offer must contain only offerItemID1 \r\n12. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716127,
    "title": "Verify successful response is returned in Package Checkout API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 68,
    "custom_is_automated": false,
    "custom_refs": "C151528",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL- Add OfferItem \neg: https://dev.pvapi.provenue.com/v2/carts/46006/offers/16008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL2\r\n8. Run the request\r\n9. Verify Logs\r\n10. Set Headers and set method as POST\r\n11. â€¢ Enter the Checkout API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/carts/46008/lock\nâ€¢ Enter all required checkout api request parameters\r\n12. Run the request and note the order id\r\n13. Verify Logs\r\n14. Login to PV and verify order details in Ticket Services",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":false)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Headers and POST method should be set\r\n11. URL and parameters should be set \r\n12. Successful response should be returned\r\n13. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n14. Package order should be created"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716128,
    "title": "Verify successful response is returned in Package Edit Ticket Price By Ticket IDs API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 69,
    "custom_is_automated": false,
    "custom_refs": "C151530",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Edit Ticket Price API Request base URL\neg: https://dev.pvapi.provenue.com/v2/carts/46022//offers/16029/editTicketPrice\nâ€¢ Enter the parameters for Edit Ticket Price by Ticket Id\n  ticket id\n  newPrice, currency code and value\n  reasonNoteType id and reasonText\n\n\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716129,
    "title": "Verify successful response is returned in Package Edit Ticket Price By Buyer Type IDs API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 70,
    "custom_is_automated": false,
    "custom_refs": "C151532",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Edit Ticket Price API Request base URL\neg: https://dev.pvapi.provenue.com/v2/carts/46022//offers/16029/editTicketPrice\nâ€¢ Enter the parameters for Edit Ticket Price by Buyer Type Id\n  Buyer Type id\n  newPrice, currency code and value\n  reasonNoteType id and reasonText\n\n\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716130,
    "title": "Verify successful response is returned in Package Get Cart API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 71,
    "custom_is_automated": false,
    "custom_refs": "C151533",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as GET\r\n7. Enter the Get Cart API Request base URL and run the request\neg: https://dev.pvapi.provenue.com/v2/carts/46008\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and GET method should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716131,
    "title": "Verify successful response is returned in Return Package Tickets API - New Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 72,
    "custom_is_automated": false,
    "custom_refs": "C151534",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order for 2 tickets and note the ticket ids from DB - Ticket table",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Return tickets Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/return)\nâ€¢ Enter the parameters for Return tickets API:\n  ticket id of 1 ticket noted in preconditions\n  reasonNote id of a ticket noted in precondition and reasonText\n\n\r\n4. Run the request\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716132,
    "title": "Verify successful response is returned in Return Package Tickets API - Existing Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 73,
    "custom_is_automated": false,
    "custom_refs": "C151536",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order for 2 tickets, print the tickets and note the barcodes",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Return Tickets API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/return\nâ€¢ Enter the parameters for Claim API:\n  barcode of 1 ticket noted in precondition\n  reasonNoteType id and reason text\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Return Tickets API Request base URL-Existing Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46014/return\nâ€¢ Enter the parameters for Return Tickets API:\n  barcode of another ticket noted in precondition\n  reasonNoteType id and reason text\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716133,
    "title": "Verify successful response is returned in Package Assign Delivery API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 74,
    "custom_is_automated": false,
    "custom_refs": "C151538",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Add offer Item: \neg: https://dev.pvapi.provenue.com/v2/carts/46006/offers/16008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL2\r\n8. Run the request\r\n9. Verify Logs\r\n10. Set Headers and set method as PUT\r\n11. â€¢ Enter the Assign Delivery API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/carts/46023/deliveries/assign\nâ€¢ Enter required parameters for Assign Delivery API\r\n12. Run the request\r\n13. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned(\"newoffer\":false)\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Headers and PUT method should be set\r\n11. URL and parameters should be set \r\n12. Successful response should be returned\r\n13. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716134,
    "title": "Verify successful response is returned in Package Redelivery API - New Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 75,
    "custom_is_automated": false,
    "custom_refs": "C151539",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order of 2 tickets with same delivery method for the package and note the delivery id and ticket ids(ticket id from DB-Ticket table)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Redelivery Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/redeliver\nâ€¢ Enter the parameters for Redelivery API:\n  delivery id and ticket id\n\n\r\n4. Run the request\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716135,
    "title": "Verify successful response is returned in Event Redelivery API - New Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 76,
    "custom_is_automated": false,
    "custom_refs": "C151547",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create Events \r\n2. Create a sale order of 2 tickets with same delivery method for the package and note the delivery id and ticket ids(ticket id from DB-Ticket table)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Redelivery Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/redeliver)\n\n\n\r\n4. Run the request\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716136,
    "title": "Verify successful response is returned in Package Redelivery API - Existing Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 77,
    "custom_is_automated": false,
    "custom_refs": "C151541",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order of 2 tickets with same delivery method for the package and note the delivery id and ticket ids(ticket id from DB-Ticket table)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Redelivery Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/redeliver\nâ€¢ Enter the parameters for Redelivery API:\n  delivery id and ticket id of 1 ticket\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Redelivery Request base URL-Existing Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46021/redeliver\nâ€¢ Enter the parameters for Redelivery API:\n  delivery id and ticket id of another \n\n\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716137,
    "title": "Verify successful response is returned in Event Redelivery API - Existing Cart",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 78,
    "custom_is_automated": false,
    "custom_refs": "C151549",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create Event\r\n2. Create a sale order of 2 tickets with same delivery method for the package and note the delivery id and ticket ids(ticket id from DB-Ticket table)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Redelivery Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/redeliver\n\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Redelivery Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/redeliver)\n\n\n\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716138,
    "title": "Verify successful response is returned in Exchange Return Package tickets API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 79,
    "custom_is_automated": false,
    "custom_refs": "C151542",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order for 2 tickets, print the tickets and note the ticket Ids",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Exchange Return Tickets API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of 1 ticket\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Exchange Return Tickets API Request base URL-Existing  Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46027/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of another ticket\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716139,
    "title": "Verify successful response is returned in Exchange Return Event tickets API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 80,
    "custom_is_automated": false,
    "custom_refs": "C151550",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create  Events\r\n2. Create a sale order for 2 tickets, print the tickets and note the ticket Ids",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Exchange Return Tickets API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of 1 ticket\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Exchange Return Tickets API Request base URL-Existing  Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46027/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of another ticket\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716140,
    "title": "Verify successful response is returned in Package Exchange Sale API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 81,
    "custom_is_automated": false,
    "custom_refs": "C151544",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2 \r\n5. Create a sale order for 2 tickets, print the tickets and note the ticket Ids\r\n6. Create a target package with 1 package list and 2 events TE1 and TE2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Exchange Return Tickets API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of 1 ticket\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Exchange Sale API Request base URL: \neg:  https://dev.pvapi.provenue.com/v2/carts/46029/offers/16037/eventExchangeSale\nâ€¢ Enter the parameters for Exchange Sale API:\n  numberOfSeats\n  saleType - PARTIAL_PACKAGE\n  target package id,target packageList id and target packageEvent id(TE1 id)\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716141,
    "title": "Verify successful response is returned in Event Exchange Sale API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 82,
    "custom_is_automated": false,
    "custom_refs": "C151551",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create Events \r\n2. Create a target Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Exchange Return Tickets API Request base URL-New Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/eventExchangeReturn\nâ€¢ Enter the parameters for Exchange Return API:\n  transactionPatronAccount Id\n  reasonNoteType Id and reasonText\n  ticket id of 1 ticket\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Exchange Sale API Request base URL-Existing  Cart: \neg:  https://dev.pvapi.provenue.com/v2/carts/46029/offers/16037/eventExchangeSale\nâ€¢ Enter the parameters for Exchange Return API:\n  numberOfSeats\n  saleType -SINGLE\n  target Event id,\r\n8. Run the request\r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716142,
    "title": "Verify valid error is returned in Package Lock Seats API(Add offer Item) response on providing invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 83,
    "custom_is_automated": false,
    "custom_refs": "C151546",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Lock API Request base URL-Add offer Item with invalid offer item id: \neg: https://dev.pvapi.provenue.com/v2/carts/46006/offers/16008/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL2\r\n8. Run the request\r\n9. Verify Logs\r\n10. Set method as POST and repeat steps 7 to 9",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Valid error message should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Valid error message should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716143,
    "title": "Verify valid error is returned in Cart API on providing invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 84,
    "custom_is_automated": false,
    "custom_refs": "C151555",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create Events \r\n2. Complete a transaction in PV",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter get delivery API and run the request eg: GET https://HOST:PORT/api/v2/deliveries/536001\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Return API Request base URL-New Cart  \neg: https://dev.pvapi.provenue.com/v2/carts/return\n\r\n8. Run the request\r\n9. Verify Logs\r\n10. Set method as POST and repeat steps 7 to 9\r\n11. â€¢ Enter the Return API Request base URL-Existing Cart and provide Cart Id \neg: https://dev.pvapi.provenue.com/v2/carts/46014/return\r\n12. Run the request\r\n13. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Valid error message should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Valid error message should be returned and logged\r\n11. URL and parameters should be set \r\n12. Valid error message should be returned\r\n13. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716144,
    "title": "Verify valid error is returned in Package Edit Ticket Price By Buyer Type IDs API on providing invalid invalid parameter in request body",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 85,
    "custom_is_automated": false,
    "custom_refs": "C151548",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Edit Ticket Price API Request base URL\neg: https://dev.pvapi.provenue.com/v2/carts/46022//offers/16029/editTicketPrice\nâ€¢ Enter the parameters for Edit Ticket Price by Buyer Type Id\n  Invalid Buyer Type id\n  newPrice, currency code and value\n  reasonNoteType id and reasonText\n\n\r\n8. Run the request\r\n9. Verify Logs\r\n10. Repeat steps 6 to 9 providing invalid currency code value\r\n11. Repeat steps 6 to 9 providing invalid newPrice value\r\n12. Repeat steps 6 to 9 providing invalid reasonNoteType id",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Valid error message should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Valid error message should be returned and logged\r\n11. Valid error message should be returned and logged\r\n12. Valid error message should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716145,
    "title": "Verify valid error is returned in Package Get Cart API on providing invalid header",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-29",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 86,
    "custom_is_automated": false,
    "custom_refs": "C151554",
    "custom_category_misc": 1,
    "custom_preconds": "1. Create 4 Events - E1, E2, E3, E2\r\n2. Create a package list PL1 and include events E1 and E2\r\n3. Create another package list PL2 and include events E3 and E4\r\n4. Create a package and include package lists PL1 and PL2",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Lock API Request base URL-New Cart: \neg: https://dev.pvapi.provenue.com/v2/carts/lock\nâ€¢ Enter the parameters for Package Lock\n  numberOfSeats\n  package id \n  packageList id of PL1\n\n\r\n4. Run the request\r\n5. Verify Logs\r\n6. Set method as GET\r\n7. Set invalid Accept value in header\r\n8. Enter the Get Cart API Request base URL and run the request\neg: https://dev.pvapi.provenue.com/v2/carts/46008\r\n9. Verify Logs\r\n10. Repeat the above steps setting invalid Content Type value in header\r\n11. Repeat the above steps setting invalid PV Authentication value in header",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned(\"newoffer\":true)\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and GET method should be set\r\n7. Invalid value should be set\r\n8. Valid Error message should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Valid Error message should be returned and logged\r\n11. Valid Error message should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716146,
    "title": "Verify successful response is returned in Create Patron API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 87,
    "custom_is_automated": false,
    "custom_refs": "C151581",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Create Patron API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/\nâ€¢ Enter All Required Parameters\n\n\r\n4. Run the request and note the patron account id\r\n5. Verify Logs\r\n6. Login to PV and verify that patron is created in Patron Management portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. New Patron should be created"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716147,
    "title": "Verify successful response is returned in Update Patron Account  API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 88,
    "custom_is_automated": false,
    "custom_refs": "C151735",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron Account",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the Create Patron API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/\nâ€¢ Enter All Required Parameters\n\n\r\n4. Run the request and note the patron account id\r\n5. Verify Logs\r\n6. Set Headers and set method as PUT\r\n7. â€¢ Enter the Update Patron API Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/{patronAccountId}\nâ€¢ Enter All Required Parameters\n\r\n8. Run the request \r\n9. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Headers and PUT method should be set\r\n7. URL and parameters should be set \r\n8. Successful response should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716148,
    "title": "Verify successful response is returned in GET Patron API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 89,
    "custom_is_automated": false,
    "custom_refs": "C151623",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the GET Patron API Request base URL: GET\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\nâ€¢ Enter All Required Parameters\n\n\r\n4. Run the request and note the patron account id\r\n5. Verify in PV, whether the correct details are displayed",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. The patron details should be displayed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716149,
    "title": "Verify successful response is returned in GET Patron Inventory Summary API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 90,
    "custom_is_automated": false,
    "custom_refs": "C151698",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Patron and perform transactions with the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET \r\n3. â€¢ Enter the GET Patron API Request base URL: GET\neg: https://dev.pvapi.provenue.com/v2/patrons/1069/inventory/summary?inventoryType=ALL\nâ€¢ Enter All Required Parameters\n\n\r\n4. Run the request and note the patron account id\r\n5. Verify successful response is returned in GET Patron Inventory Summary API",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. The patron details should be displayed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716150,
    "title": "Verify successful response is returned in FIND Patron API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 91,
    "custom_is_automated": false,
    "custom_refs": "C151693",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the GET Patron API Request base URL: GET\neg: https://dev.pvapi.provenue.com/v2/patrons?firstName=xxxx\nâ€¢ Enter All Required Parameters\n\n\r\n4. Verify successful response is returned in FIND Patron API",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. The patron details should be displayed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716151,
    "title": "Verify successful response is returned in Create patron contact API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 92,
    "custom_is_automated": false,
    "custom_refs": "C151585",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716152,
    "title": "Verify successful response is returned in Update patron contact API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 93,
    "custom_is_automated": false,
    "custom_refs": "C151758",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update patron contact API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts/{patronContactId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716153,
    "title": "Verify successful response is returned in GET patron contact API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 94,
    "custom_is_automated": false,
    "custom_refs": "C151626",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id and contact",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033/contacts\r\n4. Run the request and note the etag\r\n5. Run the request",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Successful response should be returned\nThe response  should include the contact details of the Patron created in PV"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716154,
    "title": "Verify successful response is returned in Create Patron Contact address API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 95,
    "custom_is_automated": false,
    "custom_refs": "C151589",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Contact address API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact address is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact address should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716155,
    "title": "Verify successful response is returned in Update Patron Contact address API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 96,
    "custom_is_automated": false,
    "custom_refs": "C151771",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as PUT\n\r\n6. â€¢ Enter the Update Patron Contact address API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/{patronContactAddressId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716156,
    "title": "Verify successful response is returned in GET Patron Contact address API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 97,
    "custom_is_automated": false,
    "custom_refs": "C151629",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/contacts/1001/addresses\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe contact address details should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716157,
    "title": "Verify successful response is returned in Create Patron contact Email API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 98,
    "custom_is_automated": false,
    "custom_refs": "C151593",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron contact Email API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact email is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact email should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716158,
    "title": "Verify successful response is returned in Update Patron contact Email API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 99,
    "custom_is_automated": false,
    "custom_refs": "C151772",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as PUT\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the UpdatePatron contact Email API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/patronContactEmailId\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716159,
    "title": "Verify successful response is returned in GET Patron contact Email API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 100,
    "custom_is_automated": false,
    "custom_refs": "C151630",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/contacts/1001/emails\r\n4. Set Headers and set method as GET\n\r\n5. Run the request \r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Headers and GET method should be set\r\n5. Successful response should be returned\n\nThe details from the patron from prerequisite should be displayed and the email details should be displayed \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716160,
    "title": "Verify successful response is returned in Create Patron contact Phone API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 101,
    "custom_is_automated": false,
    "custom_refs": "C151595",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron contact Phone API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/phones/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact phone is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact phone should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716161,
    "title": "Verify successful response is returned in Update Patron contact Phone API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 102,
    "custom_is_automated": false,
    "custom_refs": "C151781",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron contact Phone API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/phones/{patronContactPhoneId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716162,
    "title": "Verify successful response is returned in GET Patron contact Phone API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 103,
    "custom_is_automated": false,
    "custom_refs": "C151632",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id with phone details",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/contacts/1001/phones\r\n4. Set Headers and set method as GET and run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Headers and GET method should be set. Successful response should be returned\n\nThe phone details from the PV should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716163,
    "title": "Verify successful response is returned in Create Patron Contact note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 104,
    "custom_is_automated": false,
    "custom_refs": "C151597",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Contact (System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Contact)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account Contact note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/notes/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact note is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact note should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716164,
    "title": "Verify successful response is returned in Update Patron Contact note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 105,
    "custom_is_automated": false,
    "custom_refs": "C151782",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Contact (System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Contact)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/notes/{patronNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716165,
    "title": "Verify successful response is returned in GET Patron Account Contact note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 106,
    "custom_is_automated": false,
    "custom_refs": "C151634",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a Note Type with association type Patron Contact (System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Contact)\r\nâ€¢ Create a patron and note the patron id and check the note type ID",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/contacts/1001/notes\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe Note type id of Patron should be displayed \n\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716166,
    "title": "Verify successful response is returned in Create Patron Contact trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 107,
    "custom_is_automated": false,
    "custom_refs": "C151624",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Contact (System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/traits/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact trait is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact trait should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716167,
    "title": "Verify successful response is returned in Update Patron Contact trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 108,
    "custom_is_automated": false,
    "custom_refs": "C152083",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Contact (System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as PUT\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/{patronAccountId}/contacts/{patronContactId}/traits/{patronTraitId}\n\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716168,
    "title": "Verify successful response is returned in GET Patron Account Contact trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 109,
    "custom_is_automated": false,
    "custom_refs": "C151635",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a Trait  with association type Patron Contact (System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)\r\nâ€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/contacts/1001/traits\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\nThe contact trait of Patron should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716169,
    "title": "Verify successful response is returned in Create Patron Account note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 110,
    "custom_is_automated": false,
    "custom_refs": "C151625",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Account(System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Account)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/notes/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new account note is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account note should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716170,
    "title": "Verify successful response is returned in Update Patron Account note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 111,
    "custom_is_automated": false,
    "custom_refs": "C152089",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Account(System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Account)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the update Patron Account note API Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/{patronAccountId}/notes/{patronNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716171,
    "title": "Verify successful response is returned in GET Patron Account note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 112,
    "custom_is_automated": false,
    "custom_refs": "C151636",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a Note Type with association type Patron Account(System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Account)\r\nâ€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/notes\n\n\r\n4. Run the request and note the etag\r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe account trait from the patron selected in prerequisite should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716172,
    "title": "Verify successful response is returned in Create Patron Account trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 113,
    "custom_is_automated": false,
    "custom_refs": "C151627",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/traits/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new account trait is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account trait should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716173,
    "title": "Verify successful response is returned in Update Patron Account trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 114,
    "custom_is_automated": false,
    "custom_refs": "C152091",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact trait API Request base URL: \neg: api/v2/patrons/{patronAccountId}/traits/{patronTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716174,
    "title": "Verify successful response is returned in GET Patron Account trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 115,
    "custom_is_automated": false,
    "custom_refs": "C151638",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)\r\nâ€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/traits\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe patron trait details should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716175,
    "title": "Verify successful response is returned in Create Patron Account Sales rep",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 116,
    "custom_is_automated": false,
    "custom_refs": "C151631",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Sales Rep(System Setup> Sales Rep Administration) and note the sales rep id\r\nâ€¢ Add sales rep in Agency(System Setup > Organization Administration > Agency > Sales rep tab)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account Sales rep Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/salesReps/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new account sales rep is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account sales rep should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716176,
    "title": "Verify successful response is returned in Update Patron Account Sales rep",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 117,
    "custom_is_automated": false,
    "custom_refs": "C152094",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Sales Rep(System Setup> Sales Rep Administration) and note the sales rep id\r\nâ€¢ Add sales rep in Agency(System Setup > Organization Administration > Agency > Sales rep tab)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the update Patron Account Sales rep Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/{patronAccountId}/salesReps/{patronSalesRepId}\n\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716177,
    "title": "Verify successful response is returned in GET Patron Account Sales rep",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 118,
    "custom_is_automated": false,
    "custom_refs": "C151640",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a Sales Rep(System Setup> Sales Rep Administration) and note the sales rep id\r\nâ€¢ Add sales rep in Agency(System Setup > Organization Administration > Agency > Sales rep tab)\r\nâ€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/salesReps\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe sales rep details from the patron created in prerequisite should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716178,
    "title": "Verify successful response is returned in Create Patron Association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 119,
    "custom_is_automated": false,
    "custom_refs": "C151633",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a friend patron and note patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Association API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations\nâ€¢ Enter All Required Parameters in request body with friend patron account id\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that friend patron is added to the patron account",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Patron should be added with Friend Status: Pending"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716179,
    "title": "Verify successful response is returned in GET Patron Association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 120,
    "custom_is_automated": false,
    "custom_refs": "C151642",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a friend patron and note patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1027/associations/1003\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\nThe friend patron associated should be displayed in  response \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716180,
    "title": "Verify successful response is returned in Accept Patron association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 121,
    "custom_is_automated": false,
    "custom_refs": "C151637",
    "custom_category_misc": 1,
    "custom_preconds": "Repeat steps from [C151633] to create an association with Pending status",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Accept Patron association API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/accept\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Friend Status is Confirmed",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Status should be Confirmed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716181,
    "title": "Verify successful response is returned in Update Patron Association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 122,
    "custom_is_automated": false,
    "custom_refs": "C152105",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron association API Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/1027/associations/1003\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716182,
    "title": "Verify successful response is returned in Cancel Patron Association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 123,
    "custom_is_automated": false,
    "custom_refs": "C151639",
    "custom_category_misc": 1,
    "custom_preconds": "Repeat steps from [C151633] to create an association with Pending status",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Cancel Patron Association API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/cancel\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Friend Status is Request Cancelled",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Status should be Request Cancelled"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716183,
    "title": "Verify successful response is returned in Decline Patron Association API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 124,
    "custom_is_automated": false,
    "custom_refs": "C151641",
    "custom_category_misc": 1,
    "custom_preconds": "Repeat steps from [C151633] to create an association with Pending status",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Decline Patron Association API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/decline\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Friend Status is Request Declined",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Status should be Request Declined"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716184,
    "title": "Verify successful response is returned in Create Patron Digital Wallet API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 125,
    "custom_is_automated": false,
    "custom_refs": "C151644",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Digital Wallet API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/digitalWalletItems/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify digital wallet is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Digital Wallet should be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716185,
    "title": "Verify successful response is returned in Update Patron Digital Wallet API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 126,
    "custom_is_automated": false,
    "custom_refs": "C152104",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PUT\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Digital Wallet API Request base URL: \neg: https://dev.pvapi.provenue.com/api/v2/patrons/digitalWalletItems/{walletItemId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716186,
    "title": "Verify successful response is returned in GET Patron Digital Wallet API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 127,
    "custom_is_automated": false,
    "custom_refs": "C151656",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢  Add a digital wallet",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/digitalWalletItems\r\n4. Run the request \r\n5. Run the request \r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nthe digital wallet items added in the first request should be displayed \r\n5. Successful response should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716187,
    "title": "Verify successful response is returned in GET Patron Subscriber since items API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 128,
    "custom_is_automated": false,
    "custom_refs": "C151665",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Perform a package transaction using the patron \r\nâ€¢ The Subscriber since details should be displayed",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/subscriberSinceItems\r\n4. Run the request \r\n5. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe subscriberSinceItems added in the pre-requiste should be displayed \r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716188,
    "title": "Verify successful response is returned in Update Patron Subscriber since items API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 129,
    "custom_is_automated": false,
    "custom_refs": "C152107",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Perform a package transaction using the patron \r\nâ€¢ The Subscriber since details should be displayed",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001/subscriberSinceItems\r\n4. Run the request \r\n5. Enter the update Patron API request : PUT method \nhttps://dev.pvapi.provenue.com/api/v2/patrons/{patronAccountId}/subscriberSinceItems/{patronSubscriberActivitySinceId}\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\n\nThe subscriberSinceItems added in the pre-requiste should be displayed \r\n5. URL and parameters should be set \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716189,
    "title": "Verify successful response is returned in patron merge API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 130,
    "custom_is_automated": false,
    "custom_refs": "C151645",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a target patron and note the patron id\r\nâ€¢ Create a source patron and note patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\r\n3. â€¢ Enter the patron merge API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{targetPatron AccountId}/merge/{sourcePatron AccountId}\nâ€¢ Enter All Required Parameters in request body with friend patron account id\n\n\r\n4. Run the request \r\n5. Verify Logs\r\n6. Login to PV \r\n7. Navigate to Ticketing > Patron Management and select the target patron created in precondition\r\n8. Verify that source patron is merged with target patron\r\n9. Search for source patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Login should be successful\r\n7. Patron details should be displayed\r\n8. Source Patron should be merged with target patron\r\n9. Error message indicating it has been merged will be displayed.\nEg: * Account ID 42876951 has been merged into account 42876953."
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716190,
    "title": "Verify successful response is returned in Initial Award Points API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 131,
    "custom_is_automated": false,
    "custom_refs": "C152118",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as POST\n\r\n3. â€¢ Enter the Award Points API API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/awardPoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n4. Run the request \r\n5. Verify Logs\r\n6. Login to PV \r\n7. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n8. Verify that loyalty points are awarded to patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Login should be successful\r\n7. Patron details should be displayed\r\n8. Loyalty points should be awarded"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716191,
    "title": "Verify valid error is returned in Create Patron Contact address API response on proving invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 132,
    "custom_is_automated": false,
    "custom_refs": "C151682",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Contact address API Request base URL with invalid patronContactId: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new contact address is not addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Valid Error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact address should not be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716192,
    "title": "Verify valid error is returned in GET Patron Contact email API response on proving invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 133,
    "custom_is_automated": false,
    "custom_refs": "C151705",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL and provide invalid parameter in URL \n\r\n4. Run the request \n\r\n5. Verify Logs\r\n6. Repeat the step 3 and provide invalid contact id and email id in request \r\n7. Run the request \n\r\n8. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Error response \n\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Error response \n\r\n7. Error response \n\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716193,
    "title": "Verify valid error is returned in Create Patron Account trait API response on providing invalid parameter in request body",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 134,
    "custom_is_automated": false,
    "custom_refs": "C151683",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/traits/\nâ€¢ Enter All Required Parameters in request body with invalid trait id\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that new account trait is not added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Valid error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account trait should not be added"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716194,
    "title": "Verify valid error is returned in patron merge API response on providing invalid Header type",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 135,
    "custom_is_automated": false,
    "custom_refs": "C151684",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a target patron and note the patron id\r\nâ€¢ Create a source patron and note patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set method as POST\r\n3. Set invalid Accept Header value\r\n4. â€¢ Enter the patron merge API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{targetPatron AccountId}/merge/{sourcePatron AccountId}\nâ€¢ Enter All Required Parameters in request body with friend patron account id\n\n\r\n5. Run the request \r\n6. Verify Logs\r\n7. Login to PV \r\n8. Navigate to Ticketing > Patron Management and select the target patron created in precondition\r\n9. Verify that source patron is not merged with target patron\r\n10. Repeat above steps providing invalid Content type header value\r\n11. Repeat above steps providing invalid Authentication header value",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Invalid value should be set\r\n4. URL and parameters should be set \r\n5. Valid error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Login should be successful\r\n8. Patron details should be displayed\r\n9. Source Patron should not be merged with target patron\r\n10. Valid error message should be returned and logged\r\n11. Valid error message should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716195,
    "title": "Verify valid error is returned in GET Patron digital wallet API response on providing invalid Header type",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 136,
    "custom_is_automated": false,
    "custom_refs": "C151710",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a target patron and note the patron id\r\nâ€¢ Create a source patron and note patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set method as POST\r\n3. Set invalid Accept Header value\r\n4. â€¢ Enter the GET Patron digital wallet API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/1001/digitalWalletItem\nâ€¢ Enter All Required Parameters in request body with friend patron account id\n\n\r\n5. Run the request \r\n6. Verify Logs\r\n7. Repeat above steps providing invalid Content type header value\r\n8. Repeat above steps providing invalid Authentication header value",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Invalid value should be set\r\n4. URL and parameters should be set \r\n5. Valid error message should be returned\r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Valid error message should be returned and logged\r\n8. Valid error message should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716196,
    "title": "Verify successful response is returned in Delete Patron Contact address API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 137,
    "custom_is_automated": false,
    "custom_refs": "C151655",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with multiple address and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronContactAddressId of 1 address\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact address API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/{patronContactAddressId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact address is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact address should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716197,
    "title": "Verify successful response is returned in Delete Patron Contact Email API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 138,
    "custom_is_automated": false,
    "custom_refs": "C151660",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with multiple Email and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronContactEmailId of 1 Email\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact Email API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/{patronContactEmailId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact email is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact email should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716198,
    "title": "Verify successful response is returned in Delete Patron Contact Phone API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 139,
    "custom_is_automated": false,
    "custom_refs": "C151661",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with multiple Phone and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronContactPhoneId of 1 Phone\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact Phone API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/phones/{patronContactPhoneId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact phone is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact phone should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716199,
    "title": "Verify successful response is returned in Delete Patron Contact note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 140,
    "custom_is_automated": false,
    "custom_refs": "C151664",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Contact note and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronNoteId\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/notes/{patronNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact note is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact note should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716200,
    "title": "Verify successful response is returned in Delete Patron Contact trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 141,
    "custom_is_automated": false,
    "custom_refs": "C151666",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Contact trait and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronTraitId\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/traits/{patronTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact trait is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact trait should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716201,
    "title": "Verify successful response is returned in Delete Patron Account note API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 142,
    "custom_is_automated": false,
    "custom_refs": "C151669",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Account note and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronNoteId\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Account note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/notes/{patronNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account note is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account note should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716202,
    "title": "Verify successful response is returned in Delete Patron Account Trait API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 143,
    "custom_is_automated": false,
    "custom_refs": "C151671",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Account Trait and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronTraitId\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Account Trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/traits/{patronTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account trait is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account trait should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716203,
    "title": "Verify successful response is returned in Delete Patron Account Sales rep API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 144,
    "custom_is_automated": false,
    "custom_refs": "C151673",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Account Sales rep and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronSalesRepId\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Account Sales rep API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/salesReps/{patronSalesRepId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account Sales rep is deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with empty response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New account Sales rep should be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716204,
    "title": "Verify successful response is returned in Delete Patron Association API with action parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 145,
    "custom_is_automated": false,
    "custom_refs": "C151678",
    "custom_category_misc": 1,
    "custom_preconds": "Repeat steps from [C151633] to create an association with Pending status",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Association API with action parameter Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}?action=REMOVE\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Friend Status is Request Remove",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with null response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Status should be Request Remove"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716205,
    "title": "Verify successful response is returned in Delete Patron Association API without action parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 146,
    "custom_is_automated": false,
    "custom_refs": "C151679",
    "custom_category_misc": 1,
    "custom_preconds": "Repeat steps from [C151633] to create an association with Pending status",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Association API without action parameter Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Friend Status is Request Remove",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Request should run successfully with null response body\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Friend Status should be Request Remove"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716206,
    "title": "Verify valid error is returned in Delete Patron Contact Phone API response on providing invalid request URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 147,
    "custom_is_automated": false,
    "custom_refs": "C151686",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with multiple Phone and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronContactPhoneId of 1 Phone\r\n5. Set Headers and set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Delete Patron Contact Phone API Request base URL with invalid patronContactPhoneId: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/phones/{patronContactPhoneId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact phone is not deleted",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and DELETE method should be set\r\n6. URL and parameters should be set \r\n7. Valid error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. New contact phone should not be deleted"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716207,
    "title": "Verify valid error is returned in Delete Patron Contact trait API response on providing invalid Header Type",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 148,
    "custom_is_automated": false,
    "custom_refs": "C151687",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Contact trait and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and patronTraitId\r\n5. Set method as DELETE\nNote: Set etag returned in above step in If-Match Header\r\n6. Set invalid Accept header value\r\n7. â€¢ Enter the Delete Patron Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/traits/{patronTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n8. Run the request \r\n9. Verify Logs\r\n10. Login to PV \r\n11. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n12. Verify that contact trait is not deleted\r\n13. Repeat above steps with invalid Contact Type header value\r\n14. Repeat above steps with invalid Authentication header value",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. DELETE method should be set\r\n6. invalid value should be set\r\n7. URL and parameters should be set \r\n8. Valid error should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Login should be successful\r\n11. Patron details should be displayed\r\n12. Contact trait should not be deleted\r\n13. Valid error should be returned and logged\r\n14. Valid error should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716208,
    "title": "Verify successful response is returned in Update patron API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 149,
    "custom_is_automated": false,
    "custom_refs": "C152080",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update patron API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that patron details are updated successfully",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Patron details should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716209,
    "title": "Verify successful response is returned in Update patron contact API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 150,
    "custom_is_automated": false,
    "custom_refs": "C152082",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and contactId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update patron contact API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts/{contactId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact is updated successfully",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716210,
    "title": "Verify successful response is returned in Update Patron Contact address API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 151,
    "custom_is_automated": false,
    "custom_refs": "C152084",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactAddressId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Contact address API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/{patronContactAddressId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact address is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact address should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716211,
    "title": "Verify successful response is returned in Update Patron contact Email API API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 152,
    "custom_is_automated": false,
    "custom_refs": "C152085",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactEmailId\r\n5. Set Headers and set method as PATCH \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron contact Email API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/{patronContactEmailId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact email is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact email should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716212,
    "title": "Verify successful response is returned in Update Patron contact Phone API - Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 153,
    "custom_is_automated": false,
    "custom_refs": "C152087",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactPhoneId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron contact Phone API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/phones/{patronContactPhoneId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact phone is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact phone should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716213,
    "title": "Verify successful response is returned in Update Patron Account Contact note API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 154,
    "custom_is_automated": false,
    "custom_refs": "C152090",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Contact (System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Contact)\r\nâ€¢ Add contact note in Patron Management > Notes tab",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactNoteId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/notes/{patronContactNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact note is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact note should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716214,
    "title": "Verify successful response is returned in Update  Patron Account Contact trait API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 155,
    "custom_is_automated": false,
    "custom_refs": "C152093",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Contact (System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)\r\nâ€¢ Add contact trait to patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactTraitId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/traits/{patronContactTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact trait is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact trait should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716215,
    "title": "Verify successful response is returned in Update Patron Account note API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 156,
    "custom_is_automated": false,
    "custom_refs": "C152095",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Note Type with association type Patron Account(System Setup> System Administration>Note Type) and note the noteTypeId\r\nâ€¢ Set access permission for the contact note created above (System Setup > Organization Administration > Access Permissions > Note Type > Patron Account)\r\nâ€¢ Add Account Note to patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronAccountNoteId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account note API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/notes/{patronAccountNoteId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account note is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Account note should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716216,
    "title": "Verify successful response is returned in Update Patron Account Trait API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 157,
    "custom_is_automated": false,
    "custom_refs": "C152099",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)\r\nâ€¢ Add account trait to patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronAccountTraitId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/traits/{patronAccountTraitId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account trait is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Account trait should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716217,
    "title": "Verify successful response is returned in Update Patron Account Sales rep-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 158,
    "custom_is_automated": false,
    "custom_refs": "C152101",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Sales Rep(System Setup> Sales Rep Administration) and note the sales rep id\r\nâ€¢ Add sales rep in Agency(System Setup > Organization Administration > Agency > Sales rep tab)\r\nâ€¢ Add sales rep to patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronAccountSalesRepId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account Sales rep Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/salesReps/{patronAccountSalesRepId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that account sales rep is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Account sales rep should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716218,
    "title": "Verify successful response is returned in Update Patron Association API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 159,
    "custom_is_automated": false,
    "custom_refs": "C152102",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a friend patron and note patron id\r\nâ€¢ Create a friend association",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronAssociationId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Association API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that patron association is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Patron association should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716219,
    "title": "Verify successful response is returned in Update Patron Digital Wallet API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 160,
    "custom_is_automated": false,
    "custom_refs": "C152103",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Add a digital wallet item to patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and digitalWalletItemId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Digital Wallet API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/digitalWalletItems/{digitalWalletItemId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify digital wallet is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Digital Wallet should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716220,
    "title": "Verify successful response is returned in Update Patron Subscriber since items-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 161,
    "custom_is_automated": false,
    "custom_refs": "C152106",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Perform a package transaction using the patron \r\nâ€¢ The Subscriber since details should be displayed",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/1001\r\n4. Run the request and note the etag and patronSubscriberActivitySinceId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Subscriber since items Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/subscriberSinceItems/{patronSubscriberActivitySinceId}\nâ€¢ Enter All Required Parameters in request body\r\n7. Run the request\r\n8. Verify Logs\r\n9. Login to PV\r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify Subscriber since item is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Subscriber since item should be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716221,
    "title": "Verify successful response is returned in Award Points API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 162,
    "custom_is_automated": false,
    "custom_refs": "C152108",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Award Points API API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/awardPoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are awarded to patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be awarded"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716222,
    "title": "Verify successful response is returned in Award Points API-POST",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 163,
    "custom_is_automated": false,
    "custom_refs": "C152120",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron loyalty data API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Award Points API API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/awardPoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are awarded to patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be awarded"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716223,
    "title": "Verify successful response is returned in Consume Points API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 164,
    "custom_is_automated": false,
    "custom_refs": "C152110",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Consume Points API API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/consumePoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are consumed",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be consumed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716224,
    "title": "Verify successful response is returned in Consume Points API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 165,
    "custom_is_automated": false,
    "custom_refs": "C152121",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron loyalty data API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Consume Points API API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/consumePoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are consumed",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be consumed"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716225,
    "title": "Verify successful response is returned in Write Off Points API-Patch",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 166,
    "custom_is_automated": false,
    "custom_refs": "C152111",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Write Off Points API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/writeOffPoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are written off",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be written off"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716226,
    "title": "Verify successful response is returned in Write Off Points API",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 167,
    "custom_is_automated": false,
    "custom_refs": "C152122",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id\r\nCreate a loyalty program\r\nAward loyalty points to the patron",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron loyalty data API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}\r\n4. Run the request and note the etag\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Write Off Points API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/writeOffPoints\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that loyalty points are written off",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set \r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Loyalty points should be written off"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716227,
    "title": "Verify valid error is returned in Update Patron Contact address PATCH API response on proving invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 168,
    "custom_is_automated": false,
    "custom_refs": "C152112",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId and patronContactAddressId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Contact address API Request base URL with invalid patronContactId: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/addresses/{patronContactAddressId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact address is not updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Valid Error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact address should not be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716228,
    "title": "Verify valid error is returned in Update Patron Contact address PUT API response on proving invalid URL",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 169,
    "custom_is_automated": false,
    "custom_refs": "C152124",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactId and patron Contact email id \r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Contact address API Request base URL with invalid patronContactemaiId: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/{patronContactEmailId}\n\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact email is not updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Valid Error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Contact email should not be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716229,
    "title": "Verify valid error is returned in Update Patron contact email PATCH API response on providing invalid parameter in request body",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 170,
    "custom_is_automated": false,
    "custom_refs": "C152114",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronContactEmailId\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Contact email API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/emails/{patronContactEmailId}\nâ€¢ Enter All Required Parameters in request body with invalid parameter\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that contact email is not updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCH method should be set\r\n6. URL and parameters should be set \r\n7. Valid error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Account contact email should not be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716230,
    "title": "Verify valid error is returned in Update Patron Account trait PUT API response on providing invalid parameter in request body",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 171,
    "custom_is_automated": false,
    "custom_refs": "C152126",
    "custom_category_misc": 1,
    "custom_preconds": "â€¢ Create a patron and note the patron id\r\nâ€¢ Create a Trait  with association type Patron Account(System Setup> Trait Administration) and note the traitId\r\nâ€¢ Set access permission for the contact trait created above (System Setup > Organization Administration > Access Permissions > Trait > Patron Status)\r\nâ€¢ Add Account Trait",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag and patronAccountTraitId\r\n5. Set Headers and set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update Patron Account SalesRep API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/traits/{patronAccountTraitId}\nâ€¢ Enter All Required Parameters in request body with invalid trait id\n\n\r\n7. Run the request \r\n8. Verify Logs\r\n9. Login to PV \r\n10. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n11. Verify that  account trait is not updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. Headers and PATCHmethod should be set\r\n6. URL and parameters should be set \r\n7. Valid error message should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Login should be successful\r\n10. Patron details should be displayed\r\n11. Account trait should not be updated"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716231,
    "title": "Verify valid error is returned in Update Patron Contact PATCH API response on providing invalid Header Type",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 172,
    "custom_is_automated": false,
    "custom_refs": "C152115",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId\r\n5. Set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. Set invalid Accept header value\r\n7. â€¢ Enter the Update Patron Contact API Request base URL with invalid contact Id: \neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n8. Run the request \r\n9. Verify Logs\r\n10. Login to PV \r\n11. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n12. Verify that contact trait is not updated\r\n13. Repeat above steps with invalid Contact Type header value\r\n14. Repeat above steps with invalid Authentication header value",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. PATCH method should be set\r\n6. invalid value should be set\r\n7. URL and parameters should be set \r\n8. Valid error should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Login should be successful\r\n11. Patron details should be displayed\r\n12. Contact trait should not be updated\r\n13. Valid error should be returned and logged\r\n14. Valid error should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716232,
    "title": "Verify valid error is returned in Update Patron Contact trait PUT API response on providing invalid Header Type",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-32",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 173,
    "custom_is_automated": false,
    "custom_refs": "C152128",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with Contact trait and note the patron id",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method as GET\r\n3. Enter the Get patron API Request base URL: \nhttps://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}\r\n4. Run the request and note the etag and patronContactId and walletItemId\r\n5. Set method as PUT \nNote: Set etag returned in above step in If-Match Header\r\n6. Set invalid Accept header value\r\n7. â€¢ Enter the Update Patron Contact trait API Request base URL: \neg: https://dev.pvapi.provenue.com/v2/patrons/digitalWalletItems/{walletItemId}\nâ€¢ Enter All Required Parameters in request body\n\n\r\n8. Run the request \r\n9. Verify Logs\r\n10. Login to PV \r\n11. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n12. Verify that contact trait is not updated\r\n13. Repeat above steps with invalid Contact Type header value\r\n14. Repeat above steps with invalid Authentication header value",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and GET method should be set\r\n3. URL and parameters should be set \r\n4. Successful response should be returned\r\n5. PATCH method should be set\r\n6. invalid value should be set\r\n7. URL and parameters should be set \r\n8. Valid error should be returned\r\n9. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well\r\n10. Login should be successful\r\n11. Patron details should be displayed\r\n12. Contact trait should not be updated\r\n13. Valid error should be returned and logged\r\n14. Valid error should be returned and logged"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716233,
    "title": "Verify successful response is returned in Get event availability API with event as path parameter and no availability type in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 174,
    "custom_is_automated": false,
    "custom_refs": "C151244",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/events/1151\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716234,
    "title": "Verify successful response is returned in Get event Seat  availability API with event and zone as path parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 175,
    "custom_is_automated": false,
    "custom_refs": "C151268",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/events/1001/zones/1001\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716235,
    "title": "Verify successful response is returned in Get Package Seat availability API with and zone as path parameter and package ID as query parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 176,
    "custom_is_automated": false,
    "custom_refs": "C151272",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/packageLists/1026/zones/1001?packageId=1015&eventId=1001&eventId=1002&eventId=1003\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716236,
    "title": "Verify successful response is returned in Get Package Seat availability API with and section as path parameter and package ID as query parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 177,
    "custom_is_automated": false,
    "custom_refs": "C151275",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/packageLists/1026/sections/1001?packageId=1015&eventId=1001&eventId=1002&eventId=1003\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716237,
    "title": "Verify successful response is returned in Get event Seat availability API with event and Section as path parameter",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 178,
    "custom_is_automated": false,
    "custom_refs": "C151270",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/events/1001/sections/1001\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716238,
    "title": "Verify successful response is returned in Get Package List availability API with Package as query parameter and no availability type in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 179,
    "custom_is_automated": false,
    "custom_refs": "C151257",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/packageLists/1026?packageId=1015\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716239,
    "title": "Verify successful response is returned in Get Package List availability API with Package as query parameter and availability type availabilityType=SCALE_ZONE_SUMMARY in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 180,
    "custom_is_automated": false,
    "custom_refs": "C151260",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/packageLists/1221?packageId=1220&eventId=1218&eventId=1219&availabilityType=SCALE_ZONE_SUMMARY\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716240,
    "title": "Verify successful response is returned in Get Package List availability API with Package as query parameter and availability type availabilityType=SCALE_SECTION_SUMMARY in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 181,
    "custom_is_automated": false,
    "custom_refs": "C151264",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Package",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/packageLists/1221?packageId=1220&eventId=1218&eventId=1219&availabilityType=SCALE_SECTION_SUMMARY\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716241,
    "title": "Verify successful response is returned in Get event availability API with event as path parameter and SCALE_ZONE_SUMMARY availability type in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 182,
    "custom_is_automated": false,
    "custom_refs": "C151249",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and SCALE_ZONE_SUMMARY as availability API and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/events/1151?availabilityType=SCALE_ZONE_SUMMARY\n\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716242,
    "title": "Verify successful response is returned in Get event availability API with event as path parameter and SCALE_SECTION_SUMMARY availability type in the request",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-27",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 183,
    "custom_is_automated": false,
    "custom_refs": "C151253",
    "custom_category_misc": 1,
    "custom_preconds": "Create a Event",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Select the HTTP method as GET\r\n3. Set the authentication parameters\r\n4. Enter the Event  API request URL and SCALE_ZONE_SUMMARY as availability API and Run the request:\neg: GET\nhttps://dev.pvapi.provenue.com/v2/availability/events/1151?availabilityType=SCALE_SECTION_SUMMARY\n\r\n5. Verify the Response\r\n6. Verify Logs",
        "expected": "1. Tool should be launched successfully\r\n2. GET method should be set\r\n3. Authentication parameters should be set successfully\r\n4. Request should be successfully submitted\r\n5. Response should be displayed with availability for the event \r\n6. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\n â€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box, \nalso try using wildcards, example message_id=123* and that should work as well"
      }
    ],
    "custom_jiras": "AES-1.2.0"
  },
  {
    "id": 30716243,
    "title": "Verify No Duplicate section / header entry are in logs for PV errors",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "AP-58",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 184,
    "custom_is_automated": false,
    "custom_refs": "C154381",
    "custom_category_misc": 1,
    "custom_preconds": "Create a patron with email",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing tool(POSTMAN)\r\n2. Run Get Patron API and note the contact id and patron contact email id and etag\r\n3. Run Update Patron Contact email with invalid email address format\r\n4. Verify logs doesn't have Duplicate section / header entry for the error",
        "expected": "1. Tool should be launched\r\n2. Successful response should be returned\r\n3. Valid error message should be returned\n400 Bad Request\n\"code\": \"pv.patron.20008\"\n \"message\": \"The Patron Contact Email Address was not provided or the format is not correct.\"\r\n4. Logs should contain below sections:\n[API Proxy / Environment] \n[API Proxy Request] \n[Target Request] \n[Target Response] \n[API Proxy Response]"
      }
    ],
    "custom_jiras": "AES-1.2.2"
  },
  {
    "id": 30716244,
    "title": "Verify that the proper error message is displayed when a request with payload is run in invalid format",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-62",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 185,
    "custom_is_automated": false,
    "custom_refs": "C154382",
    "custom_category_misc": 1,
    "custom_preconds": "Launch rest Client",
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Call V2 Create Patron API with invalid request in body\r\n2. Login to Splunk and search using sourcetype=apigee apigee_environment=test",
        "expected": "1. The call should return an error with error \"code\": \"pv.proxy.20003\",\r\n2. Th log Level error and the proxy environment should be displayed"
      }
    ],
    "custom_jiras": null
  },
  {
    "id": 30716245,
    "title": "Verify whether user is able to access the forward proxies even when that access to forward product is removed for the developer app",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-66",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 186,
    "custom_is_automated": false,
    "custom_refs": "C154562",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Remove the 'Ticket Forward' product for the 'PVQAF2 - Sales App' developer \r\n2. Generate a new token \r\n3. Call  V2 forward request\r\n4. Call  V2 Recall request\r\n5. Call  V2 forward request",
        "expected": "1. The app should be removed \r\n2.   'Ticket Forward' should not be displayed in list\r\n3. An error should be returned as user does not have access\r\n4. An error should be returned as user does not have access\r\n5. An error should be returned as user does not have access"
      }
    ],
    "custom_jiras": "AES 1.2.4"
  },
  {
    "id": 30716246,
    "title": "Verify whether trailing slash is supported in patron proxies",
    "section_id": 1686191,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-64",
    "created_by": 333,
    "created_on": 1685027157,
    "updated_by": 333,
    "updated_on": 1685027157,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 187,
    "custom_is_automated": false,
    "custom_refs": "C154568",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch Postman \r\n2. Call V2 patron merge API\r\n3. Call a patron API with trailing slash  run the request",
        "expected": "1. Success\r\n2. request should be loaded succesfully\r\n3. The response should be displayed successfully"
      }
    ],
    "custom_jiras": "AES 1.2.4"
  },
  {
    "id": 30716247,
    "title": "Verify success response for User discovery API with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 1,
    "custom_is_automated": false,
    "custom_refs": "C1316987",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify success response for User discovery API with IPID( api/v1/userDiscovery?ipid=24277460 )\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716248,
    "title": "Verify error response for User discovery API with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 2,
    "custom_is_automated": false,
    "custom_refs": "C1316988",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify error response for User discovery API with email ID \napi/v1/userDiscovery?email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716249,
    "title": "Verify success response for User program details with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 3,
    "custom_is_automated": false,
    "custom_refs": "C1316989",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify success response for User program details >> with IPID \napi/v1/userProgramDetails?ipid=24277460&programId=22318)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716250,
    "title": "Verify error response for User program details with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 4,
    "custom_is_automated": false,
    "custom_refs": "C1316990",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify error response for User program details >> with IPID \napi/v1/userProgramDetails?ipid=24277460&programId=22318)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716251,
    "title": "Verify success response for PING APIs",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 5,
    "custom_is_automated": false,
    "custom_refs": "C1316991",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify success response for PING APIs >> PING API(/api/v1/tools/ping)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716252,
    "title": "Verify error response for PING APIs",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 6,
    "custom_is_automated": false,
    "custom_refs": "C1316992",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify error response for PING APIs >> PING API(/api/v1/tools/ping)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716253,
    "title": "Verify the proxy error validation for User discovery with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 7,
    "custom_is_automated": false,
    "custom_refs": "C1316993",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify the proxy error validation for User discovery  >> with IPID( api/v1/userDiscovery?ipid=24277460 )\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1."
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716254,
    "title": "Verify the proxy error validation for User program details with IPID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 8,
    "custom_is_automated": false,
    "custom_refs": "C1316995",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify the proxy error validation for User program details with IPID( api/v1/userDiscovery?ipid=24277460 )\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1."
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716255,
    "title": "Verify Verify the proxy error validation for PING APIs",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 9,
    "custom_is_automated": false,
    "custom_refs": "C1316998",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify the proxy error validation PING APIs >> PING API(/api/v1/tools/ping)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1."
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716256,
    "title": "Verify success response for User discovery API with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 10,
    "custom_is_automated": false,
    "custom_refs": "C1316999",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify success response for User discovery API with email ID \napi/v1/userDiscovery?email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716257,
    "title": "Verify error response for User discovery API with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 11,
    "custom_is_automated": false,
    "custom_refs": "C1317001",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify error response for User discovery API with email ID \napi/v1/userDiscovery?email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716258,
    "title": "Verify success response for User program details with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 12,
    "custom_is_automated": false,
    "custom_refs": "C1317002",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify success response for User program details >> with email ID  api/v1/userProgramDetails?programId=22570&email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716259,
    "title": "Verify error response for User program details with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 13,
    "custom_is_automated": false,
    "custom_refs": "C1317003",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify error response for User program details >> with email ID  api/v1/userProgramDetails?programId=22570&email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716260,
    "title": "Verify the proxy error validation for User discovery with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 14,
    "custom_is_automated": false,
    "custom_refs": "C1317005",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify the proxy error validation for User discovery  >> with email ID \napi/v1/userDiscovery?email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1."
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716261,
    "title": "Verify the proxy error validation for User program details with email ID",
    "section_id": 1686192,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-75",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 15,
    "custom_is_automated": false,
    "custom_refs": "C1317006",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Verify the proxy error validation for User program details with email ID \napi/v1/userDiscovery?email=minnumary@ust.com)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1."
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716262,
    "title": "Verify whether successful response is returned for Access Control Validate ticket API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 1,
    "custom_is_automated": false,
    "custom_refs": "C1317000",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify success response for Validate ticket API \n\nValidate ticket \n(/validate/ticket/scan**\n/validate/ticket**\n/scans**)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716263,
    "title": "Verify successful XML response is returned in Create Patron API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 2,
    "custom_is_automated": false,
    "custom_refs": "C1317004",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Create Patron API XML Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/\nâ€¢ Enter All Required Parameters\n\n\r\n4. Run the request and note the patron account id\r\n5. \t\nVerify Logs\r\n6. Login to PV and verify that patron is created in Patron Management portal",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. \t\nâ€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n6. New Patron should be created"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716264,
    "title": "Verify successful XML response is returned in Create patron contact API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 3,
    "custom_is_automated": false,
    "custom_refs": "C1317008",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716265,
    "title": "Verify whether proper error response is returned for Access Control Validate ticket API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 4,
    "custom_is_automated": false,
    "custom_refs": "C1317009",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. \t\nLaunch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify success response for Validate ticket API \n\nValidate ticket \n(/validate/ticket/scan**\n/validate/ticket**\n/scans**)\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716266,
    "title": "Verify proper XML response is returned in Get Event Availability",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 5,
    "custom_is_automated": false,
    "custom_refs": "C1317010",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get Event Availability XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the event details"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716267,
    "title": "Verify whether successful response is returned for Event Attendance Summary API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 6,
    "custom_is_automated": false,
    "custom_refs": "C1317011",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Event Attendance Summary API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716268,
    "title": "Verify whether proper error response is returned for Event Attendance Summary API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 7,
    "custom_is_automated": false,
    "custom_refs": "C1317012",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether error response is returned for Event Attendance Summary API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716269,
    "title": "Verify proper XML response is returned in Get Event Section Availability (Seat Availability)",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 8,
    "custom_is_automated": false,
    "custom_refs": "C1317013",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get Event Section Availability (Seat Availability) XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the event details"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716270,
    "title": "Verify proper XML response is returned in Get Event Zone Availability (Seat Availability)",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 9,
    "custom_is_automated": false,
    "custom_refs": "C1317014",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get Event Zone Availability (Seat Availability) XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the event details"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716271,
    "title": "Verify whether successful response is returned for Event Sales Summary API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 10,
    "custom_is_automated": false,
    "custom_refs": "C1317015",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Event Sales Summary API API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716272,
    "title": "Verify whether proper error response is returned for Event Sales Summary API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 11,
    "custom_is_automated": false,
    "custom_refs": "C1317016",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. \t\nLaunch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Event Sales Summary API API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716273,
    "title": "Verify whether successful response is returned for Scan By Location API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 12,
    "custom_is_automated": false,
    "custom_refs": "C1317017",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Scan By Location API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716274,
    "title": "Verify whether proper error response is returned for Scan By Location API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 13,
    "custom_is_automated": false,
    "custom_refs": "C1317018",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Scan By Location API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716275,
    "title": "Verify successful XML response is returned in Create patron contact Address API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 14,
    "custom_is_automated": false,
    "custom_refs": "C1317019",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact Address API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts/1234545/addresss\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact address is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716276,
    "title": "Verify proper XML response is returned in Get PackageList Availability",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 15,
    "custom_is_automated": false,
    "custom_refs": "C1317020",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get PackageList Availability XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the event details"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716277,
    "title": "Verify successful XML response is returned in Create patron contact Email API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 16,
    "custom_is_automated": false,
    "custom_refs": "C1317021",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact Email AddressAPI Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/emails/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact email address is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716278,
    "title": "Verify proper XML response is returned in Get PackageList Section Availability (Seat Availability)",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 17,
    "custom_is_automated": false,
    "custom_refs": "C1317022",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get PackageList Section Availability (Seat Availability) XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the response"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716279,
    "title": "Verify successful XML response is returned in Create patron contact Phone API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 18,
    "custom_is_automated": false,
    "custom_refs": "C1317023",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact Phone API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/Phone/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact Phone is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716280,
    "title": "Verify successful XML response is returned in Create patron Account Contact note API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 19,
    "custom_is_automated": false,
    "custom_refs": "C1317024",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact Note API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/notes/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact Note is addded",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716281,
    "title": "Verify proper XML response is returned in Get PackageList Zone Availability (Seat Availability)",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 20,
    "custom_is_automated": false,
    "custom_refs": "C1317025",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Get PackageList Zone Availability (Seat Availability) XML Request base URL:\nVerify proper XML response is returned in Get Event Availability",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. Verify the response"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716282,
    "title": "Verify successful XML response is returned in Create patron Account Contact Trait API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 21,
    "custom_is_automated": false,
    "custom_refs": "C1317026",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron contact Trait API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/contacts/{patronContactId}/Trait/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new contact trait is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716283,
    "title": "Verify successful XML response is returned in Create patron Account Note API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 22,
    "custom_is_automated": false,
    "custom_refs": "C1317027",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron account Note API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/notes/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new account note is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716284,
    "title": "Verify successful XML response is returned in Create patron Account Trait API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 23,
    "custom_is_automated": false,
    "custom_refs": "C1317028",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron account Note API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/Traits/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new account trait is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716285,
    "title": "Verify successful XML response is returned in Create patron Account Sales rep API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 24,
    "custom_is_automated": false,
    "custom_refs": "C1317029",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron account Sales Rep API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/SalesRep/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that new account sales Repis added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New contact should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716286,
    "title": "Verify successful XML response is returned in Create patron Association API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 25,
    "custom_is_automated": false,
    "custom_refs": "C1317030",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron Associations API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that Patron account association  is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New patron association should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716287,
    "title": "Verify successful XML response is returned in Create patron Digital wallet API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 26,
    "custom_is_automated": false,
    "custom_refs": "C1317031",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as POST\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Create patron Digital wallet API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/digitalWalletItems/\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that Patron account digital wallet is added",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. New patron association should be added"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716288,
    "title": "Verify successful XML response is returned in Patron Merge API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 27,
    "custom_is_automated": false,
    "custom_refs": "C1317032",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. \t\nâ€¢ Enter the patron merge API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{targetPatron AccountId}/merge/{sourcePatron AccountId}\nâ€¢ Enter All Required Parameters in request body with friend patron account id\n\n\r\n4. Run the request and note the patron account id\r\n5. \t\nVerify Logs\r\n6. Login to PV and verify that patron is created in Patron Management portal\r\n7. Verify that source patron is merged with target patron\r\n8. Search for source patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Patron details should be displayed\r\n7. Source Patron should be merged with target patron\r\n8. Error message indicating it has been merged will be displayed.\nEg: * Account ID 42876951 has been merged into account 42876953"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716289,
    "title": "Verify whether successful response is returned for Get Delivery API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 28,
    "custom_is_automated": false,
    "custom_refs": "C1317033",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Get Delivery API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716290,
    "title": "Verify whether proper error response is returned for Get Delivery API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 29,
    "custom_is_automated": false,
    "custom_refs": "C1317034",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error  response is returned for Get Delivery API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716291,
    "title": "Verify whether successful response is returned for Find Deliveries API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 30,
    "custom_is_automated": false,
    "custom_refs": "C1317035",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Find Deliveries API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716292,
    "title": "Verify whether proper error response is returned for Find Deliveries API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 31,
    "custom_is_automated": false,
    "custom_refs": "C1317036",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Find Deliveries API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716293,
    "title": "Verify successful XML response is returned in Accept Patron Association API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 32,
    "custom_is_automated": false,
    "custom_refs": "C1317038",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Enter the Accept Patron association API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/accept\n\r\n6. Run the request\r\n7. \t\nVerify Logs\r\n8. Login to PV and verify that patron is created in Patron Management portal\r\n9. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n10. Verify Friend Status is Confirmed",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Headers and POST method should be set\r\n5. URL and parameters should be set\r\n6. Successful response should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Patron details should be displayed\r\n9. Patron details should be displayed\r\n10. Friend Status should be Confirmed"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716294,
    "title": "Verify whether successful response is returned for Update Delivery API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 33,
    "custom_is_automated": false,
    "custom_refs": "C1317039",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Update Delivery  API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716295,
    "title": "Verify whether proper error response is returned for Update Delivery API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 34,
    "custom_is_automated": false,
    "custom_refs": "C1317040",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Update Delivery  API\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. \t\nHeaders and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716296,
    "title": "Verify whether successful response is returned for Venue Config API for Event using Get method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 35,
    "custom_is_automated": false,
    "custom_refs": "C1317042",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Venue Config API for Event using Get method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716297,
    "title": "Verify whether proper error response is returned for Venue Config API for Event using Get method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 36,
    "custom_is_automated": false,
    "custom_refs": "C1317043",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Venue Config API for Event using Get method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716298,
    "title": "Verify whether successful response is returned for Venue Config API for Event using HEAD method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 37,
    "custom_is_automated": false,
    "custom_refs": "C1317044",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Venue Config API for Event using HEAD method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716299,
    "title": "Verify whether proper error response is returned for Venue Config API for Event using HEAD method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 38,
    "custom_is_automated": false,
    "custom_refs": "C1317045",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Venue Config API for Event using HEAD method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. \t\nHeaders and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716300,
    "title": "Verify successful XML response is returned in Cancel Patron Association API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 39,
    "custom_is_automated": false,
    "custom_refs": "C1317046",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Enter the Cancel Patron association API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/cancel\n\r\n6. Run the request\r\n7. \t\nVerify Logs\r\n8. Login to PV and verify that patron is created in Patron Management portal\r\n9. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n10. Verify Friend Status is Request Cancelled",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Headers and POST method should be set\r\n5. URL and parameters should be set\r\n6. Successful response should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Patron details should be displayed\r\n9. Patron details should be displayed\r\n10. Friend Status should be Request Cancelled"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716301,
    "title": "Verify whether successful response is returned for Venue Config API for Packagelist using Get method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 40,
    "custom_is_automated": false,
    "custom_refs": "C1317047",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Venue Config API for Packagelist using Get method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. \t\nTool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716302,
    "title": "Verify whether proper error response is returned for Venue Config API for Packagelist using Get method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 41,
    "custom_is_automated": false,
    "custom_refs": "C1317049",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Venue Config API for Packagelist using Get method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. \t\nTool should be launched successfully\r\n2. \t\nHeaders and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716303,
    "title": "Verify successful XML response is returned in Decline Patron Association API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 42,
    "custom_is_automated": false,
    "custom_refs": "C1317050",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\r\n4. Run the request and note the etag\r\n5. Enter the Cancel Patron association API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/{patronAccountId}/associations/{patronAssociationId}/decline\n\r\n6. Run the request\r\n7. \t\nVerify Logs\r\n8. Login to PV and verify that patron is created in Patron Management portal\r\n9. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n10. Verify Friend Status is Request Declined",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Headers and POST method should be set\r\n5. URL and parameters should be set\r\n6. Successful response should be returned\r\n7. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n8. Patron details should be displayed\r\n9. Patron details should be displayed\r\n10. Friend Status should be Request Declined"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716304,
    "title": "Verify whether successful response is returned for Venue Config API for Packagelist using HEAD method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 43,
    "custom_is_automated": false,
    "custom_refs": "C1317051",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether successful response is returned for Venue Config API for Packagelist using HEAD method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716305,
    "title": "Verify whether proper error response is returned for Venue Config API for Packagelist using HEAD method",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 44,
    "custom_is_automated": false,
    "custom_refs": "C1317052",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method\r\n3. Verify whether proper error response is returned for Venue Config API for Packagelist using HEAD method\n\nNOTE: Verify PV V2 API and APIGEE logs",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and method should be set\r\n3. Error"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716306,
    "title": "Verify successful XML response is returned in Initial Award Points API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 45,
    "custom_is_automated": false,
    "custom_refs": "C1317053",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. â€¢ Enter the Award Points API API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/loyaltyPrograms/{loyaltyProgramId}/awardPoints\nâ€¢ Enter All Required Parameters in request body\r\n4. Run the request and note the etag\r\n5. \t\nVerify Logs\r\n6. Login to PV and verify that patron is created in Patron Management portal\r\n7. Navigate to Ticketing > Patron Management and select the patron created in precondition\r\n8. Verify that loyalty points are awarded to patron",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Headers and POST method should be set\r\n5. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n6. Patron details should be displayed\r\n7. Patron details should be displayed\r\n8. Loyalty points should be awarded"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716307,
    "title": "Verify successful XML response is returned in Update Patron PATCH API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 46,
    "custom_is_automated": false,
    "custom_refs": "C1317054",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Call GET patron API\r\n3. Set Headers and set method as PATCH\n\n\n\r\n4. â€¢ Enter the Update Patron API XML Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/\nâ€¢ Enter All Required Parameters\n\n\r\n5. Run the request and note the patron account id\r\n6. \t\nVerify Logs\r\n7. Login to PV and verify that patron is updated in Patron Management portal",
        "expected": "1. Tool should be launched successfully\r\n2. The request should be run succesfully\r\n3. Headers and POST method should be set\r\n4. URL and parameters should be set\r\n5. Successful response should be returned\r\n6. \t\nâ€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n7. Patron should be updated"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716308,
    "title": "Verify whether successful response is returned for Update  patron API - PUT",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 47,
    "custom_is_automated": false,
    "custom_refs": "C1317055",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\r\n2. Set Headers and set method PUT\r\n3. Verify whether successful response is returned for Update  patron API - PUT",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and PUT method should be set\r\n3. Success"
      }
    ],
    "custom_jiras": "1.5.0"
  },
  {
    "id": 30716309,
    "title": "Verify successful XML response is returned in Update patron contact API",
    "section_id": 1686193,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "AP-77",
    "created_by": 333,
    "created_on": 1685027231,
    "updated_by": 333,
    "updated_on": 1685027231,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611816,
    "display_order": 48,
    "custom_is_automated": false,
    "custom_refs": "C1317056",
    "custom_category_misc": 1,
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": null,
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch API testing Tool - POSTMAN\n\n\n\n\r\n2. Set Headers and set method as POST\n\n\n\r\n3. Enter the Get patron API Request base URL:\nhttps://dev.pvapi.provenue.com/v2/patrons/42872033\n\n\r\n4. Run the request and note the patron account id\r\n5. Set Headers and set method as PATCH\nNote: Set etag returned in above step in If-Match Header\r\n6. â€¢ Enter the Update  patron contact API Request base URL:\neg: https://dev.pvapi.provenue.com/v2/patrons/42872033/contacts\nâ€¢ Enter All Required Parameters in request body\n\n\r\n7. Run the request\r\n8. \t\nVerify Logs\r\n9. Login to PV and verify that patron is created in Patron Management portal\r\n10. Verify that contact is updated",
        "expected": "1. Tool should be launched successfully\r\n2. Headers and POST method should be set\r\n3. URL and parameters should be set\r\n4. Successful response should be returned\r\n5. Headers and POST method should be set\r\n6. URL and parameters should be set\r\n7. Successful response should be returned\r\n8. â€¢ Identify the messages related to your execution, there MUST be at least 1 message but upto 5 messages can be present per request\n\nâ€¢ Request/response message should be present, this message ends with the text requestContent and responseContent\n\nâ€¢ Above message contains the following information: PV-Proxy-Request-ID, PV-Proxy-Revision, pv-product, requestContent (this should be populated), responseContent\n\nâ€¢ Following fields are masked out with 4 or less characters showing at each end and each other character that is not masked shows up as a \"*\", i.e. the LENGTH\nof the masked string should match the data sent in the request: Authorization, PV-API-Key\n\nâ€¢ Collapse the Splunk arrow at the left and validate that all the fields are auto-detected by Splunk (note: request_headers is a single detected field)\n\nâ€¢ Fields should be searchable in Splunk, for instance message_id=1234 should filter showing only messages with this id, test a few of the fields in the search box,\nalso try using wildcards, example message_id=123* and that should work as well\r\n9. Patron details should be displayed\r\n10. Contact should be updated"
      }
    ],
    "custom_jiras": "1.5.0"
  }
]