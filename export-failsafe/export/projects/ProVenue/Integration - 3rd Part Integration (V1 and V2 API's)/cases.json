[
  {
    "id": 30690147,
    "title": "Verify the create Patron API response for the digital access card by setting the access card option as Disable with Trait and by disabling the trait associated to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43068",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group other than TARGETED PROMOTION should be available and disabled.Set the digital access card option \"Disable with trait\"\r\nExpected Result:\r\nPre-requsites should be run  successfully\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron  API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nResponse should not include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group other than TARGETED PROMOTION should be available and disabled.Set the digital access card option \"Disable with trait\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron  API\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. Pre-requsites should be run  successfully\r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. Response should not include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690148,
    "title": "Verify the Delete Patron API response for the digital access card by setting the access card option as Disable selectively and without associating a triat to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43080",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property \r\n'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is \r\nPATRON_STATUS should be available\r\n4)Set the digital access card option \"Disable with \r\nTrait\"\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n7. Verify the Response and note the contact and address ids\r\nExpected Result:\r\nCreated patron details should be successfully displayed\r\n8. Launch the Tool for Delete Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\nExpected Result:\r\ni) Radio button should be selected for DELETE\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n13. Verify the Response\r\nExpected Result:\r\nResponse should include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property \r\n'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is \r\nPATRON_STATUS should be available\r\n4)Set the digital access card option \"Disable with \r\nTrait\"\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\n2. Set the required header fields\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\n7. Verify the Response and note the contact and address ids\r\n8. Launch the Tool for Delete Patron Information API\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\n2. Set the required header fields\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\n13. Verify the Response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\n4. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n5. SSL tab setting should be set successfully\r\n6. i)Request should be valid\r\n7. Created patron details should be successfully displayed\r\n8. Tool should be launched successfully\r\n9. i) Radio button should be selected for DELETE\r\n10. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n11. SSL tab setting should be set successfully\r\n12. i)Request should be valid\r\n13. Response should include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690149,
    "title": "Verify the Delete Patron API response for the digital access card by setting the access card option as Enable Selectively and by associating a trait to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43083",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property \r\n'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is \r\nPATRON_STATUS should be available\r\n4)Set the digital access card option \"Enable with \r\nTrait\" and associate trait to patron\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n7. Verify the Response and note the contact and address ids\r\nExpected Result:\r\nCreated patron details should be successfully displayed\r\n8. Launch the Tool for Delete Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\nExpected Result:\r\ni) Radio button should be selected for DELETE\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n13. Verify the Response\r\nExpected Result:\r\nResponse should include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property \r\n'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is \r\nPATRON_STATUS should be available\r\n4)Set the digital access card option \"Enable with \r\nTrait\" and associate trait to patron\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\n7. Verify the Response and note the contact and address ids\r\n8. Launch the Tool for Delete Patron Information API\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\n13. Verify the Response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\n4. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n5. SSL tab setting should be set successfully\r\n6. i)Request should be valid\r\n7. Created patron details should be successfully displayed\r\n8. Tool should be launched successfully\r\n9. i) Radio button should be selected for DELETE\r\n10. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n11. SSL tab setting should be set successfully\r\n12. i)Request should be valid\r\n13. Response should include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690150,
    "title": "Verify the Delete Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Enable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43084",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Define the application property \r\n'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as Enable at org \r\nlevel\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n7. Verify the Response and note the contact and address ids\r\nExpected Result:\r\nCreated patron details should be successfully displayed\r\n8. Launch the Tool for Delete Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\nExpected Result:\r\ni) Radio button should be selected for DELETE\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n13. Verify the Response\r\nExpected Result:\r\nResponse should include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Define the application property \r\n'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as Enable at org \r\nlevel\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\n7. Verify the Response and note the contact and address ids\r\n8. Launch the Tool for Delete Patron Information API\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\n13. Verify the Response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\n4. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n5. SSL tab setting should be set successfully\r\n6. i)Request should be valid\r\n7. Created patron details should be successfully displayed\r\n8. Tool should be launched successfully\r\n9. i) Radio button should be selected for DELETE\r\n10. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n11. SSL tab setting should be set successfully\r\n12. i)Request should be valid\r\n13. Response should include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690151,
    "title": "Verify the Delete Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Disable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43085",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Define the application property \r\n'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as 'Disable' at org \r\nlevel\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n7. Verify the Response and note the contact and address ids\r\nExpected Result:\r\nCreated patron details should be successfully displayed\r\n8. Launch the Tool for Delete Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\nExpected Result:\r\ni) Radio button should be selected for DELETE\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\nExpected Result:\r\nAuthentication parameters should be selectedÃ¿Ã¿successfully\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni)Request should be valid\r\n13. Verify the Response\r\nExpected Result:\r\nResponse should not include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Define the application property \r\n'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as 'Disable' at org \r\nlevel\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by clicking on the GET radio button\r\n4. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n5. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n6. i) Enter the GET Patron API Request  base URL with required attributes \r\nii) Click Green Arrow Button\r\n7. Verify the Response and note the contact and address ids\r\n8. Launch the Tool for Delete Patron Information API\r\n9. i) Select the HTTP method as DELETE by clicking on the DELETE radio button\r\n10. 1. Set the Authentication parameters:  Username and password, Auth type -  select as  BASIC and Check Preemptive checkbox\r\n2. Set the required header fields\r\n11. Select SSl tab and set the hostnameÃ¿Ã¿verifier to Allow All\r\n12. i) Enter the DELETE Patron API Request base URL with required attributes\r\nii) Click Green Arrow Button\r\n13. Verify the Response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\n4. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n5. SSL tab setting should be set successfully\r\n6. i)Request should be valid\r\n7. Created patron details should be successfully displayed\r\n8. Tool should be launched successfully\r\n9. i) Radio button should be selected for DELETE\r\n10. Authentication parameters should be selectedÃ¿Ã¿successfully\r\n11. SSL tab setting should be set successfully\r\n12. i)Request should be valid\r\n13. Response should not include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690152,
    "title": "Verify the update Patron API response for the digital access card by setting the access card option as Disable selectively and by associating a triat to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43086",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for V2 Update Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should not be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for V2 Update Patron Information API\r\n4. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. The digital access card details should not be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690153,
    "title": "Verify the update Patron API response for the digital access card by setting the access card option as Enable Selectively and by associating a trait to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43088",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Update Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Update Patron Information API\r\n4. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. The digital access card details should be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690154,
    "title": "Verify the update Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Enable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43089",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n2. Launch the Tool for Update Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n2. Launch the Tool for Update Patron Information API\r\n3. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. i)Enter the V2 Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n7. Verify the response generated for a patron",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. The digital access card details should be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690155,
    "title": "Verify the update Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Disable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43090",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n2. Launch the Tool for V2 Update Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should not be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n2. Launch the Tool for V2 Update Patron Information API\r\n3. i) Select the HTTP method as PUT by  clicking on the PUT radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. i)Enter the Update Patron API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/patrons/144661/digitalWalletItems/4305298 \r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n7. Verify the response generated for a patron",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for PUT\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. The digital access card details should not be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690156,
    "title": "Verify the create Patron API response for the digital access card by setting the access card option as Disable selectively and without associating a triat to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43091",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be available\r\n4)Set the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nResponse should include digital access card details",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be available\r\n4)Set the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. Response should include digital access card details"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690157,
    "title": "Verify the create Patron API response for the digital access card by setting the access card option as Disable selectively and by associating a triat to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43092",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Note down the Agency, User\r\nDefine the application property 'access.card.org.identification.number'\r\nAn account level trait,whose trait group is PATRON_STATUS should be available\r\nSet the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nResponse should not include digital access card details\r\n8. i)Enter the V2 Create Patron API Request base URL  \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Note down the Agency, User\r\nDefine the application property 'access.card.org.identification.number'\r\nAn account level trait,whose trait group is PATRON_STATUS should be available\r\nSet the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. Verify the response generated for a patron\r\n8. i)Enter the V2 Create Patron API Request base URL  \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. Response should not include digital access card details\r\n8. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690158,
    "title": "Verify the create Patron API response for the digital access card by setting the access card option as Enable Selectively and without associating a trait to patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43093",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be present\r\n4)Set the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should not be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be present\r\n4)Set the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n8. The digital access card details should not be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690159,
    "title": "Verify the create Patron API response for the digital access card by setting the access card option as Enable Selectively and by associating a trait to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43094",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be present\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.\r\n8. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Note down the Agency, User\r\n2)Define the application property 'access.card.org.identification.number'\r\n3)An account level trait,whose trait group is PATRON_STATUS should be present\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Create Patron Information API\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. Verify the response generated for a patron\r\n8. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. The digital access card details should be present.\r\n8. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690160,
    "title": "Verify the create Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Enable",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43095",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as Enable\r\n2. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)Valid Agency, User should be available\r\n3)Note down the Agency, User\r\n4)Set the access card option as Enable\r\n2. Launch the Tool for Create Patron Information API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. Verify the response generated for a patron\r\n7. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. The digital access card details should be present.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690161,
    "title": "Verify the Create Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Disable",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43096",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available\r\n2) Note down the Agency, User\r\n3)Set the access card option as disable\r\n2. Launch the Tool for Create Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n7. Verify the digital access cards barcode value is not present in response for an active patron\r\nExpected Result:\r\nThe digital access cards barcode value should not be present in response for an active patron",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available\r\n2) Note down the Agency, User\r\n3)Set the access card option as disable\r\n2. Launch the Tool for Create Patron Information API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i)Enter the V2 Create Patron API Request base URL \r\nii)Enter the Required parameters \r\niii)Click Green Arrow Button\r\n7. Verify the digital access cards barcode value is not present in response for an active patron",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Patron should be Created.\r\n7. The digital access cards barcode value should not be present in response for an active patron"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690162,
    "title": "Verify the get Patron API response for the digital access card by setting the access card option as Disable selectively and by associating a triat to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43098",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)A patron should be available and enabled\r\n3)An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\n4)Set the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should not be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)A patron should be available and enabled\r\n3)An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\n4)Set the digital access card option \"Disable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Get Patron Information API\r\n4. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. The digital access card details should not be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690163,
    "title": "Verify the get Patron API response for the digital access card by setting the access card option as Enable Selectively and without associating a trait to patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 17,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43099",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter valid parameter in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. Verify the response generated for a patron\r\nExpected Result:\r\nSince the trait is not associated to the patron the digital access card details should not be present in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Define the application property 'access.card.org.identification.number'\r\nA patron should be available and enabled, An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\nSet the digital access card option \"Enable selectively\"\r\n2. Note down the Agency, User\r\n3. Launch the Tool for Get Patron Information API\r\n4. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verfier to Allow All\r\n7. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter valid parameter in the URL \r\niii)Click Green Arrow Button\r\n8. Verify the response generated for a patron",
        "expected": "1. \r\n2. \r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n8. Since the trait is not associated to the patron the digital access card details should not be present in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690164,
    "title": "Verify the get Patron API response for the digital access card by setting the access card option as Enable Selectively and by associating a trait to the patron",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 18,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43100",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)A patron should be available and enabled\r\n3)An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\n4)Set the digital access card option \"Enable selectively\"\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.\r\n8. Note down the Agency, User",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Define the application property 'access.card.org.identification.number'\r\n2)A patron should be available and enabled\r\n3)An account level trait,whose trait group is PATRON_STATUS should be associated to the patron\r\n4)Set the digital access card option \"Enable selectively\"\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter an valid parameters in the URL \r\niii)Click Green Arrow Button\r\n7. Verify the response generated for a patron\r\n8. Note down the Agency, User",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. The digital access card details should be present.\r\n8."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690165,
    "title": "Verify the get Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Enable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 19,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43101",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n3)Define the application property 'access.card.org.identification.number'\r\n4)Set the digital access card option \"Enable \"\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the V2  Get Patron API Request base URL\r\n ii)Enter valid parameter in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n3)Define the application property 'access.card.org.identification.number'\r\n4)Set the digital access card option \"Enable \"\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. i)Enter the V2  Get Patron API Request base URL\r\n ii)Enter valid parameter in the URL \r\niii)Click Green Arrow Button\r\n7. Verify the response generated for a patron",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. The digital access card details should be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690166,
    "title": "Verify the get Patron API response for the digital access card when External Digital Access Card Behavior setting at org level is Disable Globally",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18361",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 20,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43102",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n3)Set the digital access card option \"Disable \"\r\n2. Launch the Tool for Get Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter a valid parameter in the URL \r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. Verify the response generated for a patron\r\nExpected Result:\r\nThe digital access card details should not be present.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) In PV a Patron should be available\r\n2) Note down the Agency, User\r\n3)Set the digital access card option \"Disable \"\r\n2. Launch the Tool for Get Patron Information API\r\n3. i) Select the HTTP method as GET by  clicking on the GET radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verfier to Allow All\r\n6. i)Enter the V2 Get Patron API Request base URL\r\n ii)Enter a valid parameter in the URL \r\niii)Click Green Arrow Button\r\n7. Verify the response generated for a patron",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) The response should be generated\r\n7. The digital access card details should not be present."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690167,
    "title": "Verify the response of Get Will Call Delivery API request by account barcode number when some tickets in the delivery methods are exchanged in an orderr",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 21,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43185",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Exchange the  tickets\r\n5) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nThe tickets in the delivery methods except exchanged ticket should be displayed in the response\r\nExpected Result:\r\nThe tickets in the delivery methods except exchanged ticket should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Exchange the  tickets\r\n5) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nThe tickets in the delivery methods except exchanged ticket should be displayed in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The tickets in the delivery methods except exchanged ticket should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690168,
    "title": "Verify the response of Get Will Call Info API by account barcode number after resettin all of the tickets in the delivery method which are scanned",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 22,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43186",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print and Scan all tickets \r\n5) Reset all scanned from ticket services.\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Info API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Info API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Info API Request\r\nExpected Result:\r\nDelivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print and Scan all tickets \r\n5) Reset all scanned from ticket services.\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Info API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Info API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Info API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690169,
    "title": "Verify the response of Get Will Call Delivery API request by account barcode when some tickets in the delivery methods are reprinted in an order",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937667,
    "updated_by": 333,
    "updated_on": 1684937667,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 23,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43191",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Few tickets should be printed\r\n5) Reprint the tickets\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nDelivery Methods with all  tickets should be returned in the response\r\nExpected Result:\r\nDelivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Few tickets should be printed\r\n5) Reprint the tickets\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nDelivery Methods with all  tickets should be returned in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690170,
    "title": "Verify the second Print Will Call Delivery API request response after a Get Will Call Delivery API request and Print Will Call API request by an account barcode number",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 24,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43192",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Print Will Call Delivery API Request\r\nExpected Result:\r\nAll tickets in the delivery method should be returned and printed in the response\r\n5. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n6. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n7. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nAll tickets in the delivery method should be returned in the response\r\n8. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n9. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n10. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of second Print Will Call Delivery API Request\r\nExpected Result:\r\nAll Delivery Methods with all  tickets should be returned and printed in the in the second Print Will Call Delivery API response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Print Will Call Delivery API Request\r\n5. Launch the Tool - REST client\r\n6. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n7. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\n8. Launch the Tool - REST client\r\n9. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n10. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of second Print Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. All tickets in the delivery method should be returned and printed in the response\r\n5. Tool should be successfully launched\r\n6. Settings should be successfully completed\r\n7. All tickets in the delivery method should be returned in the response\r\n8. Tool should be successfully launched\r\n9. Settings should be successfully completed\r\n10. All Delivery Methods with all  tickets should be returned and printed in the in the second Print Will Call Delivery API response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690171,
    "title": "Verify the response of Print Will Call Delivery API by barcode number after few of the tickets in the delivery method are reset in ticket services",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 25,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43194",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisites:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted\r\n4) Perform a transaction using any delivery method.\r\n4) Print few tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nAll  tickets should be printed and returned in the response\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nAll  tickets should be printed and returned in the response with ticket barcodes",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisites:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted\r\n4) Perform a transaction using any delivery method.\r\n4) Print few tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. All  tickets should be printed and returned in the response\r\n5. All  tickets should be printed and returned in the response with ticket barcodes"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690172,
    "title": "Verify the response of Get Will Call Delivery API by account barcode number after all of the tickets in the delivery method are reset in ticket services",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 26,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43196",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisites:\r\n\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n6) Patron Account digital access card Barcode Number should be noted.\r\nExpected Result:\r\nPrerequisites should be set up successfully\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nDelivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisites:\r\n\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. Prerequisites should be set up successfully\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690173,
    "title": "Verify the response of Print Will Call Delivery API by account barcode number after all of the tickets in the delivery method are reset in ticket services",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 27,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43197",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisites:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted\r\n4) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nAll  tickets should be printed and returned in the response\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nAll  tickets should be printed and returned in the response with ticket barcodes",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisites:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted\r\n4) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Reset all printed tickets from ticket services.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. All  tickets should be printed and returned in the response\r\n5. All  tickets should be printed and returned in the response with ticket barcodes"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690174,
    "title": "Verify the response of Get Will Call Delivery API request by account barcode number with all request parameters when all of the tickets in the delivery methods are printed and no tickets are scanned",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 28,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43201",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) No tickets should be scanned\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Print Will Call Delivery API Request\r\nExpected Result:\r\nAll Delivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) No tickets should be scanned\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Print  Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Print Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Print Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. All Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690175,
    "title": "Verify the response of Get Will Call Delivery API request by account barcode number when none of the tickets in the delivery methods are printed and no tickets are scanned",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 29,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43205",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4 )No tickets should be printed\r\n5) No tickets should be scanned\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nDelivery Methods with all  tickets should be returned in the response\r\nExpected Result:\r\nDelivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4 )No tickets should be printed\r\n5) No tickets should be scanned\r\n6) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nDelivery Methods with all  tickets should be returned in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690176,
    "title": "Verify the response of Get Will Call Delivery API using Account Barcode Number in the request after printing all tickets from Ticket Services",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 30,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43214",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nAll Delivery Methods with all  tickets should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using any delivery method.\r\n4) Print all tickets from ticket services.\r\n5) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the account barcode number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. All Delivery Methods with all  tickets should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690177,
    "title": "Verify the Print Will Call Delivery API response by entering invalid card number in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 31,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43231",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter an invalid credit card number in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nUser should be able to enter the URL and request with range and card barcode number\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nProper error message should be displayed in the Print Will Call Delivery API response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter an invalid credit card number in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. User should be able to enter the URL and request with range and card barcode number\r\n5. Proper error message should be displayed in the Print Will Call Delivery API response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690178,
    "title": "Verify the Print Will Call Delivery API response by entering invalid barcode number in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 32,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43232",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter an invalid patron card barcode number in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nUser should be able to enter the URL and request with range and card barcode number\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nProper error message should be displayed in the Print Will Call Delivery API response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter an invalid patron card barcode number in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. User should be able to enter the URL and request with range and card barcode number\r\n5. Proper error message should be displayed in the Print Will Call Delivery API response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690179,
    "title": "Verify the Print Will Call Delivery API with different combination of search request using digital access card barcode and  card number",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 33,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43233",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the credit card number and barcode number as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nUser should be able to enter the URL and request with range and card barcode number\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nProper error message should be displayed in the Print Will Call Delivery API response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the credit card number and barcode number as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. User should be able to enter the URL and request with range and card barcode number\r\n5. Proper error message should be displayed in the Print Will Call Delivery API response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690180,
    "title": "Verify the Print Will Call Delivery API response with search request as card number only",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 34,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43235",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the credit card number noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nUser should be able to enter the URL and request with range and card barcode number\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nTickets should be printed and displayed in the responses with ticket barcodes.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the credit card number noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. User should be able to enter the URL and request with range and card barcode number\r\n5. Tickets should be printed and displayed in the responses with ticket barcodes."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690181,
    "title": "Verify the Print Will Call Delivery API with seacrh request as digital access card barcode only",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 35,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43237",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\nExpected Result:\r\nUser should be able to enter the URL and request with range and card barcode number\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request\r\nExpected Result:\r\nTickets should be printed and displayed in the responses with ticket barcodes.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction using above patron,will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print API Request base URL       \r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Print Will Call Delivery API Request body\r\niii)Enter other mandatory fields\r\n5. Click Green Arrow Button and Verify the Response of Print Will Call Delivery API request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. User should be able to enter the URL and request with range and card barcode number\r\n5. Tickets should be printed and displayed in the responses with ticket barcodes."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690182,
    "title": "Verify the Get Will Call Delivery API response by entering invalid card number in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 36,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43239",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API Request base URL\r\nii)Enter an invalid credit card number in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nProper error message should be displayed in the Get Will Call Delivery API response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API Request base URL\r\nii)Enter an invalid credit card number in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper error message should be displayed in the Get Will Call Delivery API response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690183,
    "title": "Verify the Get Will Call Delivery API response by entering invalid barcode number in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 37,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43240",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as i)Enter the Maintain Patron API  Request base URL\r\nii)Enter the Patron Account ID as noted in pre-requisites in Maintain Patron API request URL\r\niii)Enter other mandatory fieldsby clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter an invalid barcode number in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nProper error message should be displayed in the Get Will Call Delivery API response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as i)Enter the Maintain Patron API  Request base URL\r\nii)Enter the Patron Account ID as noted in pre-requisites in Maintain Patron API request URL\r\niii)Enter other mandatory fieldsby clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter an invalid barcode number in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper error message should be displayed in the Get Will Call Delivery API response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690184,
    "title": "Verify the Get Will Call Delivery API response with search request as card number only in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 38,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43243",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the credit card number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nProper details should be displayed in the Get Will Call Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the credit card number as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper details should be displayed in the Get Will Call Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690185,
    "title": "Verify the Get Will Call Delivery API response with search request as digital access card barcode only",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 39,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43248",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request\r\nExpected Result:\r\nProper details should be displayed in the Get Will Call Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Get Will Call Delivery API  Request base URL\r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Get Will Call Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Get Will Call Delivery API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper details should be displayed in the Get Will Call Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690186,
    "title": "Verify the Find Delivery API response by entering invalid barcode number in the request",
    "section_id": 1684779,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937668,
    "updated_by": 333,
    "updated_on": 1684937668,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 40,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43250",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Patron Account digital access card Barcode Number should be noted.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter an invalid Barcode Number which is not matched with barcode number noted in pre-requisites \r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request\r\nExpected Result:\r\nProper error message should be displayed in the Find Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter an invalid Barcode Number which is not matched with barcode number noted in pre-requisites \r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper error message should be displayed in the Find Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690187,
    "title": "Verify the Find Delivery API response by entering invalid card number in the request",
    "section_id": 1684780,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43251",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter an invalid Credit Card Number which is not matched with card number noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request\r\nExpected Result:\r\nProper error message should be displayed in the Find Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter an invalid Credit Card Number which is not matched with card number noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper error message should be displayed in the Find Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690188,
    "title": "Verify the Find Delivery API response with different combination of search request using digital access card barcode and  card number",
    "section_id": 1684780,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43252",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter the Credit Card Number and barcode number as noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request\r\nExpected Result:\r\nProper details should be displayed in the Find Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter the Credit Card Number and barcode number as noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper details should be displayed in the Find Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690189,
    "title": "Verify the Find Delivery API response with search request as card number only",
    "section_id": 1684780,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43257",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\n2) Agency should be set to External\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Find Delivery API  Request base URL\nii)Enter the Credit Card Number as noted in pre-requisites in Find Delivery API request URL\n\nVerify the Response of Find Delivery API Request\r\nExpected Result:\r\nProper details should be displayed in the Find Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\n2) Agency should be set to External\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\n4. i)Enter the Find Delivery API  Request base URL\nii)Enter the Credit Card Number as noted in pre-requisites in Find Delivery API request URL\n\nVerify the Response of Find Delivery API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper details should be displayed in the Find Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690190,
    "title": "Verify the Find Delivery API response with search request as digital access card barcode only",
    "section_id": 1684780,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18092",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C43261",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Patron Account digital access card Barcode Number should be noted.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request\r\nExpected Result:\r\nProper details should be displayed in the Find Delivery API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Find Delivery API  Request base URL\r\nii)Enter the Patron Account digital access card Barcode Number  as noted in pre-requisites in Find Delivery API request URL\r\niii)Enter other mandatory fields\r\n\r\nVerify the Response of Find Delivery API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Proper details should be displayed in the Find Delivery API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690191,
    "title": "Verify the wallet icon displayed when wallet type is APPLE_PAY",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135904",
    "custom_preconds": "Complete a sale transaction with APPLE_PAY wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment\r\nExpected Result:\r\nA wallet icon should be displayed against APPLE_PAY payment",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. A wallet icon should be displayed against APPLE_PAY payment"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690192,
    "title": "Verify the wallet icon displayed when wallet type is PAYPAL",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135905",
    "custom_preconds": "Complete a sale transaction with PAYPAL wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment\r\nExpected Result:\r\nA wallet icon should be displayed against PAYPAL payment",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. A wallet icon should be displayed against PAYPAL payment"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690193,
    "title": "Verify the wallet icon displayed when wallet type is MASTERPASS",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135906",
    "custom_preconds": "Complete a sale transaction with MASTERPASS wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment\r\nExpected Result:\r\nA wallet icon should be displayed against MASTERPASS payment",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. A wallet icon should be displayed against MASTERPASS payment"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690194,
    "title": "Verify the wallet icon displayed when wallet type is GOOGLE_PAY",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135907",
    "custom_preconds": "Complete a sale transaction with GOOGLE_PAY wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment\r\nExpected Result:\r\nA wallet icon should be displayed against GOOGLE_PAY payment",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify that wallet icon is displayed against the payment",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. A wallet icon should be displayed against GOOGLE_PAY payment"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690195,
    "title": "Verify the wallet type text displayed in card response modal when wallet type is APPLE_PAY",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135909",
    "custom_preconds": "Complete a sale transaction with APPLE_PAY wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal\r\nExpected Result:\r\nDigital Wallet Type text should be APPLE_PAY",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. Digital Wallet Type text should be APPLE_PAY"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690196,
    "title": "Verify the wallet type text displayed in card response modal when wallet type is PAYPAL",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135910",
    "custom_preconds": "Complete a sale transaction with PAYPAL wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal\r\nExpected Result:\r\nDigital Wallet Type text should be PAYPAL",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. Digital Wallet Type text should be PAYPAL"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690197,
    "title": "Verify the wallet type text displayed in card response modal when wallet type is MASTERPASS",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135911",
    "custom_preconds": "Complete a sale transaction with MASTERPASS wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal\r\nExpected Result:\r\nDigital Wallet Type text should be MASTERPASS",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. Digital Wallet Type text should be MASTERPASS"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690198,
    "title": "Verify the wallet type text displayed in card response modal when wallet type is GOOGLE_PAY",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135912",
    "custom_preconds": "Complete a sale transaction with GOOGLE_PAY wallet type via V2 API and note the order id",
    "custom_test_purpose": null,
    "custom_steps": "1. Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\nExpected Result:\r\nOrder details should be opened\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal\r\nExpected Result:\r\nDigital Wallet Type text should be GOOGLE_PAY",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Login to PV\r\n2. Navigate to ticket services and search and select the order noted in pre-requisite\r\n3. Navigate to payments and verify the digital wallet type text is displayed against the payment in card response modal",
        "expected": "1. Login should be successful\r\n2. Order details should be opened\r\n3. Digital Wallet Type text should be GOOGLE_PAY"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690199,
    "title": "Verify V2 Checkout API with invalid wallet type",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135914",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request with APPLE_PAY payment details and wallet type: invalid wallet type\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20046: Wallet Type 'XXX' is not valid. Allowed values are: APPLE_PAY, MASTERPASS, GOOGLE_PAY and PAYPAL.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request with APPLE_PAY payment details and wallet type: invalid wallet type\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20046: Wallet Type 'XXX' is not valid. Allowed values are: APPLE_PAY, MASTERPASS, GOOGLE_PAY and PAYPAL."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690200,
    "title": "Verify V2 checkout API response when the service charge is applied to first installment when 'Due with first installment' is set to true for the payment plan",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24894",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C147782",
    "custom_preconds": "Create an Event in PV \r\nCreate a Transaction service charge with one-time use limit is set \r\nCreate a payment plan and set SERVICE CHARGE option 'Due with first installment' to true\r\nAssociate the service charge and payment plan to the event\r\nCreate a patron P1",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\nExpected Result:\r\nSuccessful response should be generated\nService charge should be added in the cart\r\n4. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nDo not provide the service charge amount in the both the blocks\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request \r\nExpected Result:\r\nError message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nSplit the entire cart amount including the service charge into payment and receivables\nRun the API\r\nExpected Result:\r\nError message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n7. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the first installment due now\nRun the API\r\nExpected Result:\r\ntransaction should be completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\n4. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nDo not provide the service charge amount in the both the blocks\r\n5. Run the request \r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nSplit the entire cart amount including the service charge into payment and receivables\nRun the API\r\n7. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the first installment due now\nRun the API",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\nService charge should be added in the cart\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Error message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n7. transaction should be completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "5.0.00"
  },
  {
    "id": 30690201,
    "title": "Verify V2 checkout API response when the service charge is applied to first installment when 'Due with first installment' is set to false for the payment plan",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24894",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C147783",
    "custom_preconds": "Create an Event in PV \r\nCreate a Transaction service charge with one-time use limit is set \r\nCreate a payment plan and set SERVICE CHARGE option 'Due with first installment' to false\r\nAssociate the service charge and payment plan to the event\r\nCreate a patron P1",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\nExpected Result:\r\nSuccessful response should be generated\nService charge should be added in the cart\r\n4. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nDo not provide the service charge amount in the both the blocks\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request \r\nExpected Result:\r\nError message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the first installment due now\nRun the API\r\nExpected Result:\r\nError message should be returned in response since the installment should be divided equally\r\n7. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nSplit the entire cart amount including the service charge into payment and receivables\nRun the API\r\nExpected Result:\r\ntransaction should be completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\n4. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nDo not provide the service charge amount in the both the blocks\r\n5. Run the request \r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the first installment due now\nRun the API\r\n7. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nSplit the entire cart amount including the service charge into payment and receivables\nRun the API",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\nService charge should be added in the cart\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Error message should be returned in response since the installment should be divided equally\r\n7. transaction should be completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "5.0.00"
  },
  {
    "id": 30690202,
    "title": "Verify V2 checkout API response when the service charge is also included in the amount due when 'Due with first installment' is set to true for the payment plan and all the installments are due now",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24894",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C147784",
    "custom_preconds": "Create an Event in PV \r\nCreate a Transaction service charge with one-time use limit is set \r\nCreate a payment plan and set SERVICE CHARGE option 'Due with first installment' to true. Also all installments should be in past date\r\nAssociate the service charge and payment plan to the event\r\nCreate a patron P1",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\nExpected Result:\r\nService charge should also be added in the cart\r\n4. Load V2 Checkout API request with Patron ID\nProvide only the payment block\nDo not provide the service charge amount\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request \r\nExpected Result:\r\nError message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the total amount due\nRun the API\r\nExpected Result:\r\ntransaction should be completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\n4. Load V2 Checkout API request with Patron ID\nProvide only the payment block\nDo not provide the service charge amount\r\n5. Run the request \r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the total amount due\nRun the API",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Service charge should also be added in the cart\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. transaction should be completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "5.0.00"
  },
  {
    "id": 30690203,
    "title": "Verify V2 checkout API response when the service charge is also included in the amount due when 'Due with first installment' is set to false for the payment plan and all the installments are due now",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24894",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C147785",
    "custom_preconds": "Create an Event in PV \r\nCreate a Transaction service charge with one-time use limit is set \r\nCreate a payment plan and set SERVICE CHARGE option 'Due with first installment' to false. Also all installments should be in past date\r\nAssociate the service charge and payment plan to the event\r\nCreate a patron P1",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\nExpected Result:\r\nService charge should also be added in the cart\r\n4. Load V2 Checkout API request with Patron ID\nProvide only the payment block\nDo not provide the service charge amount\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request \r\nExpected Result:\r\nError message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the total amount due\nRun the API\r\nExpected Result:\r\ntransaction should be completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\nDo not provide patron ID in the request\r\n3. Run V2 Lock Seats API request\nVerify the response contains service charge amount\r\n4. Load V2 Checkout API request with Patron ID\nProvide only the payment block\nDo not provide the service charge amount\r\n5. Run the request \r\n6. Load V2 Checkout API request with Patron ID\nProvide payment and schedule payment block\nProvide the service charge along with the total amount due\nRun the API",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Service charge should also be added in the cart\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response as the total amount is not equal to the provided amount in the cart\r\n6. transaction should be completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "5.0.00"
  },
  {
    "id": 30690204,
    "title": "Verify V2 Checkout API with null wallet type",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C135915",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request with APPLE_PAY payment details and wallet type: null\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20046: Wallet Type '' is not valid. Allowed values are: APPLE_PAY, MASTERPASS, GOOGLE_PAY and PAYPAL.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request with APPLE_PAY payment details and wallet type: null\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20046: Wallet Type '' is not valid. Allowed values are: APPLE_PAY, MASTERPASS, GOOGLE_PAY and PAYPAL."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690205,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is APPLE_PAY and APPLE_PAY token is not provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137273",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nDo not provide APPLE_PAY token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20048: If no Apple Pay token is provided and payment is not externally authorized, the walletType cannot be 'APPLE_PAY'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nDo not provide APPLE_PAY token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20048: If no Apple Pay token is provided and payment is not externally authorized, the walletType cannot be 'APPLE_PAY'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690206,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is APPLE_PAY and APPLE_PAY token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137290",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nProvide APPLE_PAY token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nSuccess\r\n6. Verify the response\r\nExpected Result:\r\nSuccess",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nProvide APPLE_PAY token\r\n5. Run the request\r\n6. Verify the response",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Success\r\n6. Success"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690207,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is MASTERPASS and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 17,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137291",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=Masterpass \nProvideMasterpass token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nSuccess\r\n6. Verify the response\r\nExpected Result:\r\nSuccess",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=Masterpass \nProvideMasterpass token\r\n5. Run the request\r\n6. Verify the response",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Success\r\n6. Success"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690208,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is PAYPAL and PAYPAL nonce is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 18,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137292",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=PAYPAL \nProvide PAYPAL  token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nSuccess\r\n6. Verify the response\r\nExpected Result:\r\nSuccess",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=PAYPAL \nProvide PAYPAL  token\r\n5. Run the request\r\n6. Verify the response",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Success\r\n6. Success"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690209,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is not APPLE_PAY and APPLE_PAY token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 19,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137278",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not APPLE PAY\nProvide APPLE_PAY token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\n pv.cart.20043: When an Apple Pay token is provided, the walletType most be null or 'APPLE_PAY'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not APPLE PAY\nProvide APPLE_PAY token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\n pv.cart.20043: When an Apple Pay token is provided, the walletType most be null or 'APPLE_PAY'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690210,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is not provided and APPLE_PAY token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 20,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137288",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=null\nProvide APPLE_PAY token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nno message\r\n6. Verify the error message\r\nExpected Result:\r\nSuccess",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=null\nProvide APPLE_PAY token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. no message\r\n6. Success"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690211,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is not MASTERPASS and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 21,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137280",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not Masterpass\nProvide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType most be null or 'MASTERPASS'.\n.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not Masterpass\nProvide MASTERPASS token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType most be null or 'MASTERPASS'.\n."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690212,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is not provided and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 22,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137287",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=null\nProvide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nTransaction will be succesful",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=null\nProvide MASTERPASS token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Transaction will be succesful"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690213,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is not PAYPAL and PAYPAL nonce is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 23,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137282",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not PAYPAL\nProvide PAYPAL nonce \r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\n pv.cart.20044: When a PayPal Nonce is provided, the walletType most be null or 'PAYPAL'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=not PAYPAL\nProvide PAYPAL nonce \r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\n pv.cart.20044: When a PayPal Nonce is provided, the walletType most be null or 'PAYPAL'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690214,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is not provided and PAYPAL nonce is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 24,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137283",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=no payment type \nProvide PAYPAL nonce \r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nSuccess",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=no payment type \nProvide PAYPAL nonce \r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Success"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690215,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is MASTERPASS and MASTERPASS token is not provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 25,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137274",
    "custom_preconds": "Create an Event in PV \r\nNote the MASTERPASS  Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=MASTERPASS \nDo not provide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20049: If no MasterPass token is provided and payment is not externally authorized, the walletType cannot be 'MASTERPASS'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=MASTERPASS \nDo not provide MASTERPASS token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20049: If no MasterPass token is provided and payment is not externally authorized, the walletType cannot be 'MASTERPASS'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690216,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is PAYPAL and PAYPAL nonce is not provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 26,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137275",
    "custom_preconds": "Create an Event in PV \r\nNote the PAYPAL Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=PAYPAL \nDo not provide PAYPAL nonce\nProvide a non-paypal payment method\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20047: If Payment Type is not PayPal and payment is not externally authorized, the walletType cannot be 'PAYPAL'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=PAYPAL \nDo not provide PAYPAL nonce\nProvide a non-paypal payment method\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20047: If Payment Type is not PayPal and payment is not externally authorized, the walletType cannot be 'PAYPAL'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690217,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is not MASTERPASS and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 27,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137276",
    "custom_preconds": "Create an Event in PV",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY\nProvide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType must be null or 'MASTERPASS'.\r\n7. Repeat above steps with walletType=GOOGLE_PAY/PAYPAL\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType must be null or 'MASTERPASS'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY\nProvide MASTERPASS token\r\n5. Run the request\r\n6. Verify the error message\r\n7. Repeat above steps with walletType=GOOGLE_PAY/PAYPAL",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType must be null or 'MASTERPASS'.\r\n7. Below error message should be returned:\npv.cart.20045: When a MasterPass token is provided, the walletType must be null or 'MASTERPASS'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690218,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is not provided and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 28,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137277",
    "custom_preconds": "Create an Event in PV",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nDo not provide walletType\nProvide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nSuccessful response should be returned\r\n6. Verify wallet icon and digital wallet type in Ticket Services\r\nExpected Result:\r\nwallet icon and digital wallet type: MASTERPASS should be dispalyed\r\n7. Verify wallet type code in payment table and card response table\r\nExpected Result:\r\nWallet type code should be MP",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nDo not provide walletType\nProvide MASTERPASS token\r\n5. Run the request\r\n6. Verify wallet icon and digital wallet type in Ticket Services\r\n7. Verify wallet type code in payment table and card response table",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Successful response should be returned\r\n6. wallet icon and digital wallet type: MASTERPASS should be dispalyed\r\n7. Wallet type code should be MP"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690219,
    "title": "Verify validation is not returned when externallyAuthorized=false and wallet type is MASTERPASS and MASTERPASS token is provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 29,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137279",
    "custom_preconds": "Create an Event in PV",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=MASTERPASS\nProvide MASTERPASS token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nSuccessful response should be returned\r\n6. Verify wallet icon and digital wallet type in Ticket Services\r\nExpected Result:\r\nwallet icon and digital wallet type: MASTERPASS should be dispalyed\r\n7. Verify wallet type code in payment table and card response table\r\nExpected Result:\r\nWallet type code should be MP",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=MASTERPASS\nProvide MASTERPASS token\r\n5. Run the request\r\n6. Verify wallet icon and digital wallet type in Ticket Services\r\n7. Verify wallet type code in payment table and card response table",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Successful response should be returned\r\n6. wallet icon and digital wallet type: MASTERPASS should be dispalyed\r\n7. Wallet type code should be MP"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690220,
    "title": "Verify validation is returned when externallyAuthorized=false and wallet type is APPLE_PAY and APPLE_PAY token is not provided in V2 Checkout API",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 4,
    "milestone_id": null,
    "refs": "PV-24325",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 30,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C137285",
    "custom_preconds": "Create an Event in PV \r\nNote the Apple Pay Payment method id",
    "custom_test_purpose": null,
    "custom_steps": "1. Launch POSTMAN tool\r\nExpected Result:\r\nPOSTMAN tool should be launched\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\nExpected Result:\r\nV2 Lock Seats API request should be loaded\r\n3. Run V2 Lock Seats API request\r\nExpected Result:\r\nSuccessful response should be generated\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nDo not provide APPLE_PAY token\r\nExpected Result:\r\nV2 Checkout API request should be loaded\n\n\r\n5. Run the request\r\nExpected Result:\r\nError message should be returned in response\r\n6. Verify the error message\r\nExpected Result:\r\nBelow error message should be returned:\npv.cart.20048: If no Apple Pay token is provided and payment is not externally authorized, the walletType cannot be 'APPLE_PAY'.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Launch POSTMAN tool\r\n2. Load V2 Lock Seats API request with event created in pre-requisite and sale type-Single\r\n3. Run V2 Lock Seats API request\r\n4. Load V2 Checkout API request \nexternallyAuthorized=false \nwalletType=APPLE_PAY \nDo not provide APPLE_PAY token\r\n5. Run the request\r\n6. Verify the error message",
        "expected": "1. POSTMAN tool should be launched\r\n2. V2 Lock Seats API request should be loaded\r\n3. Successful response should be generated\r\n4. V2 Checkout API request should be loaded\n\n\r\n5. Error message should be returned in response\r\n6. Below error message should be returned:\npv.cart.20048: If no Apple Pay token is provided and payment is not externally authorized, the walletType cannot be 'APPLE_PAY'."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "4.0.40"
  },
  {
    "id": 30690221,
    "title": "Verify Checkout API response after performing recall action",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-19679",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 31,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45750",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2. .Login to PV\r\nExpected Result:\r\nPV should be successfully launched\r\n3. 1.Login to PV\n2.Create an event\n3.Perform sale for the event created\n4.Perform Forward action to another attending patron\n5.Perform recall API\r\nExpected Result:\r\nTransaction should be successfully completed\r\n4. Perfrom checkout API for the event\r\nExpected Result:\r\nTotal sales revenue is displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2. .Login to PV\r\n3. 1.Login to PV\n2.Create an event\n3.Perform sale for the event created\n4.Perform Forward action to another attending patron\n5.Perform recall API\r\n4. Perfrom checkout API for the event",
        "expected": "1. \r\n2. PV should be successfully launched\r\n3. Transaction should be successfully completed\r\n4. Total sales revenue is displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.5.00"
  },
  {
    "id": 30690222,
    "title": "Verify user is able to process the cards in V2 Checkout",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-19602, QAAUTO-128",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 32,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45761",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\n4)A patron should be available and patron id should be noted\n5)User should remove ?Z? value from AVS Responses for both Card Merchants FB_MOTO and \nFB_RETAIL in System Admin to get Card Authorization Error\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\nii)Provide required fields & patron id noted in pre-requisites in request body\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\r\n7. Verify the Response of Locked Seats and note \nthe Etag and Cart ID\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Response should be valid and correct  informations should be provided without any  errors\niii) Created Offer details in the Response should be correct.\r\n8. Launch the Tool for Checkout API\r\nExpected Result:\r\nTool should be launched successfully\r\n9. i) Select the HTTP method as POST by clicking on \nthe POST radio button\nii) Enter the response body parameters including \ncard number and set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters including card \nnumber and request content type should be set \nsuccessfully\r\n10. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n11. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n12. i) Enter the Checkout API Request base URL\nii)Provide new patron details in request body\niii) Click Green Arrow Button\r\nExpected Result:\r\nUser should be able to process the cards in V2 \nCheckout",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\n4)A patron should be available and patron id should be noted\n5)User should remove ?Z? value from AVS Responses for both Card Merchants FB_MOTO and \nFB_RETAIL in System Admin to get Card Authorization Error\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\nii)Provide required fields & patron id noted in pre-requisites in request body\niii) Click Green Arrow Button\r\n7. Verify the Response of Locked Seats and note \nthe Etag and Cart ID\r\n8. Launch the Tool for Checkout API\r\n9. i) Select the HTTP method as POST by clicking on \nthe POST radio button\nii) Enter the response body parameters including \ncard number and set the request content type\r\n10. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n11. Select SSl tab and set the hostname  verifier to Allow All\r\n12. i) Enter the Checkout API Request base URL\nii)Provide new patron details in request body\niii) Click Green Arrow Button",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Response should be valid and correct  informations should be provided without any  errors\niii) Created Offer details in the Response should be correct.\r\n8. Tool should be launched successfully\r\n9. i) Radio button should be selected for POST\nii) Response body parameters including card \nnumber and request content type should be set \nsuccessfully\r\n10. Authentication parameters should be selected  successfully\r\n11. SSL tab setting should be set successfully\r\n12. User should be able to process the cards in V2 \nCheckout"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.4.00"
  },
  {
    "id": 30690223,
    "title": "Verify the Etag in the Checkout API response when the non existent If-Match header is passed in the request",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 33,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45801",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Pass non existant If-Match header\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Verify the Etag in the Checkout API response when the non existent If-Match header is passed in the request\r\nExpected Result:\r\nThe application should throw error cart not found.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Pass non existant If-Match header\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the Etag in the Checkout API response when the non existent If-Match header is passed in the request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. The application should throw error cart not found."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690224,
    "title": "Verify the Etag in the Checkout API response when the If-Match header is not passed in the request",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 34,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45802",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3) Note down the Agency, User, Event\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Do not Pass invalid If-Match header\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \niv)Enter the required attributes in payment details request body\n v)Enter the required attributes in delivery details request body-\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\r\n6. Verify the Etag in the Checkout API response when the If-Match header is not passed in the request\r\nExpected Result:\r\n412 Precondition Failed message should be returned.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3) Note down the Agency, User, Event\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Do not Pass invalid If-Match header\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \niv)Enter the required attributes in payment details request body\n v)Enter the required attributes in delivery details request body-\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the Etag in the Checkout API response when the If-Match header is not passed in the request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\r\n6. 412 Precondition Failed message should be returned."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690225,
    "title": "Verify the Checkout API is validating the card type passed in the request",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17808",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 35,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45806",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An event should be available\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Login to PV using valid credentials.\r\nExpected Result:\r\nLogin should be successful.\r\n3. 1)Navigate to Event->Event Access tab and select card type from the drop down menu for APIUSER\r\n2)Exclude/Remove card type MSTR from the above event.\r\nExpected Result:\r\nUser should be able to exclude/remove card type MSTR from the above event.\r\n4. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n5. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n6. Call Lock Seat API and Verify that in the lock seats API response, under delivery card types, MSTR is not there.\r\nExpected Result:\r\nMSTR should not be there under delivery card types section of lock seat API response\r\n7. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n Include gift card details with external authorization true and enter the card type MSTR which was not displayed in the lock seat API response.\r\nv)Enter the delivery method id in delivery details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n8. Click Green Arrow Button and Verify the Checkout API is validating the card type passed in the request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\n\r\nIn the checkout API response, pv.cart.1092=External authorization card type (code={0}) is not valid for Checkout API should be displayed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An event should be available\r\n2. Login to PV using valid credentials.\r\n3. 1)Navigate to Event->Event Access tab and select card type from the drop down menu for APIUSER\r\n2)Exclude/Remove card type MSTR from the above event.\r\n4. Launch the Tool - REST client\r\n5. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n6. Call Lock Seat API and Verify that in the lock seats API response, under delivery card types, MSTR is not there.\r\n7. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n Include gift card details with external authorization true and enter the card type MSTR which was not displayed in the lock seat API response.\r\nv)Enter the delivery method id in delivery details request body\r\n8. Click Green Arrow Button and Verify the Checkout API is validating the card type passed in the request",
        "expected": "1. Pre requistie should be successfull\r\n2. Login should be successful.\r\n3. User should be able to exclude/remove card type MSTR from the above event.\r\n4. Tool should be successfully launched\r\n5. Settings should be successfully completed\r\n6. MSTR should not be there under delivery card types section of lock seat API response\r\n7. The user should be successfully able to complete all the above mentioned steps\r\n8. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\n\r\nIn the checkout API response, pv.cart.1092=External authorization card type (code={0}) is not valid for Checkout API should be displayed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.0.00"
  },
  {
    "id": 30690226,
    "title": "Verify whether the Checkout response has field attendingPatronAccount",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17061",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 36,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45827",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available\r\n2) Note down the Agency, User and complete a transaction with a patron in PV\r\n3) Complete a redelivery api request and assign delivery api request\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool for Update Patron Information API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Create Check out API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   \r\n\r\niv) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\n\r\nii0The delivery block should have the field-",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available\r\n2) Note down the Agency, User and complete a transaction with a patron in PV\r\n3) Complete a redelivery api request and assign delivery api request\r\n2. Launch the Tool for Update Patron Information API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Create Check out API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   \r\n\r\niv) Click Green Arrow Button",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\n\r\nii0The delivery block should have the field-"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690227,
    "title": "Verfiy whether  inclusive service charge field is included in the Checkout Api response price information when service charges are  associated to the deliveries",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16354",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 37,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45866",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create Delivery Service charge and associate above event to it\r\n4) Note down the Agency, User, Event,Delivery service charge\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Verify the inclusive Service charge field  in Checkout Api response\r\nExpected Result:\r\nThe inclusive Service charge field should be displayed as \"false\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create Delivery Service charge and associate above event to it\r\n4) Note down the Agency, User, Event,Delivery service charge\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the inclusive Service charge field  in Checkout Api response",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. The inclusive Service charge field should be displayed as \"false\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690228,
    "title": "Ã¿Verify the response of Checkout API request when gift card and credit card combination is used with external authorization value set to True.",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 38,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45911",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request.\r\n3)External authorization value set to True.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\nSet the external authorization code to \"true\" and Inlcude gift card and credit card in payment details.\r\n  Total amount is $26.25.Provide Gift card: $25.00 and credit card: $1.25\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request.\r\n3)External authorization value set to True.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\nSet the external authorization code to \"true\" and Inlcude gift card and credit card in payment details.\r\n  Total amount is $26.25.Provide Gift card: $25.00 and credit card: $1.25\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690229,
    "title": "Verify the response of a Checkout API request with cart id  including some service charge amount",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 39,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45912",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID of group sale type should be available for using in the request\n\nWhile Lock seats request for getting cart id ensure some service charge amounts are also included in the total amount.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body( make sure the patron account id should not be provided in the Checkout API request's body)\niii)Enter the required attributes in patron details request body-\niv)Enter the required attributes in payment details request body\nv)Enter the required attributes in delivery details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\nResponse should consist of:\nProVenue Order ID\nProVenue Transaction ID\nPatron Account ID\nPayment Information:\nPayment ID\nPayment Method ID\nCharged Amount\nCard Number\nISO Currency Code\nTicket Delivery Data:\nDelivery ID\nDelivery Method ID\nAddress 1\nAddress 2\nCity\nCounty Code\nPostal Code\nSub  Country Code\nSub Country Name\nDelivery Instructions 1\nDelivery Instructions 2\nE-mail\nDelivery Card Number\nFirst Name\nFormal Salutation\nFormatted Name\nInformal Salutation\nLast Name\nMiddle Name\nPhone Country Code\nExtension\nPhone Display\nPhone Number\nTicket Text\nDelivery First Name\nDelivery Last Name\nDelivery Name\nDelivery Card Type (ID, Code, Description, Public Description)\nDelivery Card True Type\nName Prefix (Code and Description)\nName Suffix (Code and Description)\nTicket ID(s)\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction of group sale should be correctly displayed in the ticket services portal in PV application",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID of group sale type should be available for using in the request\n\nWhile Lock seats request for getting cart id ensure some service charge amounts are also included in the total amount.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body( make sure the patron account id should not be provided in the Checkout API request's body)\niii)Enter the required attributes in patron details request body-\niv)Enter the required attributes in payment details request body\nv)Enter the required attributes in delivery details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\nResponse should consist of:\nProVenue Order ID\nProVenue Transaction ID\nPatron Account ID\nPayment Information:\nPayment ID\nPayment Method ID\nCharged Amount\nCard Number\nISO Currency Code\nTicket Delivery Data:\nDelivery ID\nDelivery Method ID\nAddress 1\nAddress 2\nCity\nCounty Code\nPostal Code\nSub  Country Code\nSub Country Name\nDelivery Instructions 1\nDelivery Instructions 2\nE-mail\nDelivery Card Number\nFirst Name\nFormal Salutation\nFormatted Name\nInformal Salutation\nLast Name\nMiddle Name\nPhone Country Code\nExtension\nPhone Display\nPhone Number\nTicket Text\nDelivery First Name\nDelivery Last Name\nDelivery Name\nDelivery Card Type (ID, Code, Description, Public Description)\nDelivery Card True Type\nName Prefix (Code and Description)\nName Suffix (Code and Description)\nTicket ID(s)\r\n6. The details in the order/transaction of group sale should be correctly displayed in the ticket services portal in PV application"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690230,
    "title": "Verify the response of a Checkout API request with comp buyer type",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 40,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45913",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID of group sale type should be available for using in the request\n\nNote: the cart id should be generated by Lock seats request with  Comp Buyer type\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body( make sure the patron account id should not be provided in the Checkout API request's body)\niii)Enter the required attributes in patron details request body-\n iv)Enter No Payment details\nv)Enter the required attributes in delivery details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\nResponse should consist of:\nProVenue Order ID\nProVenue Transaction ID\nPatron Account ID\nTicket Delivery Data:\nDelivery ID\nDelivery Method ID\nAddress 1\nAddress 2\nCity\nCounty Code\nPostal Code\nSub  Country Code\nSub Country Name\nDelivery Instructions 1\nDelivery Instructions 2\nE-mail\nDelivery Card Number\nFirst Name\nFormal Salutation\nFormatted Name\nInformal Salutation\nLast Name\nMiddle Name\nPhone Country Code\nExtension\nPhone Display\nPhone Number\nTicket Text\nDelivery First Name\nDelivery Last Name\nDelivery Name\nDelivery Card Type (ID, Code, Description, Public Description)\nDelivery Card True Type\nName Prefix (Code and Description)\nName Suffix (Code and Description)\nTicket ID(s)\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction of group sale should be correctly displayed in the ticket services portal in PV application",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID of group sale type should be available for using in the request\n\nNote: the cart id should be generated by Lock seats request with  Comp Buyer type\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the Required attributes in Main Request body( make sure the patron account id should not be provided in the Checkout API request's body)\niii)Enter the required attributes in patron details request body-\n iv)Enter No Payment details\nv)Enter the required attributes in delivery details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\nResponse should consist of:\nProVenue Order ID\nProVenue Transaction ID\nPatron Account ID\nTicket Delivery Data:\nDelivery ID\nDelivery Method ID\nAddress 1\nAddress 2\nCity\nCounty Code\nPostal Code\nSub  Country Code\nSub Country Name\nDelivery Instructions 1\nDelivery Instructions 2\nE-mail\nDelivery Card Number\nFirst Name\nFormal Salutation\nFormatted Name\nInformal Salutation\nLast Name\nMiddle Name\nPhone Country Code\nExtension\nPhone Display\nPhone Number\nTicket Text\nDelivery First Name\nDelivery Last Name\nDelivery Name\nDelivery Card Type (ID, Code, Description, Public Description)\nDelivery Card True Type\nName Prefix (Code and Description)\nName Suffix (Code and Description)\nTicket ID(s)\r\n6. The details in the order/transaction of group sale should be correctly displayed in the ticket services portal in PV application"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690231,
    "title": "Verify the ticket delivery data in the response of a Checkout API request_Driving license number",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15626",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 41,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45924",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Driving Liscence Number \"\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction should be correctly displayed in the ticket services portal in PV application",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Driving Liscence Number \"\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. The details in the order/transaction should be correctly displayed in the ticket services portal in PV application"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690232,
    "title": "Checkout External API_Verify the checkout validation when Skip On Sale Date Check flag is True_Events",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16119",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 42,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45933",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available \r\n2) A valid cart ID should be available for using in the request\r\n     Note: the cart id should be generated by Lock seats API request \r\n3) Note down the Agency, User, Cart ID (Cart with Events))\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool for Checkout API (REST client)\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. - Enter the Checkout API Request base URL\r\n- Enter the Required attributes in Main Request body\r\n- Set the Skip On Sale Date Check flag toTrue\r\n- Enter the required attributes in patron details request body(Only if Patron account id not provided     in main request body) \r\n- Enter the required attributes in payment details request body\r\n- Enter the required attributes in delivery details request body\r\n- Enter the required attributes in external authorization details request body\r\n\r\n- Click Green Arrow Button\r\n\r\n- Verify the Checkout validation\r\nExpected Result:\r\nCart should not be checkedout (As Skip On Sale Date Check flag is True)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available \r\n2) A valid cart ID should be available for using in the request\r\n     Note: the cart id should be generated by Lock seats API request \r\n3) Note down the Agency, User, Cart ID (Cart with Events))\r\n2. Launch the Tool for Checkout API (REST client)\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. - Enter the Checkout API Request base URL\r\n- Enter the Required attributes in Main Request body\r\n- Set the Skip On Sale Date Check flag toTrue\r\n- Enter the required attributes in patron details request body(Only if Patron account id not provided     in main request body) \r\n- Enter the required attributes in payment details request body\r\n- Enter the required attributes in delivery details request body\r\n- Enter the required attributes in external authorization details request body\r\n\r\n- Click Green Arrow Button\r\n\r\n- Verify the Checkout validation",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Cart should not be checkedout (As Skip On Sale Date Check flag is True)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690233,
    "title": "Verify the response of Checkout API request  when the cart payment is done partially.",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 43,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45943",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request. \r\n   Note: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body.\r\nInlcude Payment Method Id and Payment Amount attribute.\r\nEnter the partial amount of cart.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nError code with message \"Full payment is \r\nrequired to complete the transaction.\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request. \r\n   Note: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body.\r\nInlcude Payment Method Id and Payment Amount attribute.\r\nEnter the partial amount of cart.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. Error code with message \"Full payment is \r\nrequired to complete the transaction.\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690234,
    "title": "Verify the checkout api request when user entering a InValid Email and valid last name",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 44,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45945",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv) Enter a InValid Email ID\r\nvi) Enter valid last name corresponds to the e-mail.\r\nvii)Enter the required attributes in Delivery Information request body\r\nVii)Enter the required attributes in external authorization details request body(if required)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. 1. Click on Check out button\r\n2.Verify whether user can successfully complete the check out API process\r\nExpected Result:\r\n2. Use should not complete the API Check out and an exception message will be thrown to the user for an invalid email id'",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv) Enter a InValid Email ID\r\nvi) Enter valid last name corresponds to the e-mail.\r\nvii)Enter the required attributes in Delivery Information request body\r\nVii)Enter the required attributes in external authorization details request body(if required)\r\n5. 1. Click on Check out button\r\n2.Verify whether user can successfully complete the check out API process",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. 2. Use should not complete the API Check out and an exception message will be thrown to the user for an invalid email id'"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690235,
    "title": "Verify whether if any balance remains on the cart after all payments have been utilized, the checkout will fail and all authorizations will be reversed",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 45,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45952",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available .\r\n   Note: the cart id should be generated by Lock seats API request \r\n3) valid payment methods should be available as cash , check number and credit card\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\neg: total amount due is 26.25.Include payment method ids as cash and enter the amount 12.00, then check number and enter value 10.00 and include credit card Number and value 3.00  .But still remaining is 1.25.So the payment transaction is not getting completed.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. 1. Click on Green Arrow\r\n2.Verify whether if any balance remains on the cart after all payments have been utilized, the checkout will fail and all authorizations will be reversed\r\nExpected Result:\r\n1Tthe checkout should be fail and all authorizations will be reversed. An error will be returned to the calling system",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available .\r\n   Note: the cart id should be generated by Lock seats API request \r\n3) valid payment methods should be available as cash , check number and credit card\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\neg: total amount due is 26.25.Include payment method ids as cash and enter the amount 12.00, then check number and enter value 10.00 and include credit card Number and value 3.00  .But still remaining is 1.25.So the payment transaction is not getting completed.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\n5. 1. Click on Green Arrow\r\n2.Verify whether if any balance remains on the cart after all payments have been utilized, the checkout will fail and all authorizations will be reversed",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. 1Tthe checkout should be fail and all authorizations will be reversed. An error will be returned to the calling system"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690236,
    "title": "Verify the response of a Checkout API request with 1 gift card",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 46,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45966",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request.\r\nNote: the cart id should be generated by Lock seats API request \r\n3)Payment method id of 1 gift card is required.\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nInclude payment id of 1 gift card.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request with 1 gift card.\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request.\r\nNote: the cart id should be generated by Lock seats API request \r\n3)Payment method id of 1 gift card is required.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nInclude payment id of 1 gift card.\r\nv)Enter the required attributes in Delivery Information request body\r\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request with 1 gift card.",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690237,
    "title": "Verify checkout api request with attribute postal code-(delivery true types of Postal and Postal Trackable)",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 47,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45972",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv)Enter the required attributes in Delivery Information request body\r\nEnter Delivery method id of Postal and Postal Trackable and do not include the attribute postal code.\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nProper error message should be displayed.\r\n6. Enter the required attributes in Delivery Information request body\r\nEnter Delivery method id of Postal and Postal Trackable and include the attribute postal code and repeat the above steps.\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\nv)Enter the required attributes in Delivery Information request body\r\nEnter Delivery method id of Postal and Postal Trackable and do not include the attribute postal code.\r\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Enter the required attributes in Delivery Information request body\r\nEnter Delivery method id of Postal and Postal Trackable and include the attribute postal code and repeat the above steps.",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. Proper error message should be displayed.\r\n6. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690238,
    "title": "Verify checkout api request without providing Account name",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 48,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45986",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request (Perform Lock seta API )\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body without entering account name\r\niv)Enter the required attributes in payment details request body\r\nv)Enter delivery details request body.\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nThe user should able to get the response and the system will generate the name from the first and the last name given",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request (Perform Lock seta API )\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body without entering account name\r\niv)Enter the required attributes in payment details request body\r\nv)Enter delivery details request body.\r\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. The user should able to get the response and the system will generate the name from the first and the last name given"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690239,
    "title": "Verify checkout api request with patron account type code not provided",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 49,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C45990",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request\r\n3)AFP  real time duplicate patron check is set to false\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request bodyiv)Enter the required attributes in payment details request body do not  enter the patron account type code v)Leave the delivery details request body without entering any data.\r\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nThe user should able to get the response with a default code",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request\r\n3)AFP  real time duplicate patron check is set to false\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the required attributes in Main Request body\r\niii)Enter the required attributes in patron details request bodyiv)Enter the required attributes in payment details request body do not  enter the patron account type code v)Leave the delivery details request body without entering any data.\r\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. The user should able to get the response with a default code"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690240,
    "title": "Verify the checkout api request without delivery information",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 50,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46002",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the required attributes in Main Request body\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \niv)Enter the required attributes in payment details request body\nv)Leave the delivery details request body without entering any data.\nvi)Enter the required attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nProper error message should be displayed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n ii)Enter the response body parameters and set the response content type\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n iv)Select SSl tab and set the hostname verifier to Allow All\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\nii)Enter the required attributes in Main Request body\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \niv)Enter the required attributes in payment details request body\nv)Leave the delivery details request body without entering any data.\nvi)Enter the required attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. Proper error message should be displayed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690241,
    "title": "Verify the checkout api request with only optional attributes",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 51,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46008",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the optional attributes in Main Request body\r\niii)Enter the optional attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the optional attributes in payment details request body\r\nv)Enter the optional attributes in delivery details request body\r\nvi)Enter the optional attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nProper error message should be displayed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the optional attributes in Main Request body\r\niii)Enter the optional attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the optional attributes in payment details request body\r\nv)Enter the optional attributes in delivery details request body\r\nvi)Enter the optional attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. Proper error message should be displayed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690242,
    "title": "Verify the checkout api request with only conditional attributes",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 52,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46009",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the conditional attributes in Main Request body\r\niii)Enter the conditional attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the conditional attributes in payment details request body\r\nv)Enter the conditional attributes in delivery details request body\r\nvi)Enter the conditional attributes in external authorization details request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nProper error message should be displayed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the conditional attributes in Main Request body\r\niii)Enter the conditional attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the conditional attributes in payment details request body\r\nv)Enter the conditional attributes in delivery details request body\r\nvi)Enter the conditional attributes in external authorization details request body\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. Proper error message should be displayed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690243,
    "title": "Verify the Checkout API request with Match Name or Email When External Patron ID Provided AFP set to False",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 53,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46021",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request \r\n3)Match Name/Email When External Patron ID Provided AFP set to False\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Provide no patron related details\r\niv)Enter the required attributes in payment details request body\r\niv)Enter the required attributes in delivery details request body\r\nv)Click on Green Arrow\r\nExpected Result:\r\nValid error message should be displayed\r\n5. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Provide patron details but no patron id\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\nExpected Result:\r\nThe user should able to submit the details\r\n6. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n7. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction should be correctly displayed in the ticket services portal in PV application",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\nNote: the cart id should be generated by Lock seats API request \r\n3)Match Name/Email When External Patron ID Provided AFP set to False\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Provide no patron related details\r\niv)Enter the required attributes in payment details request body\r\niv)Enter the required attributes in delivery details request body\r\nv)Click on Green Arrow\r\n5. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Provide patron details but no patron id\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n6. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n7. Verify the order/transaction by transaction id generated in the response",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Valid error message should be displayed\r\n5. The user should able to submit the details\r\n6. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n7. The details in the order/transaction should be correctly displayed in the ticket services portal in PV application"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690244,
    "title": "Verify the request with no marketing source code Require Marketing Source AFP set to Auto",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 54,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46026",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request  \r\nNote: the cart id should be generated by Lock seats API request \r\n3)Require Marketing Source AFP set to Auto\r\n4)Do not set Default Marketing Source AFP\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body\r\niv)do not enter any marketing source code(default Market sorce code in not set)\r\n\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Delivery Card Number \"\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nA valid error message should be displayed saying that :- \"A default marketing source must be set up in your\r\n        permissions to allow auto assignment to complete this\r\n        transaction\"\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction should be correctly displayed in the ticket services portal in PV application\r\n7. Repeat the above steps after setting default market source in AFP.\r\nExpected Result:\r\nCheckout API response should be displayed properly,\r\n8. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body\r\niv)enter any marketing source code(default Market sorce code in not set)\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body\r\n\r\nClick Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request  \r\nNote: the cart id should be generated by Lock seats API request \r\n3)Require Marketing Source AFP set to Auto\r\n4)Do not set Default Marketing Source AFP\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body\r\niv)do not enter any marketing source code(default Market sorce code in not set)\r\n\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Delivery Card Number \"\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response\r\n7. Repeat the above steps after setting default market source in AFP.\r\n8. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body\r\niv)enter any marketing source code(default Market sorce code in not set)\r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body\r\n\r\nClick Green Arrow Button and Verify the Response of Checkout API Request",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. A valid error message should be displayed saying that :- \"A default marketing source must be set up in your\r\n        permissions to allow auto assignment to complete this\r\n        transaction\"\r\n6. The details in the order/transaction should be correctly displayed in the ticket services portal in PV application\r\n7. Checkout API response should be displayed properly,\r\n8. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690245,
    "title": "Verify whether tickets can be printed from ticket services with deliveryid obtained from a Checkout API response",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 55,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46036",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Delivery Card Number \"\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction should be correctly displayed in the ticket services portal in PV application\r\n7. 1.Navigate to Ticket services\r\n2.search for the Order\r\n3.Navigate to Delivery details page\r\n4.Select the tickets for printing (Print Selected Tickets)\r\n5.Click on Apply Action\r\n6.Print the Tickets\r\nExpected Result:\r\nThe Selected tickets should be printed successfully",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n   Note: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Delivery Card Number \"\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response\r\n7. 1.Navigate to Ticket services\r\n2.search for the Order\r\n3.Navigate to Delivery details page\r\n4.Select the tickets for printing (Print Selected Tickets)\r\n5.Click on Apply Action\r\n6.Print the Tickets",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)\r\n6. The details in the order/transaction should be correctly displayed in the ticket services portal in PV application\r\n7. The Selected tickets should be printed successfully"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690246,
    "title": "Verify the response of a Checkout API request with conditional attribute -Address 1 in delivery information",
    "section_id": 1684781,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15625",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 56,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C46144",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n\r\nNote: the cart id should be generated by Lock seats API request\r\nExpected Result:\r\nPre requistie should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Address 1\"\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)\r\n6. Verify the order/transaction by transaction id generated in the response\r\nExpected Result:\r\nThe details in the order/transaction should be correctly displayed in the ticket services portal in PV application",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A valid cart ID should be available for using in the request\r\n\r\nNote: the cart id should be generated by Lock seats API request\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the Checkout API Request base URL\r\nii)Enter the Required attributes in Main Request body\r\niii)Enter the required attributes in patron details request body(Only if Patron account id not provided in main request body)       \r\niv)Enter the required attributes in payment details request body\r\n v)Enter the required attributes in delivery details request body-\r\n      Include the attribute\"Address 1\"\r\n5. Click Green Arrow Button and Verify the Response of Checkout API Request\r\n6. Verify the order/transaction by transaction id generated in the response",
        "expected": "1. Pre requistie should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nResponse should consist of:\r\nProVenue Order ID\r\nProVenue Transaction ID\r\nPatron Account ID\r\nPayment Information:\r\nPayment ID\r\nPayment Method ID\r\nCharged Amount\r\nCard Number\r\nISO Currency Code\r\nTicket Delivery Data:\r\nDelivery ID\r\nDelivery Method ID\r\nAddress 1\r\nAddress 2\r\nCity\r\nCounty Code\r\nPostal Code\r\nSub  Country Code\r\nSub Country Name\r\nDelivery Instructions 1\r\nDelivery Instructions 2\r\nE-mail\r\nDelivery Card Number\r\nFirst Name\r\nFormal Salutation\r\nFormatted Name\r\nInformal Salutation\r\nLast Name\r\nMiddle Name\r\nPhone Country Code\r\nExtension\r\nPhone Display\r\nPhone Number\r\nTicket Text\r\nDelivery First Name\r\nDelivery Last Name\r\nDelivery Name\r\nDelivery Card Type (ID, Code, Description, Public Description)\r\nDelivery Card True Type\r\nName Prefix (Code and Description)\r\nName Suffix (Code and Description)\r\nTicket ID(s)\r\n6. The details in the order/transaction should be correctly displayed in the ticket services portal in PV application"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690247,
    "title": "Verify the Find Delivery API responses when  the limit query parameter value is passed in as 1800 and database application property is defined as 500 and the max allowed value is 1000",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18630",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41370",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1)Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\n2) Set the application property\n\"find.deliveries.api.max.limit\"\n3)Define the  database app property as 500 and the max allowed value is 1000\r\nExpected Result:\r\nPre-Requisite should be Succesfuly completed\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 1.i)Enter the FIND deliveries request with \"limit\" query parameter  value as 1800\nii)Enter the parametrs to  request to update/Create \niii)Click on Go (Green Arrow) button:\r\nExpected Result:\r\nSuccessfull should  be returned\n\nResponses should be used 1000 as value of limit or application property or cannot exceed max allowed value.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1)Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\n2) Set the application property\n\"find.deliveries.api.max.limit\"\n3)Define the  database app property as 500 and the max allowed value is 1000\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. 1.i)Enter the FIND deliveries request with \"limit\" query parameter  value as 1800\nii)Enter the parametrs to  request to update/Create \niii)Click on Go (Green Arrow) button:",
        "expected": "1. Pre-Requisite should be Succesfuly completed\r\n2. Tool should be launched successfully\r\n3. Settings should be successfully completed\r\n4. Successfull should  be returned\n\nResponses should be used 1000 as value of limit or application property or cannot exceed max allowed value."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690248,
    "title": "Verify the Find Delivery API responses when the limit query parameter value is NOT passed and database application property is defined as 1500 and the max allowed value is 1000",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18630",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41372",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions) \r\n2) Set the application property \"find.deliveries.api.max.limit\" value as 1500 and the max allowed value is 1000\r\nExpected Result:\r\nPre-Requisite should be Succesfuly completed\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 1.i)Enter the FIND deliveries request without \"limit\" query parameter \r\nii)Click on Go (Green Arrow) button:\r\nExpected Result:\r\nSuccessfull should not be returned\n\nResponses should be used 1000 as value of limit or application property cannot exceed max allowed value.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions) \r\n2) Set the application property \"find.deliveries.api.max.limit\" value as 1500 and the max allowed value is 1000\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. 1.i)Enter the FIND deliveries request without \"limit\" query parameter \r\nii)Click on Go (Green Arrow) button:",
        "expected": "1. Pre-Requisite should be Succesfuly completed\r\n2. Tool should be launched successfully\r\n3. Settings should be successfully completed\r\n4. Successfull should not be returned\n\nResponses should be used 1000 as value of limit or application property cannot exceed max allowed value."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690249,
    "title": "Verify the Find Delivery API responses when the limit query parameter value or database app property value is larger than the application defined max allowed value",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18630",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41378",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property \"find.deliveries.api.max.limit\"\r\nExpected Result:\r\nPre-Requisite should be Succesfuly completed\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 1.i)Enter the FIND deliveries request with limit parameter  in such a way that the \"limit\" query parameter value or database app property value is larger than the application defined max allowed value\r\nii)Click on Go (Green Arrow) button:\r\nExpected Result:\r\nSuccessfull should be returned\nResponses should use the application defined max allowed value",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property \"find.deliveries.api.max.limit\"\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. 1.i)Enter the FIND deliveries request with limit parameter  in such a way that the \"limit\" query parameter value or database app property value is larger than the application defined max allowed value\r\nii)Click on Go (Green Arrow) button:",
        "expected": "1. Pre-Requisite should be Succesfuly completed\r\n2. Tool should be launched successfully\r\n3. Settings should be successfully completed\r\n4. Successfull should be returned\nResponses should use the application defined max allowed value"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690250,
    "title": "Verify the Find Delivery API responses  If the value of limit query parameter is sent as zero or negative value in the request",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18630",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41379",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property \"find.deliveries.api.max.limit\"\r\nExpected Result:\r\nPre-Requisite should be Succesfuly completed\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 1.i)Enter the FIND deliveries request with limit with zero or negative value \r\nii)Click on Go (Green Arrow) button:\r\nExpected Result:\r\nError message should be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property \"find.deliveries.api.max.limit\"\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. 1.i)Enter the FIND deliveries request with limit with zero or negative value \r\nii)Click on Go (Green Arrow) button:",
        "expected": "1. Pre-Requisite should be Succesfuly completed\r\n2. Tool should be launched successfully\r\n3. Settings should be successfully completed\r\n4. Error message should be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690251,
    "title": "Verify the moreresults field in the Find Delivery API responses when the request supports limit parameter",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18630",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41383",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property find.deliveries.api.max.limit to 100\r\nExpected Result:\r\nPre-Requisite should be Succesfuly completed\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the FIND deliveries request URL giving  any limit\r\neg:-https://irutapppvn47.back.tickets.com:18443/api/v2/deliveries?attendingPatronAccountId=57513&limit=100 \r\nii)Click on Go (Green Arrow) button:\r\nExpected Result:\r\nFor all APIs that support 'limit', a 'moreResults' field should always be provided in the response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Many transactions should be completed with an attending patron or with different delivery methods (eg:- 100 transactions)\r\n4) Set the application property find.deliveries.api.max.limit to 100\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the FIND deliveries request URL giving  any limit\r\neg:-https://irutapppvn47.back.tickets.com:18443/api/v2/deliveries?attendingPatronAccountId=57513&limit=100 \r\nii)Click on Go (Green Arrow) button:",
        "expected": "1. Pre-Requisite should be Succesfuly completed\r\n2. Tool should be launched successfully\r\n3. Settings should be successfully completed\r\n4. For all APIs that support 'limit', a 'moreResults' field should always be provided in the response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690252,
    "title": "Verify the Assign Deliveries API Response on providing empty string values in card number and card type code",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18420",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41390",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Assign request based url \r\nii)Enter empty string values in  'Delivery Card Type Code' and 'Delivery Card Number' fields\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Repeat steps 1-5 for Checkout API and Update Delivery API entering empty string values in  'Delivery Card Type Code' and 'Delivery Card Number' fields\r\nExpected Result:\r\nValid error message should be displayed in all APIs",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Assign request based url \r\nii)Enter empty string values in  'Delivery Card Type Code' and 'Delivery Card Number' fields\r\n5. Click Green Arrow Button and Verify the Response\r\n6. Repeat steps 1-5 for Checkout API and Update Delivery API entering empty string values in  'Delivery Card Type Code' and 'Delivery Card Number' fields",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Valid error message should be displayed in all APIs"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690253,
    "title": "Update delivery API-Verify the Update delivery request with deprecated fields and new fields",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16857",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41417",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery response based url\r\n ii)Enter the' url.(.../deliveries/v1/)\r\niii)Enter the deprecated fields(, ) and new fields(, )\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\ni)An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nii)The new fields should be displayed in the response and deprecated fields should not be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery response based url\r\n ii)Enter the' url.(.../deliveries/v1/)\r\niii)Enter the deprecated fields(, ) and new fields(, )\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. i)An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nii)The new fields should be displayed in the response and deprecated fields should not be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.0.00"
  },
  {
    "id": 30690254,
    "title": "search delivery API -verify that the application shows error message while passing a combination of delivery status UNFULFILLED and FULFILLED",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17217",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41426",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.(Unfulfilled and fulfilled transactions should be there)\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url\r\n ii)Enter Attending Patron ID and combination of delivery status UNFULFILLED and FULFILLED .(.../v2/deliveries?attendingPatronAccountId=115787&status=FULFILLED&status=UNFULFILLED)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nApplication should return a valid error message.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.(Unfulfilled and fulfilled transactions should be there)\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url\r\n ii)Enter Attending Patron ID and combination of delivery status UNFULFILLED and FULFILLED .(.../v2/deliveries?attendingPatronAccountId=115787&status=FULFILLED&status=UNFULFILLED)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. Application should return a valid error message."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690255,
    "title": "Verify Update delivery API - if deliveryFirstName, deliveryLastName fields are not  sent in request, API should set these fields to null_WIllcall delivery",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17157",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41428",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Using the PV portal, make a sale using the delivery method whose delivery type is willcall ,creating the delivery enter delivery instructions, ticket text. \r\n4) Note down the Agency, User, Event.\r\n5) Sumbit a get delivery API request for the above created delviery and note the details\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSL tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\n    ii)Enter Delivery ID with url.(.../deliveries/v1/)\r\n    iii)Now update the delivery using update delivery API. \r\nIn the update delivery API request omit (do not send) the following fields: \r\n\r\n\r\n\r\n\r\n\r\n\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe update delivery API response should not have any of the below fields:",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Using the PV portal, make a sale using the delivery method whose delivery type is willcall ,creating the delivery enter delivery instructions, ticket text. \r\n4) Note down the Agency, User, Event.\r\n5) Sumbit a get delivery API request for the above created delviery and note the details\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSL tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\n    ii)Enter Delivery ID with url.(.../deliveries/v1/)\r\n    iii)Now update the delivery using update delivery API. \r\nIn the update delivery API request omit (do not send) the following fields: \r\n\r\n\r\n\r\n\r\n\r\n\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe update delivery API response should not have any of the below fields:"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690256,
    "title": "Verify Update delivery API - if deliveryFirstName, deliveryLastName fields are not  sent in request, API should set these fields to null",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17157",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41429",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3)Using the PV portal, make a sale using the delivery method whose delivery type  TRACKABLE (such as UPS, FedEx etc). \nWhile creating the delivery enter delivery instructions, ticket text. \n4) Note down the Agency, User, Event.\n5) Sumbit a get delivery API request for the above created delviery and note the details\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSL tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\n    ii)Enter Delivery ID with url.(.../deliveries/v1/)\n    iii)Now update the delivery using update delivery API. \nIn the update delivery API request omit (do not send) the following fields: \n\n\n\n\n\n\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\n\nThe update delivery API response should not have any of the below fields:",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3)Using the PV portal, make a sale using the delivery method whose delivery type  TRACKABLE (such as UPS, FedEx etc). \nWhile creating the delivery enter delivery instructions, ticket text. \n4) Note down the Agency, User, Event.\n5) Sumbit a get delivery API request for the above created delviery and note the details\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSL tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\n    ii)Enter Delivery ID with url.(.../deliveries/v1/)\n    iii)Now update the delivery using update delivery API. \nIn the update delivery API request omit (do not send) the following fields: \n\n\n\n\n\n\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\n\nThe update delivery API response should not have any of the below fields:"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690257,
    "title": "Verify that Assign Deliveries API cant assign delivery methods which are excluded from the event",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17118",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41434",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3. Go to Delivery methods tab in Event Administration portal\r\n4.Exculde some delivery methods by clicking on Arrow icon.\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i) Select the HTTP method as POST by clicking on the POST radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter Lock Seat API url https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \r\nii)Enter Lock seats API XML/JSON request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n5. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\nExpected Result:\r\nSettings should be successfully completed\r\n6. i)Enter Assign Delivery API URL(Update the URL with  the cart id noted in Step 4) \r\nii) Update ticket ids and cart id in the Request\r\niii)Assign an excluded delivery (with a deliveryId) in the request \r\niv)Click Green Arrow Button\r\nExpected Result:\r\nUser should not be able to assign a delivery method which is excluded.Proper validation message should be displayed in response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3. Go to Delivery methods tab in Event Administration portal\r\n4.Exculde some delivery methods by clicking on Arrow icon.\r\n2. Launch the Tool - REST client\r\n3. i) Select the HTTP method as POST by clicking on the POST radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter Lock Seat API url https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \r\nii)Enter Lock seats API XML/JSON request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\n5. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\n6. i)Enter Assign Delivery API URL(Update the URL with  the cart id noted in Step 4) \r\nii) Update ticket ids and cart id in the Request\r\niii)Assign an excluded delivery (with a deliveryId) in the request \r\niv)Click Green Arrow Button",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. An HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n5. Settings should be successfully completed\r\n6. User should not be able to assign a delivery method which is excluded.Proper validation message should be displayed in response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690258,
    "title": "Verify the Update Delivery request using put method",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17100",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41437",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the UPdate delivery request based url.(.../deliveries/v1\r\nii)Select some random values (at least one optional parameter )\r\niii)Change necessary details\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Verify that Update Delivery request using put method\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nResponse Fields:\r\nThe corresponding datas should come in the response.(Based on the datas)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the UPdate delivery request based url.(.../deliveries/v1\r\nii)Select some random values (at least one optional parameter )\r\niii)Change necessary details\r\n5. Verify that Update Delivery request using put method",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nResponse Fields:\r\nThe corresponding datas should come in the response.(Based on the datas)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690259,
    "title": "Verify the Update Delivery request using post method",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17100",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41438",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the UPDATE delivery request based url.(.../deliveries/v1\nii)Select some random values (at least one optional parameter )\niii)Change necessary details\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Verify that Update Delivery request using post method\r\nExpected Result:\r\nThe method should not allowed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the UPDATE delivery request based url.(.../deliveries/v1\nii)Select some random values (at least one optional parameter )\niii)Change necessary details\r\n5. Verify that Update Delivery request using post method",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. The method should not allowed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690260,
    "title": "Verify Assign Delivery API request using put method",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17100",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41439",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available \n2) An Event should be available\n3)Note down the Agency, User, Event.\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \nii)Enter the Required parameter(fields)\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps.\r\n5. Verify Assign Delivery API request using put method\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\r\n6. i) Enter the Lock Seats API Request base URL  https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \nii) Enter the Required parameters for the Request \n   -Patron Id \n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\n\nNote the Cart ID and the Ticket Ids",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available \n2) An Event should be available\n3)Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the assign delivery request based url \nii)Enter the Required parameter(fields)\niii)Assign a new delivery for the cart.\r\n5. Verify Assign Delivery API request using put method\r\n6. i) Enter the Lock Seats API Request base URL  https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \nii) Enter the Required parameters for the Request \n   -Patron Id \n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Click Green Arrow Button",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\n\nNote the Cart ID and the Ticket Ids"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690261,
    "title": "Verify Assign Delivery API request using post method",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17100",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41440",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \nii)ii)Enter required parameters.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps.\r\n5. 1)Verify Assign Delivery API request using post method\r\nExpected Result:\r\nThe method should not be allowed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the assign delivery request based url \nii)ii)Enter required parameters.\r\n5. 1)Verify Assign Delivery API request using post method",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps.\r\n5. The method should not be allowed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690262,
    "title": "Verify the Assign Delivery API response on assigning multiple delivery types(one delivery with driving license and another  delivery with loyalty card)",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16976",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41448",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. 6. Enter Checkout URL() and Request body and click on Green Arrow Button and Verify the Response\r\nExpected Result:\r\nThe response should be generated successfully\r\n4. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n5. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n6. Verify Response\r\nExpected Result:\r\nSuccessful response should be displayed\r\n7. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\nExpected Result:\r\nSettings should be successfully completed\r\n8. i)Enter the Assign delivery response based url \r\n    ii)Pass the ticket ids\r\n    iii)Enter the Required parameter(fields)\r\n    iv)Assign a multiple delivery types for the cart.\r\n      a)one delivery with driving license\r\n      b)one delivery with loyalty card\r\n    v) Click Green Arrow Button\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n9. - Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n2. Launch the Tool - REST client\r\n3. 6. Enter Checkout URL() and Request body and click on Green Arrow Button and Verify the Response\r\n4. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n5. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\n6. Verify Response\r\n7. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\n8. i)Enter the Assign delivery response based url \r\n    ii)Pass the ticket ids\r\n    iii)Enter the Required parameter(fields)\r\n    iv)Assign a multiple delivery types for the cart.\r\n      a)one delivery with driving license\r\n      b)one delivery with loyalty card\r\n    v) Click Green Arrow Button\r\n9. - Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. The response should be generated successfully\r\n4. Settings should be successfully completed\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n6. Successful response should be displayed\r\n7. Settings should be successfully completed\r\n8. The user should be successfully able to complete all the above mentioned step.\r\n9. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690263,
    "title": "Verify if the lock seats API is used to lock seats -the tickets are no associated with patron yet-  the response will not have attendingPatronaccount field in assign response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17061",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 17,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41450",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i) Submit a Lock seats request- no patron involved\r\nii) Sumbit the assign deliveries request\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n\r\n**if the lock seats API is used to lock seats (the tickets are no associated with patron yet), if the assign deliveries API is used to assign the tickets to deliveries, the response will not have attendingPatronaccount field as the tickets have no order yet (and so no attendingPatronAccount).",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i) Submit a Lock seats request- no patron involved\r\nii) Sumbit the assign deliveries request",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n\r\n**if the lock seats API is used to lock seats (the tickets are no associated with patron yet), if the assign deliveries API is used to assign the tickets to deliveries, the response will not have attendingPatronaccount field as the tickets have no order yet (and so no attendingPatronAccount)."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690264,
    "title": "Verify whether the Update delivery response has field attendingPatronAccount",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17061",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 18,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41451",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)A transaction should be completed with a patron and note down  the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID with url.(.../deliveries/v1/)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come.\r\n\r\nThe delivery block should have the field-",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)A transaction should be completed with a patron and note down  the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID with url.(.../deliveries/v1/)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come.\r\n\r\nThe delivery block should have the field-"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690265,
    "title": "Verify the Update Delivery API Request using the parameter ?Delivery ID?_Loyality card",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16976",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 19,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41470",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID(Loyality card) with url.(.../deliveries/v1/)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID(Loyality card) with url.(.../deliveries/v1/)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690266,
    "title": "Verify the event deliveries block of assign delivery response shows the service charges.",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16972",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 20,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41475",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Assign delivery response based url \r\nii)Pass the ticket ids\r\nii)Enter the Required parameter(fields)\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps\r\n5. - Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nAssign Delivery Response should show service charges in deliveries block\r\n6. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML/JSON request Body \r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n7. Verify response\r\nExpected Result:\r\nSuccessful response should be displayed\r\n8. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\nExpected Result:\r\nSettings should be successfully completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Assign delivery response based url \r\nii)Pass the ticket ids\r\nii)Enter the Required parameter(fields)\r\niii)Assign a new delivery for the cart.\r\n5. - Click Green Arrow Button and Verify the Response\r\n6. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML/JSON request Body \r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\n7. Verify response\r\n8. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nAssign Delivery Response should show service charges in deliveries block\r\n6. An HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n7. Successful response should be displayed\r\n8. Settings should be successfully completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690267,
    "title": "Assign delivery API- Verify the validation error when an existing delivery (with a deliveryId) is provide in the request",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17060",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 21,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41479",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. i)Enter the Assign delivery response based url \nii)Pass the ticket ids\niii)Assign the existing delivery id in the request\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n2. - Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\na valid error message should be  displayed\r\n3. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n4. i) Enter the Lock Seats API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \nii) Enter the Required parameters for the Request \n   -Patron Id \n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\n\nNote the Cart ID and the Ticket Ids\r\n5. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n6. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, Event.\n4)Perform a ticket sales transaction and note the delivery id\r\nExpected Result:\r\nPre-requisite should be successfull",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. i)Enter the Assign delivery response based url \nii)Pass the ticket ids\niii)Assign the existing delivery id in the request\r\n2. - Click Green Arrow Button and Verify the Response\r\n3. Launch the Tool - REST client\r\n4. i) Enter the Lock Seats API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \nii) Enter the Required parameters for the Request \n   -Patron Id \n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Click Green Arrow Button\r\n5. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n6. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, Event.\n4)Perform a ticket sales transaction and note the delivery id",
        "expected": "1. The user should be successfully able to complete all the above mentioned step.\r\n2. a valid error message should be  displayed\r\n3. Tool should be successfully launched\r\n4. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\n\nNote the Cart ID and the Ticket Ids\r\n5. Settings should be successfully completed\r\n6. Pre-requisite should be successfull"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690268,
    "title": "Verify the Assign Delivery API response when tickets are assigned to an existing delivery owned by Patron1 which is different from the cart financial patron Patron 2",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 22,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41493",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) 2 Patrons should be available ie patron 1 and patron2.\r\n3)Transaction should be completed using patron1 and note down the delivery id.\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Lock Seat API request based URL \r\nExpected Result:\r\nThe user should be successfully able to enter the Lock Seat API Request\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\n6. Call Assign Delivery API and assign the tickets to an existing delivery associated with an order with financial patron 1.\r\nExpected Result:\r\nAssign delivery API request should be successfully called.\r\n7. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\n8. Call Checkout API request based URL\r\n() with an existing patron 2 or create a new patron.\r\nExpected Result:\r\nCheckout API request should be successfully called.\r\n9. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nA validation error message should be displayed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) 2 Patrons should be available ie patron 1 and patron2.\r\n3)Transaction should be completed using patron1 and note down the delivery id.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Lock Seat API request based URL \r\n5. Click Green Arrow Button and Verify the Response\r\n6. Call Assign Delivery API and assign the tickets to an existing delivery associated with an order with financial patron 1.\r\n7. Click Green Arrow Button and Verify the Response\r\n8. Call Checkout API request based URL\r\n() with an existing patron 2 or create a new patron.\r\n9. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to enter the Lock Seat API Request\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\n6. Assign delivery API request should be successfully called.\r\n7. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\n8. Checkout API request should be successfully called.\r\n9. A validation error message should be displayed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690269,
    "title": "Verify whether Package informations are displayed in assign deliveries API  Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16996",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 23,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41499",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) Complete a package sale transaction and note the delviery details\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter 'Delivery Method ID' \r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe response should have package informations as below:\r\n\r\n    ?\r\n\r\n?\r\n?\r\n\r\n        \r\n         \r\n                                   \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            xyz\r\n            xyz\r\n            xyz",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) Complete a package sale transaction and note the delviery details\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter 'Delivery Method ID' \r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe response should have package informations as below:\r\n\r\n    ?\r\n\r\n?\r\n?\r\n\r\n        \r\n         \r\n                                   \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            xyz\r\n            xyz\r\n            xyz"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690270,
    "title": "Verify whether Package informations are displayed in Redelivery API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16996",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 24,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41500",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) Complete a package sale transaction and note the delivery details\r\n3)Note down the Agency, User\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 redelivery request based url()\r\nii)Enter Delivery ID and ticket ids in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe response should have package informations as below:\r\n      \r\n        \r\n          CHANGE_DELIVERY\r\n          true\r\n                                  \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            APITEST1\r\n            API Test Event1\r\n            API Test Event1",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) Complete a package sale transaction and note the delivery details\r\n3)Note down the Agency, User\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the V2 redelivery request based url()\r\nii)Enter Delivery ID and ticket ids in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe response should have package informations as below:\r\n      \r\n        \r\n          CHANGE_DELIVERY\r\n          true\r\n                                  \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            xyz\r\n            xyz\r\n            xyz\r\n          \r\n          \r\n            APITEST1\r\n            API Test Event1\r\n            API Test Event1"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690271,
    "title": "Verify whether Assign delivery API fails when earlier redelivery API is used to redeliver tickets sold in package sale",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16961",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 25,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41502",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\nCreate a package APIPKG1 with package list APIPL1. The package list APIPL1 has a master event and two constituent events. The package list in available status.\r\nMake a sale of APIPKG1 with 4 package seats with patron p1, using willcall delivery with driving license N11.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 3 -i)Enter the  Assign delivery request based url \r\n    ii)Enter 'Delivery Method ID' \r\n    Use assign deliveries to assign \r\ni) 3 tickets of package seat 1, to willcall delivery with name B1, and driving license number N21. \r\nii) 3 tickets of package seat 2, to willcall delivery with name C1, and driving license number N31.\r\niii) 3 tickets of package seat 3, to willcall delivery with name D1, and driving license number N41.\r\nUse Checkout API to checkout.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\nCreate a package APIPKG1 with package list APIPL1. The package list APIPL1 has a master event and two constituent events. The package list in available status.\r\nMake a sale of APIPKG1 with 4 package seats with patron p1, using willcall delivery with driving license N11.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. 3 -i)Enter the  Assign delivery request based url \r\n    ii)Enter 'Delivery Method ID' \r\n    Use assign deliveries to assign \r\ni) 3 tickets of package seat 1, to willcall delivery with name B1, and driving license number N21. \r\nii) 3 tickets of package seat 2, to willcall delivery with name C1, and driving license number N31.\r\niii) 3 tickets of package seat 3, to willcall delivery with name D1, and driving license number N41.\r\nUse Checkout API to checkout.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690272,
    "title": "Verify whether Assign delivery API Response shows an error message when all tickets in the cart is not assigned to  delivery",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16942",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 26,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41503",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. 1)Launch the Tool - REST client\n2)Provide Lock Seat API URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \n3)Lock 4 seats and Click on submit button\n4)Note down the cart id and etag of lock seat API response\r\nExpected Result:\r\nResponse should be generated\r\n5. 1)Launch the Tool - REST client\n2)Provide Assign Delivery API URL \n3)Enter Required Parameters\n4)Include the first 2 ticket id's only and assign a delivery method in the assign delivery API request \n5)Click on Submit Button\r\nExpected Result:\r\nError should be displayed:\npv.deliveries.1059:\n\"Some of the deliverable tickets in the cart do not have a delivery assigned\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. 1)Launch the Tool - REST client\n2)Provide Lock Seat API URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \n3)Lock 4 seats and Click on submit button\n4)Note down the cart id and etag of lock seat API response\r\n5. 1)Launch the Tool - REST client\n2)Provide Assign Delivery API URL \n3)Enter Required Parameters\n4)Include the first 2 ticket id's only and assign a delivery method in the assign delivery API request \n5)Click on Submit Button",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Response should be generated\r\n5. Error should be displayed:\npv.deliveries.1059:\n\"Some of the deliverable tickets in the cart do not have a delivery assigned\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690273,
    "title": "Verify that redelivery api response should not contain the ticket, event service charge details",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16904",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 27,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41506",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create both event and ticket  service charges and associate to above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. )Enter the V2 redelivery request based url()\r\nii)Enter the delivery id and request ids in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nIn the response redelivery (also called change delivery) offer should not contain service charges",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create both event and ticket  service charges and associate to above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. )Enter the V2 redelivery request based url()\r\nii)Enter the delivery id and request ids in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nIn the response redelivery (also called change delivery) offer should not contain service charges"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690274,
    "title": "Verify that the Update Delivery API-delivery card number  getting updated in update delviery  api response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16852",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 28,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41508",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\n ii)Enter another card number in the request\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\n\nCard number should be updated in the update delivery response successfully",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\n ii)Enter another card number in the request\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\nResponse should be valid and correct informations should be provided without any errors\n\nCard number should be updated in the update delivery response successfully"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690275,
    "title": "Verify the Service charge tags fields in Assign delivery Api response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16442",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 29,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41520",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3) Associate al the service charges,  and Inclusive tax and note down all the details\r\n3))A transaction should be completed and note down the delivery id, all the service charge details and Inclusive tax details\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nAll the details should be noted down\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the redelivery request based url\r\nii)Enter  url.(.../cart/v1/redeliver)   \r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Verify the Service Charge ID, \r\nService Charge Code, \r\nService Charge Description, \r\nService Charge Public Description\r\nExpected Result:\r\nAll of the below given details should be verified:\r\nService Charge ID, \r\nService Charge Code, \r\nService Charge Description, \r\nService Charge Public Description\r\n7. Verify the Service Charge Type Code,\r\nService Charge Type Description\r\nExpected Result:\r\nService Charge Type Code, \r\nService Charge Type Description\r\nCode can have the following values: TIX/EVT/PKG/PKS/DEL/TRX\r\n8. Verify the Refundable Type Code, Refundable Type Description\r\nExpected Result:\r\nCode can have the following values: YES/NO/MAN\r\n9. Verify the Calculation Type Code, \r\nCalculation Type Description\r\nExpected Result:\r\nService Charge Calculation Type Code can have the following values: FIX/SEAT/FSA/PER/PSA/PKS/PKA\r\n10. Verify the Inclusive Tax\r\nExpected Result:\r\nInclusive Tax ID, Inclusive Tax Code, Inclusive Tax Description, \r\nInclusive Tax Public Description\r\nInclusive Tax Rate  \r\nInclusive Tax Amount \r\n\r\nIf the inclusive taxes are not present, these tags will not be present in response.\r\n11. Verify the Min Cap and Max Cap:\r\nExpected Result:\r\nThis attribute is sent only in sending service charge info for Available Delivery Methods.\r\n12. Verify the Inclusive Service Charge\r\nExpected Result:\r\nIndicates whether the service charge is included in the price information or not. This tag is added for Ticket Service charges only (as this tag is not relevant for other types of service charges).\r\n13. Verify the Service Charge Amount\r\nExpected Result:\r\nService Charge Amount           \r\nThis would be the sum of all service charges of this ID.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3) Associate al the service charges,  and Inclusive tax and note down all the details\r\n3))A transaction should be completed and note down the delivery id, all the service charge details and Inclusive tax details\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the redelivery request based url\r\nii)Enter  url.(.../cart/v1/redeliver)   \r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response\r\n6. Verify the Service Charge ID, \r\nService Charge Code, \r\nService Charge Description, \r\nService Charge Public Description\r\n7. Verify the Service Charge Type Code,\r\nService Charge Type Description\r\n8. Verify the Refundable Type Code, Refundable Type Description\r\n9. Verify the Calculation Type Code, \r\nCalculation Type Description\r\n10. Verify the Inclusive Tax\r\n11. Verify the Min Cap and Max Cap:\r\n12. Verify the Inclusive Service Charge\r\n13. Verify the Service Charge Amount",
        "expected": "1. All the details should be noted down\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. All of the below given details should be verified:\r\nService Charge ID, \r\nService Charge Code, \r\nService Charge Description, \r\nService Charge Public Description\r\n7. Service Charge Type Code, \r\nService Charge Type Description\r\nCode can have the following values: TIX/EVT/PKG/PKS/DEL/TRX\r\n8. Code can have the following values: YES/NO/MAN\r\n9. Service Charge Calculation Type Code can have the following values: FIX/SEAT/FSA/PER/PSA/PKS/PKA\r\n10. Inclusive Tax ID, Inclusive Tax Code, Inclusive Tax Description, \r\nInclusive Tax Public Description\r\nInclusive Tax Rate  \r\nInclusive Tax Amount \r\n\r\nIf the inclusive taxes are not present, these tags will not be present in response.\r\n11. This attribute is sent only in sending service charge info for Available Delivery Methods.\r\n12. Indicates whether the service charge is included in the price information or not. This tag is added for Ticket Service charges only (as this tag is not relevant for other types of service charges).\r\n13. Service Charge Amount           \r\nThis would be the sum of all service charges of this ID."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690276,
    "title": "Verify if the Service Charges are getting correctly displayed in redelivery API response if delivery has service charges associated",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 30,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41546",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) A delivery method with service charges associated should be available\r\n3)A transaction should be completed with above delivery method and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre-requisites should be set up successfully\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Redelivery API request  based url()\r\n\r\nii)Provide delivery id and ticket ids in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe service charge sould be reflected correctly",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) A delivery method with service charges associated should be available\r\n3)A transaction should be completed with above delivery method and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the V2 Redelivery API request  based url()\r\n\r\nii)Provide delivery id and ticket ids in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisites should be set up successfully\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe service charge sould be reflected correctly"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690277,
    "title": "Verify that the ticketIds related to bundles can be passed into Assign deliveries API",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 31,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41547",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A Bundle Package should be available\r\n3)Create a Bundle Promotion and asscoiate a buyer type & the event of the Bundle .\r\nExpected Result:\r\nPre-requisite should be successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Enter the Assign Delivery request based url \r\nii)Enter the required parameters with url\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n4. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe ticketIds related to bundles can be passed into Assign deliveries API. However, only the ticketIds passed in request are used for Assign Deliveries. Make sure that The application does NOT pick up the bundled ticket ids automatically.\r\n5. i) Select the HTTP method as POST by clicking on the POST radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n6. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n7. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4\r\nExpected Result:\r\nSettings should be successfully completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) A Bundle Package should be available\r\n3)Create a Bundle Promotion and asscoiate a buyer type & the event of the Bundle .\r\n2. Launch the Tool - REST client\r\n3. i)Enter the Assign Delivery request based url \r\nii)Enter the required parameters with url\r\niii)Assign a new delivery for the cart.\r\n4. Click Green Arrow Button and Verify the Response\r\n5. i) Select the HTTP method as POST by clicking on the POST radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n6. i)Enter Lock Seat API url \r\nii)Enter Lock seats API XML request in Body tab.\r\niii)Enter the id of event mentioned in 1st Step in  tag\r\niv)Click Green Arrow Button\r\n7. i) Select the HTTP method as PUT by clicking on the PUT radio button\r\nii) Set the authentication parameters: Username and password, Auth type select as BASIC and Check  Preemptive checkbox           \r\niii) Select SSL tab and set the hostname verifier to Allow All\r\niv) Set the Header values(If-Match ,Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n\r\nUpdate If match header value with etag noted in Step 4",
        "expected": "1. Pre-requisite should be successfull\r\n2. Tool should be successfully launched\r\n3. The user should be successfully able to complete all the above mentioned step.\r\n4. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nThe ticketIds related to bundles can be passed into Assign deliveries API. However, only the ticketIds passed in request are used for Assign Deliveries. Make sure that The application does NOT pick up the bundled ticket ids automatically.\r\n5. Settings should be successfully completed\r\n6. An HTTP status code with 200(OK) should be displayed along with XML message in Response\r\n\r\nNote down the cart id and etag, and ticket ids from the response\r\n7. Settings should be successfully completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690278,
    "title": "Verify the response of Redelivery API Request If only master event tickets are skipped from redelivery",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 32,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41562",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1)Valid Agency, User should be available (Note down the Agency, User)\r\n2)A master event and non-master event should be available\r\n3)A transaction should be completed with both master and non-master events and delivery id should be noted down\r\nExpected Result:\r\nPre-requisites should be set up successfully\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\nii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\niii)Select SSl tab and set the hostname verifier to Allow All\r\niv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the redelivery request based url()\r\nii)Skip the master event tickets from redelivery and provide the non-master event ticket ids in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nIf all the constituent event tickets are provided in request but master event tickets are not provided, the application should throw error",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1)Valid Agency, User should be available (Note down the Agency, User)\r\n2)A master event and non-master event should be available\r\n3)A transaction should be completed with both master and non-master events and delivery id should be noted down\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\nii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\niii)Select SSl tab and set the hostname verifier to Allow All\r\niv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the redelivery request based url()\r\nii)Skip the master event tickets from redelivery and provide the non-master event ticket ids in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisites should be set up successfully\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. If all the constituent event tickets are provided in request but master event tickets are not provided, the application should throw error"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690279,
    "title": "Verify the error message is displayed in Redelivery API Response If the request contains ticket ids that were returned",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 33,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41563",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)A transaction should be completed and note down the delivery id.\r\n4)Return all tickets of above transaction\r\nExpected Result:\r\nPre-requisites should be set up successfully\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\nii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\niii)Select SSl tab and set the hostname verifier to Allow All\r\niv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Redelivery API request  based url.()\r\nii)Provide same ticket ids that were returned in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn Error should be displayed in response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)A transaction should be completed and note down the delivery id.\r\n4)Return all tickets of above transaction\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\nii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\niii)Select SSl tab and set the hostname verifier to Allow All\r\niv)Set the Header values\r\n4. i)Enter the V2 Redelivery API request  based url.()\r\nii)Provide same ticket ids that were returned in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre-requisites should be set up successfully\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An Error should be displayed in response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690280,
    "title": "Verify the Assign Delivery API response when user does not provide delivery id and method fields",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 34,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41575",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \r\nii)Do not enter delivery id and method fields\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nProper validation message should be displayed in response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the assign delivery request based url \r\nii)Do not enter delivery id and method fields\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. Proper validation message should be displayed in response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690281,
    "title": "Verify Update Delivery API ? Request that the System should not allow delivery details to be updated for fulfilled deliveries.",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 35,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41579",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\nii)Try to delete value for a required field(ex. deleting the phone number for a Tickets@Phone delivery)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nIf deliveryStatus is fulfilled then system should throw error.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available (Note down the Agency, User)\n2) An Event should be available\n3))A transaction should be completed and note down the delivery id.\n4) Note down the Agency, User, Event.\n5)Get the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\n    iii)Select SSl tab and set the hostname verifier to Allow All\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\nii)Try to delete value for a required field(ex. deleting the phone number for a Tickets@Phone delivery)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. If deliveryStatus is fulfilled then system should throw error."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690282,
    "title": "Verify If the delivery id passed in redelivery API request has delivery status Fulfilled or Cancelled  then Error should be returned",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 36,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41588",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.Print the tickets \r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Redelivery API request  based url.(.../cart/v1/redeliver)\r\nii)Pass delivery id which has delivery status Fulfilled or Cancelled.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn error should be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.Print the tickets \r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Redelivery API request  based url.(.../cart/v1/redeliver)\r\nii)Pass delivery id which has delivery status Fulfilled or Cancelled.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An error should be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690283,
    "title": "Verify Assign Delivery API request with invalid value for Parameters (fields)",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 37,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41603",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requisite should be succesfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. Launch the Tool for Assign Delivery - REST client\r\n\r\ni)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \r\nii)ii)Enter invalid value for Parameters (fields)\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nProper error message should be returned\r\n6. i) Enter the Lock Seats API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \r\nii) Enter the Required parameters for the Request \r\n   -Patron Id \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n\r\nNote the Cart ID and the Ticket Ids",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. Launch the Tool for Assign Delivery - REST client\r\n\r\ni)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the assign delivery request based url \r\nii)ii)Enter invalid value for Parameters (fields)\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response\r\n6. i) Enter the Lock Seats API Request base URL https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock \r\nii) Enter the Required parameters for the Request \r\n   -Patron Id \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button",
        "expected": "1. Pre requisite should be succesfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps.\r\n5. Proper error message should be returned\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n\r\nNote the Cart ID and the Ticket Ids"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690284,
    "title": "Verify the Assign Delivery API Request with combination of Required and conditional fields",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 38,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41605",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \r\nii)Enter Required and conditional fields\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML/JSON message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the assign delivery request based url \r\nii)Enter Required and conditional fields\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML/JSON message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690285,
    "title": "Verify the Assign Delivery API Request with combination of Required and optional fields",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 39,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41606",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \r\nii)Enter Required and optional fields\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML/JSON message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the assign delivery request based url \r\nii)Enter Required and optional fields\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML/JSON message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690286,
    "title": "Verify the Update Delivery Request with combination of Required and Optional fields",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 40,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41614",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nGet the Ticket Ids from the Get Delivery API\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url.(.../deliveries/v1\r\nii)Select some random values from required and optional fields\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nResponse Fields:\r\nThe corresponding updated datas should come in the response.(Based on the datas in required and optional fields)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nGet the Ticket Ids from the Get Delivery API\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url.(.../deliveries/v1\r\nii)Select some random values from required and optional fields\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nResponse Fields:\r\nThe corresponding updated datas should come in the response.(Based on the datas in required and optional fields)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690287,
    "title": "Verify Update Delivery request with invalid value for Parameters (fields)",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 41,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41623",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\r\nii)Enter an  invalid value for Parameters (fields)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nA Valid Error should be returend.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\r\nii)Enter an  invalid value for Parameters (fields)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. A Valid Error should be returend."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690288,
    "title": "Verify Update Delivery request with invalid Parameters (fields)",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 42,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41624",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\r\nii)Enterthe invalid Parameter in the fields \r\niii)Change the necessary details\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn Error should be returend.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url.(.../deliveries/v1/)\r\nii)Enterthe invalid Parameter in the fields \r\niii)Change the necessary details\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An Error should be returend."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690289,
    "title": "Verify the Search Delivery API Request with invalid parameters(fields)",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 43,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41632",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url (.../deliveries?........)\r\nii)Enter some invalid parameters(fields)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nValid error message should be displayed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url (.../deliveries?........)\r\nii)Enter some invalid parameters(fields)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. Valid error message should be displayed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690290,
    "title": "Verify the Assign Deliveries API Request using the parameter ?Delivery Card Type Code?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 44,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41647",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the  Assign delivery request based url \r\nii)Enter 'Delivery Card Type Code' in request\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the  Assign delivery request based url \r\nii)Enter 'Delivery Card Type Code' in request\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690291,
    "title": "Verify the Assign Deliveries API Request using the parameter ?First Name?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 45,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41660",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter  'First Name' in request\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter  'First Name' in request\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690292,
    "title": "Verify the Assign Deliveries API Request using the parameter ?Delivery Instructions 2?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 46,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41663",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter  'Delivery Instructions 2' in request\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Assign delivery request based url \r\nii)Enter  'Delivery Instructions 2' in request\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690293,
    "title": "Verify the Redelivery API Request using the parameter ?Ticket ID(s)?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 47,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41678",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the redelivery request based url.(.../cart/v1/redeliver)\r\n    ii)Enter 'Ticket ID(s)' \r\n     -If no ticket IDs are specified, all tickets in the delivery will be included. Note that the tickets must themselves be active as well as being active in the delivery.\r\n    iii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the redelivery request based url.(.../cart/v1/redeliver)\r\n    ii)Enter 'Ticket ID(s)' \r\n     -If no ticket IDs are specified, all tickets in the delivery will be included. Note that the tickets must themselves be active as well as being active in the delivery.\r\n    iii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690294,
    "title": "Verify the Redelivery API Request using the parameter ?Delivery ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 48,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41679",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the redelivery request based url\r\nii)Enter 'Delivery ID' url()\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the redelivery request based url\r\nii)Enter 'Delivery ID' url()\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690295,
    "title": "Verify the Redelivery API Request using the parameter ?Attending Patron ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 49,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41680",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter theV2 redelivery request based urlurl()\r\nii)Enter 'Attending Patron ID'  in request body\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nIf provided, the system will ensure that all tickets specified in the request are included in orders that are associated with the patron ID provided",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter theV2 redelivery request based urlurl()\r\nii)Enter 'Attending Patron ID'  in request body\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nIf provided, the system will ensure that all tickets specified in the request are included in orders that are associated with the patron ID provided"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690296,
    "title": "Verify the field ?E-mail? in Update Delivery API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 50,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41705",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery response based url\r\n ii)Enter the url.(.../v2/deliveries/...)\r\niii)Change the necessary details('E-mail')\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery response based url\r\n ii)Enter the url.(.../v2/deliveries/...)\r\niii)Change the necessary details('E-mail')\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690297,
    "title": "Verify the field ?Delivery Method ID? in Update Delivery API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 51,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41719",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery response based url\r\n ii)Enter 'Delivery Method ID' url.(.../deliveries/v1/)\r\niii)Change the necessary details(Delivery Method ID)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery response based url\r\n ii)Enter 'Delivery Method ID' url.(.../deliveries/v1/)\r\niii)Change the necessary details(Delivery Method ID)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690298,
    "title": "Verify the Update Delivery API Request using the parameter ?First Name?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 52,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41735",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\nii)Enter First Name' with url.(.../deliveries/v1/)\r\niii)Change the necessary details(First Name)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\nii)Enter First Name' with url.(.../deliveries/v1/)\r\niii)Change the necessary details(First Name)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690299,
    "title": "Verify the Update Delivery API Request using the parameter ?Delivery Card Number?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 53,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41736",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\nii)Enter the url.(.../V2/deliveries....)\r\niii)Change the necessary details(Delivery Card Number)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output.\r\n\r\nThis is mainly used to create the Will Call Name field. If not provided First Name will be used.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\nii)Enter the url.(.../V2/deliveries....)\r\niii)Change the necessary details(Delivery Card Number)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nThe updated value should come in the output.\r\n\r\nThis is mainly used to create the Will Call Name field. If not provided First Name will be used."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690300,
    "title": "Verify the Update Delivery API Request using the parameter ?Delivery ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 54,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41747",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID with url.(.../v2/deliveries/...)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the update delivery request based url\r\nii)Enter Delivery ID with url.(.../v2/deliveries/...)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\nAs we cant change the delivery id the same delivery id should come."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690301,
    "title": "Verify the field ?Service Charge Refundable Type Code? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 55,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41795",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url \r\nii)Enter  Delivery Id with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\n'Service Charge Refundable Type Code'  field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url \r\nii)Enter  Delivery Id with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\n'Service Charge Refundable Type Code'  field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690302,
    "title": "Verify the field ?Service Charge ID? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 56,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41803",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter  Delivery Id' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nService Charge ID' field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3)Create a delivery service charge and associate the above event.\r\n3)A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter  Delivery Id' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nService Charge ID' field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690303,
    "title": "Verify the field ?Last Name? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 57,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41826",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'Delivery Id' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nLast name field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'Delivery Id' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nLast name field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690304,
    "title": "Verify the field ?Delivery Card Number? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 58,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41831",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id. (Note the delivery method used should be of card associated like Will Call )\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'DeliveryId' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nDelivery Card NUmber field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id. (Note the delivery method used should be of card associated like Will Call )\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'DeliveryId' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nDelivery Card NUmber field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690305,
    "title": "Verify the field ?E-mail? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 59,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41832",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'Delivery Id \" with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nEmail field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url\r\nii)Enter 'Delivery Id \" with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nEmail field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690306,
    "title": "Verify the field ?Delivery Refund Status? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 60,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41835",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Refund Status' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Refund Status' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690307,
    "title": "Verify the field ?Delivery Instructions 1? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 61,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41840",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id'  with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nDelivery Instructions 1' field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id'  with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nDelivery Instructions 1' field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690308,
    "title": "Verify the field ?Postal Code? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 62,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41843",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nPostal Code field value should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nPostal Code field value should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690309,
    "title": "Verify the field ?Address 1? in Get Delivery Details API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 63,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41847",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nAddress1 filed should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the Get Delivery  request based url.(.../deliveries/v1/)\r\nii)Enter 'Delivery Id' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n\r\nAddress1 filed should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690310,
    "title": "Verify the Get Delivery Details API Request using the parameter ?Delivery ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 64,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41852",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the Get Delivery  request based url \r\n ii)Enter 'Delivery ID' with url.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the Get Delivery  request based url \r\n ii)Enter 'Delivery ID' with url.\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690311,
    "title": "Verify the field ?Number of Tickets? in Search Delivery API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 65,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41853",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. Enter the search delivery response based url.(.../deliveries?.......)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Go to the field 'Number of Tickets'.\r\nExpected Result:\r\nNumber of Tickets' field should be displayed successfully",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. Enter the search delivery response based url.(.../deliveries?.......)\r\n5. Click Green Arrow Button and Verify the Response\r\n6. Go to the field 'Number of Tickets'.",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Number of Tickets' field should be displayed successfully"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690312,
    "title": "Verify the field ?Delivery Method Code? in Search Delivery API Response",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 66,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41863",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. Enter the search delivery response based url.(.../deliveries?..........)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Go to the field   'Delivery Method Code'\r\nExpected Result:\r\nDelivery Method Code' field should be displayed successfully",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. Enter the search delivery response based url.(.../deliveries?..........)\r\n5. Click Green Arrow Button and Verify the Response\r\n6. Go to the field   'Delivery Method Code'",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n6. Delivery Method Code' field should be displayed successfully"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690313,
    "title": "Verify the Search Delivery API Request using the parameter ?Card Type Code?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 67,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41867",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id. .(Note a card should be used in the delivery method)\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url\r\nii)Enter Card Type Code with url.(............deliveries?cardNumber=4444333322221111&cardTypeCode=VISA)\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id. .(Note a card should be used in the delivery method)\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url\r\nii)Enter Card Type Code with url.(............deliveries?cardNumber=4444333322221111&cardTypeCode=VISA)\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690314,
    "title": "Verify the Search Delivery API Request using the parameter ?Delivery Card Number?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 68,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41868",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url\r\nii)Enter Delivery Card Number with url\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url\r\nii)Enter Delivery Card Number with url\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690315,
    "title": "Verify the Search Delivery API Request using the parameter ?Delivery ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 69,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41869",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url\r\nii)Enter Delivery ID with url\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url\r\nii)Enter Delivery ID with url\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690316,
    "title": "Verify the Search Delivery API Request using the parameter ?Attending Patron ID?",
    "section_id": 1684782,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16242",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 70,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C41873",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\nExpected Result:\r\nPre requiiste should be complete successfull\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the search delivery request based url\r\nii)Enter Attending Patron ID with url\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned step.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available (Note down the Agency, User)\r\n2) An Event should be available\r\n3))A transaction should be completed and note down the delivery id.\r\n4) Note down the Agency, User, Event.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values\r\n4. i)Enter the search delivery request based url\r\nii)Enter Attending Patron ID with url\r\n5. Click Green Arrow Button and Verify the Response",
        "expected": "1. Pre requiiste should be complete successfull\r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned step.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690317,
    "title": "Verify the response of a Get Availability request with Scale_Section_summary parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42120",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event and note the Event id,Section_summary\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Scale_Section_summary should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nXML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nScale_Section_summary should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in XML response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event and note the Event id,Section_summary\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Scale_Section_summary should be  given\r\nii)Click Green Arrow Button\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nScale_Section_summary should be  given\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. An error message should be displayed in XML response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690318,
    "title": "Verify the response of a Get Availability request with Scale_summary parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42121",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event and note the Event id,Scale_summary\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Scale_summary should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nXML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nScale_summary should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in XML response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event and note the Event id,Scale_summary\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Scale_summary should be  given\r\nii)Click Green Arrow Button\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nScale_summary should be  given\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. An error message should be displayed in XML response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690319,
    "title": "Verify whether the Locked seats count are included in availability when includeLockedSeats is passed as True in the request",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18964",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42124",
    "custom_preconds": "Data for Automation:\r\nUser to Call the API: APIuser1/ Password1\r\nEvent_id: 69109 and Event_code: AT1212122028\r\n\r\nhttps://auto1.provenueapp.com:18443/api/v2/availability/events/69109?includeLockedSeats=True",
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Select an already existing event \n2) Note down the seats which are locked for the event\n3) The user's default agency should be marked as external\r\nExpected Result:\r\nThe pre-requisite should be successful\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for Get availability request:In Get availability request,valid value for the parameter should be provided.Also provide Event ID and the parameter value 'includeLockedSeats' as True in the request \nii) Click Green Arrow Button\niii) Verify whether the Locked seats count are included in availability when includeLockedSeats is passed as True in the request\r\nExpected Result:\r\nThe Locked seats count should be  included in availability count in the response\r\n7. Verify the response in both V1 and V2\r\nExpected Result:\r\nThe Locked seats count should be  included in availability count in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Select an already existing event \n2) Note down the seats which are locked for the event\n3) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for Get availability request:In Get availability request,valid value for the parameter should be provided.Also provide Event ID and the parameter value 'includeLockedSeats' as True in the request \nii) Click Green Arrow Button\niii) Verify whether the Locked seats count are included in availability when includeLockedSeats is passed as True in the request\r\n7. Verify the response in both V1 and V2",
        "expected": "1. The pre-requisite should be successful\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. The Locked seats count should be  included in availability count in the response\r\n7. The Locked seats count should be  included in availability count in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690320,
    "title": "Verify the get availability response when the buyer type relationship using EXACTLY SAME QUANTITY ratio type_same no of tickets defined",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42128",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\r\n1)Create  the buyer type relationship using EXACTLY SAME QUANTITY ratio type_same no. of tickets defined\r\n2)Create one trait\r\n3)Create a targetted promotions,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the get availability response\r\nExpected Result:\r\nThe response should be valid and all the buyertype,promotion and trait details should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\r\n1)Create  the buyer type relationship using EXACTLY SAME QUANTITY ratio type_same no. of tickets defined\r\n2)Create one trait\r\n3)Create a targetted promotions,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\n7. Verify the get availability response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. The response should be valid and all the buyertype,promotion and trait details should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690321,
    "title": "Verify the  list of trait IDs associated with each buyer type promotion in the get availability response",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42130",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait and restrict it to the required buyer type and promotion\r\n3)Create a targetted promotions,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the  list of trait IDs associated with each buyer type's promotion in the get availability response\r\nExpected Result:\r\nGet Availablility response should include the list of trait IDs associated with each buyer type's promotion (if any).",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait and restrict it to the required buyer type and promotion\r\n3)Create a targetted promotions,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\n7. Verify the  list of trait IDs associated with each buyer type's promotion in the get availability response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. Get Availablility response should include the list of trait IDs associated with each buyer type's promotion (if any)."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690322,
    "title": "Verify the Trait Codes or Trait Restrictions element in  the get availability response",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42131",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait and restrict it to the required buyer type and promotion\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\nEnter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the Trait Codes or Trait Restrictions element in  the get availability response\r\nExpected Result:\r\nThe buyer type data should include a new Trait Codes or Trait Restrictions element in response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait and restrict it to the required buyer type and promotion\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\nEnter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nClick Green Arrow Button\r\n7. Verify the Trait Codes or Trait Restrictions element in  the get availability response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. The buyer type data should include a new Trait Codes or Trait Restrictions element in response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690323,
    "title": "Verify the get availability response when there are one or more buyer type relationships defined",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42132",
    "custom_preconds": "Data for Automation:\r\nUser to Call the API: APIuser1/ Password1\r\nEvent_id: 69109 and Event_code: AT1212122028\r\n\r\nBuyer Type Code:PR_B01\r\nPromotion Code:PR_PROMO1\r\nCoupon Code:PR_CO1\r\nTrait Code:NCTRAIT111\r\nTrait Group Code: NCTRAIT1\r\n\r\n\r\nEvent Availability:\r\nhttps://auto1.provenueapp.com:18443/api/v2/availability/events/69109",
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\n1)Create More than one buyer type quantity relationship \n2)Create one trait\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\nhttps://(localhost):(port)/api/v2/availability/events/\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the get availability response\r\nExpected Result:\r\nThe response should be valid for more than one buyer type realtionships",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\n1)Create More than one buyer type quantity relationship \n2)Create one trait\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\nhttps://(localhost):(port)/api/v2/availability/events/\nClick Green Arrow Button\r\n7. Verify the get availability response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. The response should be valid for more than one buyer type realtionships"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690324,
    "title": "Verify the promotion_id element  in the Get Availability API response for targeted Promotions",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42134",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\r\n1)Create one buyertype quantity relationship \r\n2)Create one trait\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the  element  in the Get Availability API response\r\nExpected Result:\r\nThe   element  should be displayed in the response with valid Promotion id",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\r\n1)Create one buyertype quantity relationship \r\n2)Create one trait\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\n7. Verify the  element  in the Get Availability API response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. The   element  should be displayed in the response with valid Promotion id"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690325,
    "title": "Verify the quantity_relationship_description element  in the Get Availability API response for targeted Promotions when there is atleast one buyer type quantity relationship defined",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17544",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42140",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\nExpected Result:\r\nThe tool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nThe method should be select as GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nThe  authentication parameters should be set\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nThe SSL tab and hostname should be set\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\nExpected Result:\r\nThe response should be displayed for Get Availability API\r\n7. Verify the  element  in the Get Availability API response\r\nExpected Result:\r\nThe   element should be displayed in the response with valid description",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Pre-Requisite:\r\n1)Create one buyer type quantity relationship \r\n2)Create one trait\r\n3)Create a targeted promotion,configure a promotion that is trait restricted and associate the buyer type to promotion\r\n4)Create one event and configure the above buyer type\r\n2. Launch the Tool Rest Client API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for Get Availability request:in Get Availability request the parameter eventid should be given\r\nhttps://(localhost):(port)/api/v2/availability/events/\r\nClick Green Arrow Button\r\n7. Verify the  element  in the Get Availability API response",
        "expected": "1. \r\n2. The tool should be launched successfully\r\n3. The method should be select as GET\r\n4. The  authentication parameters should be set\r\n5. The SSL tab and hostname should be set\r\n6. The response should be displayed for Get Availability API\r\n7. The   element should be displayed in the response with valid description"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690326,
    "title": "Verify whether the ID is not formatted in the error response and log message for the attribute-EventID in a Get Availability API request",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16078",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42144",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event and note the details\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get Availability request:in Get Availability request invalid value for parameter  Event ID should be given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in XML/JSON response\r\n\r\nID should not be formatted in the error response and log message for the attribute-EventID",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event and note the details\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get Availability request:in Get Availability request invalid value for parameter  Event ID should be given\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An error message should be displayed in XML/JSON response\r\n\r\nID should not be formatted in the error response and log message for the attribute-EventID"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690327,
    "title": "Verify the response of a Get Availability request with Skip Onsale Date Access Check",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42151",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event\r\n2) Open the Event Access\r\n3) Check the Display On Calendar\r\n4) The user's default agency should be marked as external\r\nExpected Result:\r\nThe pre-requisite should be successful\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni) Enter the URL for Get availability request:In  Get  availability request,valid value for the parameter\r\nEvent ID\r\nii) Set \"Skip Onsale Date Access\" option to True\r\niii) Click Green Arrow Button\r\niv) Verify whether the Event in the Pre-requisite is showing\r\nExpected Result:\r\ni) XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\n\r\nii) XML/JSON Response should be generated without skipping the \r\npre-requisite Event \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni) Enter the URL for Get availability request:In Get availability request valid value for the parameter\r\nEvent ID\r\nii) Set the \"Skip Onsale Date Access\" option to False\r\niii) Click Green Arrow Button\r\niv) Verify whether the Event in the Pre-requisite is not showing\r\nExpected Result:\r\nIf Skip Onsale Date Access is False,\r\nthe corresponding Event details should not get displayed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event\r\n2) Open the Event Access\r\n3) Check the Display On Calendar\r\n4) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni) Enter the URL for Get availability request:In  Get  availability request,valid value for the parameter\r\nEvent ID\r\nii) Set \"Skip Onsale Date Access\" option to True\r\niii) Click Green Arrow Button\r\niv) Verify whether the Event in the Pre-requisite is showing\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni) Enter the URL for Get availability request:In Get availability request valid value for the parameter\r\nEvent ID\r\nii) Set the \"Skip Onsale Date Access\" option to False\r\niii) Click Green Arrow Button\r\niv) Verify whether the Event in the Pre-requisite is not showing",
        "expected": "1. The pre-requisite should be successful\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\n\r\nii) XML/JSON Response should be generated without skipping the \r\npre-requisite Event \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\n7. If Skip Onsale Date Access is False,\r\nthe corresponding Event details should not get displayed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690328,
    "title": "Verify the response of a Get Availability request with a valid Sale Type parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42157",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event \r\n2) Do a sale transaction with a valid sale type\r\n3) Note the sale type\r\n4) The user's default agency should be marked as external\r\nExpected Result:\r\nThe pre-requisite should be successful\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request valid value for the parameter\r\nEvent ID\r\ni) Verify whether the Sale type parameter is showing \"Single\" sale type as default\r\nii) Provide valid sale type in the request also\r\niii)Click Green Arrow Button\r\nExpected Result:\r\ni) The Default Sale type should be \"Single\"\r\n\r\nii) XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event \r\n2) Do a sale transaction with a valid sale type\r\n3) Note the sale type\r\n4) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request valid value for the parameter\r\nEvent ID\r\ni) Verify whether the Sale type parameter is showing \"Single\" sale type as default\r\nii) Provide valid sale type in the request also\r\niii)Click Green Arrow Button",
        "expected": "1. The pre-requisite should be successful\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) The Default Sale type should be \"Single\"\r\n\r\nii) XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690329,
    "title": "Verify the response of a Get Availability request with a invalid Sale Type parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42162",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create 2 or 3 events in an event date range and note the deatils.\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get Availability request:in Get Availability request invalid value for parameter salesType should be given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in XML/JSON response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create 2 or 3 events in an event date range and note the deatils.\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get Availability request:in Get Availability request invalid value for parameter salesType should be given\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An error message should be displayed in XML/JSON response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690330,
    "title": "Verify the response of a Get Availability request with a Hold Code ID parameter, when the user is not having the select access to the hold code",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42165",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event with one or two hold codes\r\n\r\n2) The user's default agency should be marked as external\r\n\r\n3) The User making the request should not have the select access to the above hold codes.\r\nExpected Result:\r\nThe pre-requisite should be successful\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:In  Get  availability request ,valid value for the parameter Event ID and Hold Code ID (The specified hold code is not having select access ) ,should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nIf any specified hold code is not having the select access the API should get return an error",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event with one or two hold codes\r\n\r\n2) The user's default agency should be marked as external\r\n\r\n3) The User making the request should not have the select access to the above hold codes.\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:In  Get  availability request ,valid value for the parameter Event ID and Hold Code ID (The specified hold code is not having select access ) ,should be  given\r\nii)Click Green Arrow Button",
        "expected": "1. The pre-requisite should be successful\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. If any specified hold code is not having the select access the API should get return an error"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690331,
    "title": "Verify the response of a Get Availability request with a valid Hold Code ID parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42167",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event with one or two hold codes\r\n\r\n2) The user's default agency should be marked as external\r\n\r\n3) The User making the request should need select access to the above hold codes.\r\nExpected Result:\r\nThe pre-requisite should be successful\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter\r\nEventID and Hold Code ID should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nXML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request valid value for the parameter\r\nEvent ID and Invalid value for the parameter Hold Code ID (The specified hold code is not used or does not exist ) should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nIf any specified hold code is not used or does not exist the API should get return an error",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event with one or two hold codes\r\n\r\n2) The user's default agency should be marked as external\r\n\r\n3) The User making the request should need select access to the above hold codes.\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter\r\nEventID and Hold Code ID should be  given\r\nii)Click Green Arrow Button\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request valid value for the parameter\r\nEvent ID and Invalid value for the parameter Hold Code ID (The specified hold code is not used or does not exist ) should be  given\r\nii)Click Green Arrow Button",
        "expected": "1. The pre-requisite should be successful\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. If any specified hold code is not used or does not exist the API should get return an error"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690332,
    "title": "Verify the response of a Get Availability request with a valid EventID parameter",
    "section_id": 1684783,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-14805",
    "created_by": 333,
    "created_on": 1684937868,
    "updated_by": 333,
    "updated_on": 1684937868,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42168",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create an event and note the Event id\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Event ID should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nXML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nEvent ID should be  given\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in XML response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create an event and note the Event id\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Availability API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get availability request valid value for the  parameter Event ID should be  given\r\nii)Click Green Arrow Button\r\n7. https://(localhost):(port)/api/v2/availability/events/\r\ni)Enter the URL for Get availability request:in  Get  availability request invalid value for the parameter\r\nEvent ID should be  given\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. XML/JSON Response should be generated and  valid  informations should be provided without any errors\r\nThe XML/JSON response should contain the \r\ncorrect details of:  \r\n\r\nEvent ID\r\nEvent Code, Description, and Public Description\r\ngroup type\r\nprice scale id\r\nprice scale code, description, public description\r\nZone id\r\nZone code, description,public description, derivedDescription,\r\navailabilityQty, \r\ncontiguousQty,\r\nextendedSeatDefinition id,\r\nextendedSeatDefinition code,description, public description\r\nextendedSeatDefinition availabilityQty,\r\nextendedSeatDefinition contiguousQty,\r\ndisplayOrder,\r\ndisplayOrder minimumOfferLimit,\r\ndisplayOrder maximumOfferLimit,\r\nprice isoCurrency,\r\nbuyerType id,\r\nbuyerType code,\r\nbuyerType id,\r\nbuyerType code,description, publicDescription,\r\navailabilityQty,\r\nbuyerType displayOrder,\r\nbuyerType minimumOfferLimit,\r\nbuyerType maximumOfferLimit,\r\nbuyerType \r\ncoupon id\r\ncoupon code, description,\r\ncoupon promoCode,\r\npromotions type,\r\npromotion id,\r\npromotion code,\r\npromotion description, publicDescription\r\n7. An error message should be displayed in XML response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.2.00"
  },
  {
    "id": 30690333,
    "title": "Verify the error code in  V2 Will Call Print Tickets API when the printer is not set as external",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42368",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a sale transaction and use will call delivery method.\r\n5) Do not set the Printer as  External in System Setup->System Administration->Devices->Printer\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response\r\nExpected Result:\r\nValid error message with error code should be displayed in the response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a sale transaction and use will call delivery method.\r\n5) Do not set the Printer as  External in System Setup->System Administration->Devices->Printer\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Valid error message with error code should be displayed in the response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690334,
    "title": "Verify the error code in  V2 Will Call Print Tickets API when some of the resolved Tickets are not fully paid and user does not have Printing Access Feature Permission -Print Unpaid Tickets",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42374",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction which uses partial payment and receiavables for remaining amount and use will call delivery method.\r\n5) Set Print Unpaid Tickets checkbox as uncheck in AFP->Printing Permissions\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response\r\nExpected Result:\r\nValid error message with error code should be displayed in the response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4) Perform a transaction which uses partial payment and receiavables for remaining amount and use will call delivery method.\r\n5) Set Print Unpaid Tickets checkbox as uncheck in AFP->Printing Permissions\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Valid error message with error code should be displayed in the response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690335,
    "title": "Verify the error code in  V2 Will Call Print Tickets API when Print Format does not have a design for Format Type",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42375",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4)Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n5)Print Format should not have a design for Format Type.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response\r\nExpected Result:\r\nValid error message with error code should be displayed in the response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4)Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n5)Print Format should not have a design for Format Type.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Valid error message with error code should be displayed in the response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690336,
    "title": "Verify the error code in  V2 Will Call Print Tickets API when print format description does not have a ticket design matching the requested printers current stock types",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42377",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4)Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n5)Print format description should not have a ticket design matching the requested printers current stock types\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response\r\nExpected Result:\r\nValid error message with error code should be displayed in the response.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Create a new patron and Patron Account digital access card Barcode Number should be noted.\r\n4)Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n5)Print format description should not have a ticket design matching the requested printers current stock types\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL\r\n\r\nii)Enter other mandatory fields in the request body\r\niii)Click Green Arrow Button.\r\niv)Verify the error code in the response",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Valid error message with error code should be displayed in the response."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690337,
    "title": "Verify  V2 Will Call Print Tickets API  response without providing the required request header PV-API-Key",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42378",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL      \r\nii)Enter other mandatory fields\r\niii)Click Green Arrow Button and Verify  V2 Will Call Print Tickets API  response without providing the required request header PV-API-Key\r\nHeader Name     Required/Optional       \r\nAuthorization   Required   - DO NOT PROVIDE THIS         \r\nPV-API-Key      Required        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\niv)Submit request invalid values for above fields\r\nExpected Result:\r\nError code should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL      \r\nii)Enter other mandatory fields\r\niii)Click Green Arrow Button and Verify  V2 Will Call Print Tickets API  response without providing the required request header PV-API-Key\r\nHeader Name     Required/Optional       \r\nAuthorization   Required   - DO NOT PROVIDE THIS         \r\nPV-API-Key      Required        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\niv)Submit request invalid values for above fields",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Error code should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690338,
    "title": "Verify V2 Will Call Print Tickets API  response without providing the required request header Authorization",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42379",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL      \r\nii)Enter other mandatory fields\r\niii)Click Green Arrow Button and Verify V2 Will Call Print Tickets API  response without providing the required request header Authorization\r\nHeader Name     Required/Optional       \r\nAuthorization   Required   - DO NOT PROVIDE THIS         \r\nPV-API-Key      Required        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\niv)Submit request invalid values for above fields\r\nExpected Result:\r\nError code should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as POST by clicking on the POST radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Print Tickets API Request base URL      \r\nii)Enter other mandatory fields\r\niii)Click Green Arrow Button and Verify V2 Will Call Print Tickets API  response without providing the required request header Authorization\r\nHeader Name     Required/Optional       \r\nAuthorization   Required   - DO NOT PROVIDE THIS         \r\nPV-API-Key      Required        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\niv)Submit request invalid values for above fields",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Error code should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690339,
    "title": "Verify V2 Will Call Get Info API response without providing the required request header PV-API-Key",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18618",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42380",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the V2 Will Call Get Info API Request base URL\r\nii)Enter other mandatory fields\r\n\r\nClick Green Arrow Button and Verify combination of Request Headers in  V2 Will Call Get Info API\r\n\r\nHeader Name     Required/Optional       \r\n\r\nAuthorization   Required        \r\nPV-API-Key      Required    - DO NOT PROVIDE THIS        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\nSubmit valid and invalid values\r\nExpected Result:\r\nError code should be displayed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid API Agency, User should be available (Note down the Agency, User)\r\n2) Agency should be set to External\r\n3) Perform a transaction using will call delivery method and use ID Type as Credit Card and card number should be noted.\r\n4)Patron Account digital access card Barcode Number should be noted.\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as GET by clicking on the GET radio button\r\n ii)Enter the response body parameters and set the response content type\r\n iii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n iv)Select SSl tab and set the hostname verifier to Allow All\r\n v)Set the Header values\r\n4. i)Enter the V2 Will Call Get Info API Request base URL\r\nii)Enter other mandatory fields\r\n\r\nClick Green Arrow Button and Verify combination of Request Headers in  V2 Will Call Get Info API\r\n\r\nHeader Name     Required/Optional       \r\n\r\nAuthorization   Required        \r\nPV-API-Key      Required    - DO NOT PROVIDE THIS        \r\nPV-Application-ID       Required        \r\nPV-Sandbox-Email-Address        Optional        \r\nAccept  Optional        \r\nContent-Type    Optional        \r\nAccept-Encoding Optional        \r\n\r\nSubmit valid and invalid values",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. Error code should be displayed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690340,
    "title": "Verify the Get event info API on giving the combination of Event id and venue id",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42388",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Create 1 event and note down the details including Event ID\r\n2)Note the venue ID from DB\r\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request on giving the Event id and Venue id\r\nii)Click Green Arrow Button\r\nExpected Result:\r\npv.common.20005 400-Bad Request should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Create 1 event and note down the details including Event ID\r\n2)Note the venue ID from DB\r\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request on giving the Event id and Venue id\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. pv.common.20005 400-Bad Request should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690341,
    "title": "Verify the Error Response in Get Event Info API without providing parameter in the request",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42392",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create 1 event and note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request without providing  parameter in the request\r\n\r\nEg:- Do not provide eventid etc \r\nii)Click Green Arrow Button\r\nExpected Result:\r\npv.common.20007\r\n400 - Bad Request should be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create 1 event and note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request without providing  parameter in the request\r\n\r\nEg:- Do not provide eventid etc \r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. pv.common.20007\r\n400 - Bad Request should be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690342,
    "title": "Verify the Get Event Info API response on providing event id of event with status as Off Sale",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42396",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1)Create 1 event and set the event status as Off Sale.Note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Will Call Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for Get event info request and provide event ID:\r\nor \r\n\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAn error message should be displayed in  response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1)Create 1 event and set the event status as Off Sale.Note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Will Call Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for Get event info request and provide event ID:\r\nor \r\n\r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An error message should be displayed in  response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690343,
    "title": "Verify the Response of Get event info API on giving valid Access Control Start Date_Time",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42401",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Create 1 event and note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n3) Set Access Permissoins to the Event\r\n4) Note the Access Control Start Date/Time\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for Get event info request providing valid parameters value on Access Control Start Date/Time \r\nii)Click Green Arrow Button\r\nExpected Result:\r\nAccess Control Start Date/Time is equal to or less than the date provided should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Create 1 event and note down the details including Event ID\r\n2) The user's default agency should be marked as external\r\n3) Set Access Permissoins to the Event\r\n4) Note the Access Control Start Date/Time\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for Get event info request providing valid parameters value on Access Control Start Date/Time \r\nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Access Control Start Date/Time is equal to or less than the date provided should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690344,
    "title": "Verify the Response of Get event info API after setting the Primary Scan Facility ID",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42402",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Create 1 event and note down the details including Eventcode\r\n2) The user's default agency should be marked as external\r\n3) Set the Primary Scan Facility \r\n4) Note the Primary Scan Facility ID\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request and provide the event ID \r\n\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nOnly events for that scan facility should be returned.\r\n7. Verify Response\r\nExpected Result:\r\nThe response should include the events in prerequsiite as per the request Query.\r\n\r\n\r\nThe following elements will be added to the API response\r\nAccess Control Enabled  \r\nAccess Control Start Date/Time  \r\nAccess Control End Date/Time    \r\nValid Scans Per Day     \r\nValid Scans Per Event    \r\nBarcode Prefix\r\nBarcode Mask    \r\nExternal Barcode Mask   \r\nExit Scanning Allowed   \r\nPrimary Scan Facility (ID, Code, Description, Public Description)       \r\nSecondary Scan Facility (ID, Code, Description, Public Description)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Create 1 event and note down the details including Eventcode\r\n2) The user's default agency should be marked as external\r\n3) Set the Primary Scan Facility \r\n4) Note the Primary Scan Facility ID\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request and provide the event ID \r\n\r\nii)Click Green Arrow Button\r\n7. Verify Response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Only events for that scan facility should be returned.\r\n7. The response should include the events in prerequsiite as per the request Query.\r\n\r\n\r\nThe following elements will be added to the API response\r\nAccess Control Enabled  \r\nAccess Control Start Date/Time  \r\nAccess Control End Date/Time    \r\nValid Scans Per Day     \r\nValid Scans Per Event    \r\nBarcode Prefix\r\nBarcode Mask    \r\nExternal Barcode Mask   \r\nExit Scanning Allowed   \r\nPrimary Scan Facility (ID, Code, Description, Public Description)       \r\nSecondary Scan Facility (ID, Code, Description, Public Description)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690345,
    "title": "Verify the response of Get Event Info API  on giving valid parameters value on Days of the Week",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42405",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Create 1event and note down the details including Event ID\r\n2) Note the \"Days of the Week\" of the Event\r\n3) The user's default agency should be marked as external\r\nExpected Result:\r\nPre-request should set successfully\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request and provide parameter value on \"Days of the Week\"\r\nii)Click Green Arrow Button\r\nExpected Result:\r\nDisplays the Days of the Week based on the value given on the Request Parameter\r\nMon = 1, Tues = 2, Wed = 3, Thurs = 4, Fri = 5, Sat = 6, Sun = 7",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Create 1event and note down the details including Event ID\r\n2) Note the \"Days of the Week\" of the Event\r\n3) The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request and provide parameter value on \"Days of the Week\"\r\nii)Click Green Arrow Button",
        "expected": "1. Pre-request should set successfully\r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Displays the Days of the Week based on the value given on the Request Parameter\r\nMon = 1, Tues = 2, Wed = 3, Thurs = 4, Fri = 5, Sat = 6, Sun = 7"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690346,
    "title": "Verify the response of Get Event Info API  on giving valid parameters value on Start Date_Time",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42406",
    "custom_preconds": "User: APIuser1/ Password1\r\nhttps://auto1.provenueapp.com:18443/api/v2/events?startDateTime=2028-12-12T12:32:47 \r\n\r\nresponse for this API should only includes event starting: 2028-12-12T12:32:47 \r\nIn the response payload check for the following elements to have date grated than the one defined: \r\n\"dateDetails\": {\r\n                    \"dateTime\": \"2028-12-16T02:36:00.000-06:00\",",
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Create 1 event and note down the details including Event ID\n2)Note the \"Start Date/Time\" of the Event\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request providing valid \"Start Date/Time\" parameter value \nii)Click Green Arrow Button\r\nExpected Result:\r\nEvent date/time equal to or greater than the date provided should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Create 1 event and note down the details including Event ID\n2)Note the \"Start Date/Time\" of the Event\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request providing valid \"Start Date/Time\" parameter value \nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Event date/time equal to or greater than the date provided should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690347,
    "title": "Verify the response of Get Event Info API  on giving valid parameters value on End Date_Time",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42407",
    "custom_preconds": "User: APIuser1/ Password1\r\nhttps://auto1.provenueapp.com:18443/api/v2/events?startDateTime=2028-09-09T12:32:47&endDateTime=2028-09-12T21:00:00\r\nonly events before that end day should be included in the search.\r\npayload feild to check for the date:\r\n     \"dateDetails\": {\r\n                    \"dateTime\": \"2028-10-26T04:57:00.000-05:00\",\r\n                    \"dateTimeText\": \"10/26/2028 at 04:57 AM\",",
    "custom_test_purpose": null,
    "custom_steps": "1. 1)Create 1 event and note down the details including Event ID\n2)Note the \"End Date/Time of the Event\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\nExpected Result:\r\nRadio button should be selected for GET\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 5)i)Enter the URL for V2 Get event info request providing valid \"End Date/Time\" parameter value \nii)Click Green Arrow Button\r\nExpected Result:\r\nEvent date/time  equal to or less than the date provided should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1)Create 1 event and note down the details including Event ID\n2)Note the \"End Date/Time of the Event\n3)The user's default agency should be marked as external\r\n2. Launch the Tool for Get Event Info API\r\n3. Select the HTTP method as GET by clicking on  the GET radio button\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 5)i)Enter the URL for V2 Get event info request providing valid \"End Date/Time\" parameter value \nii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Event date/time  equal to or less than the date provided should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690348,
    "title": "Verify the response of Get Event Info API  on giving query parameter limit in the request",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42410",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) The user's default agency should be marked as external\r\n2) Set the application property \"api.events.get.max.results\" to 1000.\r\n2. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\nExpected Result:\r\nRadio button should be selected for GET and header tab values should be entered.\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. 1)Enter the URL for Get Event Info request base URL and click on Green Arrow button\r\nCase 1: Assume event results are 100 and Providing limit as 50\r\n\r\n2)Click on Green Arrow button\r\nExpected Result:\r\nResponse should display correctly with count field as 50 and MoreResults field as true\r\n7. Case2: Assume event results are 50 and Providing limit as 100\r\n\r\n2)Click on Green Arrow button\r\nExpected Result:\r\nResponse should display correctly with count field as 50 and MoreResults field as false\r\n8. Case3: Assume application maximum limit is 1000, event results are 500 and Providing limit as 100\r\n\r\n2)Click on Green Arrow button\r\nExpected Result:\r\nResponse should display correctly with count field as 100 and MoreResults field as true\r\n9. Assume application maximum limit is 1000, event results are 500 and Providing limit as 600\r\n\r\n2)Click on Green Arrow button\r\nExpected Result:\r\nResponse should display correctly with count field as 500 and MoreResults field as false\r\n10. Assume application maximum limit is 1000, event results are 1500 and Providing limit as 1500\r\n\r\n2)Click on Green Arrow button\r\nExpected Result:\r\nResponse should display correctly with count field as 1000 and MoreResults field as true(max system limit is 1000 only)\r\n11. Assume application maximum limit is 1000, event results are 1500 and do not provide limit \r\n\r\nExpected Result:\r\nResponse should display correctly with count field as 1000 and MoreResults field as true(max system limit is 1000 only)\r\n12. Assume application maximum limit is 1000, event results are 1500 and provide limit as 0\r\n\r\nExpected Result:\r\nProper error message should be displayed\r\n13. Assume application maximum limit is 1000, event results are 1500 and provide limit as -1(negative integer)\r\n\r\nExpected Result:\r\nProper error message should be displayed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) The user's default agency should be marked as external\r\n2) Set the application property \"api.events.get.max.results\" to 1000.\r\n2. Launch the API Tool - Rest Client\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. 1)Enter the URL for Get Event Info request base URL and click on Green Arrow button\r\nCase 1: Assume event results are 100 and Providing limit as 50\r\n\r\n2)Click on Green Arrow button\r\n7. Case2: Assume event results are 50 and Providing limit as 100\r\n\r\n2)Click on Green Arrow button\r\n8. Case3: Assume application maximum limit is 1000, event results are 500 and Providing limit as 100\r\n\r\n2)Click on Green Arrow button\r\n9. Assume application maximum limit is 1000, event results are 500 and Providing limit as 600\r\n\r\n2)Click on Green Arrow button\r\n10. Assume application maximum limit is 1000, event results are 1500 and Providing limit as 1500\r\n\r\n2)Click on Green Arrow button\r\n11. Assume application maximum limit is 1000, event results are 1500 and do not provide limit \r\n\r\n12. Assume application maximum limit is 1000, event results are 1500 and provide limit as 0\r\n\r\n13. Assume application maximum limit is 1000, event results are 1500 and provide limit as -1(negative integer)",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET and header tab values should be entered.\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Response should display correctly with count field as 50 and MoreResults field as true\r\n7. Response should display correctly with count field as 50 and MoreResults field as false\r\n8. Response should display correctly with count field as 100 and MoreResults field as true\r\n9. Response should display correctly with count field as 500 and MoreResults field as false\r\n10. Response should display correctly with count field as 1000 and MoreResults field as true(max system limit is 1000 only)\r\n11. Response should display correctly with count field as 1000 and MoreResults field as true(max system limit is 1000 only)\r\n12. Proper error message should be displayed\r\n13. Proper error message should be displayed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690349,
    "title": "Verify the  Get Event Info API Response on giving the non primary event ID in the request",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 17,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42413",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create Primary event and note down the event id  say 111\r\n2)Create Secondory Event , associate to primary event and note down the secondary event id say 112\r\n3) The user's default agency should be marked as external\r\n2. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\nExpected Result:\r\nRadio button should be selected for GET and header tab values should be entered.\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Enter the URL for V2 Get Event Info request base URL and provide non-primary event id\r\n   \r\nor \r\n   \r\n   ii)Click Green Arrow Button\r\nExpected Result:\r\nThe primary EventId and secondary event id should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create Primary event and note down the event id  say 111\r\n2)Create Secondory Event , associate to primary event and note down the secondary event id say 112\r\n3) The user's default agency should be marked as external\r\n2. Launch the API Tool - Rest Client\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for V2 Get Event Info request base URL and provide non-primary event id\r\n   \r\nor \r\n   \r\n   ii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET and header tab values should be entered.\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. The primary EventId and secondary event id should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690350,
    "title": "Verify the  Get Event Info API Response on giving the primary event ID in the request",
    "section_id": 1684784,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18859",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 18,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C42414",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Create Primary event and note down the event id  say 111\r\n2)Create Secondory Event , associate to primary event and note down the secondary event id say 112\r\n3) The user's default agency should be marked as external\r\n2. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\nExpected Result:\r\nRadio button should be selected for GET and header tab values should be entered.\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Enter the URL for V2 Get Event Info request base URL and provide primary event ID\r\n   \r\nor \r\n   \r\n   ii)Click Green Arrow Button\r\nExpected Result:\r\nThe primary EventId and secondary event id should be returned in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Create Primary event and note down the event id  say 111\r\n2)Create Secondory Event , associate to primary event and note down the secondary event id say 112\r\n3) The user's default agency should be marked as external\r\n2. Launch the API Tool - Rest Client\r\n3. 1)Select the HTTP method as GET by clicking on  the GET radio button\r\n2)Set the header tab values\r\n4. Set the authentication parameters: Username and  password, Auth type select as BASIC and Check  Preemptive checkbox\r\n5. Select SSl tab and set the hostname verfier to  Allow All\r\n6. Enter the URL for V2 Get Event Info request base URL and provide primary event ID\r\n   \r\nor \r\n   \r\n   ii)Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. Radio button should be selected for GET and header tab values should be entered.\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. The primary EventId and secondary event id should be returned in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690351,
    "title": "Verify that Lock Seats API request is successful by specifyin the saleType",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-20881",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 1,
    "custom_is_automated": false,
    "custom_pv_category": 31,
    "custom_refs": "C47900",
    "custom_preconds": "Data for Automation:\r\nUser to Call the API: APIuser1/ Password1\r\nEvent_id: 69109 and Event_code: AT1212122028\r\n\r\nLock Seat Payload JSON: \r\n{\r\n\"lockSeats\": {\r\n   \"numberOfSeats\": \"2\",\r\n   \"allowScatteredSeats\": \"false\",\r\n   \"saleType\": \"GROUP\",\r\n   \"transactionType\": \"sale\",\r\n   \"event\": {\r\n      \"id\": \"69109\"\r\n   },\r\n   \r\n   \"buyerTypeSeatsList\": [{\r\n         \"numberOfSeats\": \"2\",\r\n         \"buyerType\": {\r\n            \"id\": \"1\"\r\n         }\r\n   }],\r\n   \"priceScales\": [{\r\n         \"id\": \"1001\"\r\n   }],\r\n   \"transactionPatronAccount\": {\r\n      \"id\": \"161155\",\r\n      \"matchLastName\": \"Samaflkja\",\r\n      \"matchEmailAddress\": \"97_23_14324122220@tdcloadtest.com\"\r\n   }\r\n}\r\n}\r\n\r\nXML Payload:\r\n\r\n\t\r\n\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\t\t\r\n\t\t\r\n\t     \r\n",
    "custom_test_purpose": null,
    "custom_steps": "1. 1.Login to PV\r\nExpected Result:\r\nLogin should be successful\r\n2. Set the Default Sales Type AFP to \"Group\"\r\nExpected Result:\r\nDefault Sales Type AFP should be set to \"Group\"\r\n3. Give the user Group Sales Permissions, but not Single Sales Permissions for an event\r\nExpected Result:\r\nThe user should be given Group Sales Permissions, but not Single Sales Permissions for an event\r\n4. Launch the Lock Seats API by specifying the \nsaleType as Group\r\nExpected Result:\r\nThe request should be successful and locked seat should show the status of Group.\n\"saleType\": \"GROUP\" in the payload",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1.Login to PV\r\n2. Set the Default Sales Type AFP to \"Group\"\r\n3. Give the user Group Sales Permissions, but not Single Sales Permissions for an event\r\n4. Launch the Lock Seats API by specifying the \nsaleType as Group",
        "expected": "1. Login should be successful\r\n2. Default Sales Type AFP should be set to \"Group\"\r\n3. The user should be given Group Sales Permissions, but not Single Sales Permissions for an event\r\n4. The request should be successful and locked seat should show the status of Group.\n\"saleType\": \"GROUP\" in the payload"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.7.00"
  },
  {
    "id": 30690352,
    "title": "Verify the Cancel Lock Request with invalid offer id.",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-19672",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 2,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C47998",
    "custom_preconds": "redo the setup for postive case: C48043\r\ndont pass cartid  but provide correct offer and if-match header",
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available and note down the event id.\n3) Note down the Agency, User, Event\r\n2. Launch the API Tool  - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii)Enter the header values\nPV-API-Key - xyz\nPV-Application-ID - kiosk.tickets.com\nContent Type - application/xml\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. ii)Enter the LOCK SEAT API request base URL\nii)Enter the request body and iclude above event id.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Response should be successful and get the cart id.\r\n7. 1)Login to PV using valid credentials\n2)Search for the above event in Ticket Sales page and click on Map Sales\n3)Verify the seat is marked as LOCKED in MAP.\r\nExpected Result:\r\nSeat should be marked as LOCKED\r\n8. i)Again launch API tool and enter Cancel Lock \nAPI Request base URL\nii)Select the HTTP method as DELETE by clicking \non the DELETE radio button\niii)Enter invalid offer id.\niv)Click Green Arrow Button\nv)Verify the Response of the 'Cancel Lock Seats'\r\nExpected Result:\r\nThe cart no longer contains the requested offer with ID '12345'. Please start over.\nThis message should appear",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available and note down the event id.\n3) Note down the Agency, User, Event\r\n2. Launch the API Tool  - Rest Client\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii)Enter the header values\nPV-API-Key - xyz\nPV-Application-ID - kiosk.tickets.com\nContent Type - application/xml\nAccept - application/xml\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. ii)Enter the LOCK SEAT API request base URL\nii)Enter the request body and iclude above event id.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id\r\n7. 1)Login to PV using valid credentials\n2)Search for the above event in Ticket Sales page and click on Map Sales\n3)Verify the seat is marked as LOCKED in MAP.\r\n8. i)Again launch API tool and enter Cancel Lock \nAPI Request base URL\nii)Select the HTTP method as DELETE by clicking \non the DELETE radio button\niii)Enter invalid offer id.\niv)Click Green Arrow Button\nv)Verify the Response of the 'Cancel Lock Seats'",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Response should be successful and get the cart id.\r\n7. Seat should be marked as LOCKED\r\n8. The cart no longer contains the requested offer with ID '12345'. Please start over.\nThis message should appear"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.5.00"
  },
  {
    "id": 30690353,
    "title": "Verify the Lock Seats API Request specifying hold code in request with user not having select access to the hold code",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 3,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48161",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event3\r\n4)User should not have select access to the hold code\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Enter the Optional Parameter 'Hold Code ID'\r\niv) Click Green Arrow Button\r\nExpected Result:\r\nProper error message should be returned.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event3\r\n4)User should not have select access to the hold code\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Enter the Optional Parameter 'Hold Code ID'\r\niv) Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Proper error message should be returned."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690354,
    "title": "Verify the Lock Seats API Request specifying hold code in request with user having select access to the hold code",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 4,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48162",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Enter the Optional Parameter 'Hold Code ID'\r\niv) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Enter the Optional Parameter 'Hold Code ID'\r\niv) Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690355,
    "title": "Verify the Lock Seats API Request with one or more price scale ids are provided",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 5,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48163",
    "custom_preconds": "PFA automation Json and xml",
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\nii) Enter the Required parameters for the Request \n   - Cart ID\n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Enter the one or more 'Price Scale ID'\niv) Click Green Arrow Button\r\nExpected Result:\r\nThe request should be successful and lock should be successful",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\nii) Enter the Required parameters for the Request \n   - Cart ID\n   - Event ID \n   - Number of Seats\n   - Buyer Type ID\niii) Enter the one or more 'Price Scale ID'\niv) Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. The request should be successful and lock should be successful"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690356,
    "title": "Verify the data and element entries in reference section in Get cart API response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-19004",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 6,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48210",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4)Perform Lock Seats API and note the cart id \r\nand Etag values from response\r\n2. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii) Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - com.tickets.kiosk\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the GET CART API Request base URL \r\nwith cart id noted in above step. \r\n\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\n7. Verify the data and element entries in reference \r\nsection in Get cart API response\r\nExpected Result:\r\nReference section should contain the \r\nappropriate data and elements entries and \r\nshould be referred to by data outside of the \r\nreference section",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4)Perform Lock Seats API and note the cart id \r\nand Etag values from response\r\n2. Launch the API Tool - Rest Client\r\n3. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii) Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - com.tickets.kiosk\r\nContent Type - application/xml\r\nAccept - application/xml\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i)Enter the GET CART API Request base URL \r\nwith cart id noted in above step. \r\n\r\nii) Click Green Arrow Button\r\n7. Verify the data and element entries in reference \r\nsection in Get cart API response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\n7. Reference section should contain the \r\nappropriate data and elements entries and \r\nshould be referred to by data outside of the \r\nreference section"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690357,
    "title": "Verify the Promotion references for the buyer type in Redelivery API response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18840",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 7,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48217",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the V2 Redelivery  API Request base URL\r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed\r\n7. Verify the Redelivery  API response\r\nExpected Result:\r\nPromotion references for the buyer type should not be displayed in Redelivery  API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Rest Client\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the V2 Redelivery  API Request base URL\r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\n7. Verify the Redelivery  API response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An HTTP status code with 200(OK) should be displayed\r\n7. Promotion references for the buyer type should not be displayed in Redelivery  API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690358,
    "title": "Verify the Promotion references for the buyer type in Price structure API response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18840",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 8,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48219",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Price structure API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Price structure API Request base URL\r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed\r\n7. Verify the Price structure API response\r\nExpected Result:\r\nPromotion references for the buyer type should not be displayed in Price structure API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Price structure API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Price structure API Request base URL\r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\n7. Verify the Price structure API response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An HTTP status code with 200(OK) should be displayed\r\n7. Promotion references for the buyer type should not be displayed in Price structure API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690359,
    "title": "Verify the Promotion references for the buyer type in Ticket details API response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18840",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 9,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48220",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Ticket details API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Ticket details API Request base URL \r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed\r\n7. Verify the Ticket details API response\r\nExpected Result:\r\nPromotion references for the buyer type should not be displayed in Ticket details API Response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Ticket details API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Ticket details API Request base URL \r\nii) Enter the request body\r\niii) Click Green Arrow Button\r\n7. Verify the Ticket details API response",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. An HTTP status code with 200(OK) should be displayed\r\n7. Promotion references for the buyer type should not be displayed in Ticket details API Response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.2.00"
  },
  {
    "id": 30690360,
    "title": "V2 Lock Seats API - Verify response for Order ID in lock request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18384",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 10,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48224",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\n4)Perform a sale transaction & note the order id , Patron Id & event id\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\nii) Provide numberOfSeats,evet id and also order id and patron id\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\r\n7. Verify the Response of Locked Seats\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Response should be valid and correct  informations should be provided without any  errors\niii) Created Offer details in the Response should be correct.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, and Event\n4)Perform a sale transaction & note the order id , Patron Id & event id\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\nii) Provide numberOfSeats,evet id and also order id and patron id\niii) Click Green Arrow Button\r\n7. Verify the Response of Locked Seats",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Request should be valid \niii) Offer should be Created.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\nii) Response should be valid and correct  informations should be provided without any  errors\niii) Created Offer details in the Response should be correct."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690361,
    "title": "Lock Seats API V2 - Verify the Lock Seats API request with field Seat ID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18384",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 11,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48225",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4)Perform a sale transaction & note the order id , Patron Id & event id\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Provide required fields & seat ids \r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. Verify the Response of Locked Seats\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4)Perform a sale transaction & note the order id , Patron Id & event id\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Provide required fields & seat ids \r\niii) Click Green Arrow Button\r\n7. Verify the Response of Locked Seats",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690362,
    "title": "Verify the Etag in the Edit Ticket Price API response when the If-Match header is not passed in the request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 12,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48229",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n     iii)Do not Pass If-Match header\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the If-Match header is not passed in the request\r\nExpected Result:\r\nThe application should throw error with response code 412.\r\nResponse message: Precondition Failed.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n     iii)Do not Pass If-Match header\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the If-Match header is not passed in the request",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The application should throw error with response code 412.\r\nResponse message: Precondition Failed."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690363,
    "title": "Verify the Etag in the Edit Ticket Price API response when the invalid If-Match header is passed",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 13,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48231",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n     iii)Pass invalid If-Match header\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the invalid If-Match header is passed\r\nExpected Result:\r\n412 Precondition Failed message should be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n     iii)Pass invalid If-Match header\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the invalid If-Match header is passed",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. 412 Precondition Failed message should be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690364,
    "title": "Verify the Etag in the Edit Ticket Price API response when the cart is updated",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 14,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48232",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the cart is updated\r\nExpected Result:\r\nThe eTag response header value should be different whenever cart is modified.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Etag in the Edit Ticket Price API response when the cart is updated",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The eTag response header value should be different whenever cart is modified."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690365,
    "title": "Verify the Etag in the lock seats API response when the cart is updated",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-18137",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 15,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48247",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Lock seats (add first offer to the cart)                                                                                  i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request                                                         \r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii)In the cart response note down eTag response header value.\r\n7. Add another offer to the existing cart, note down the eTag response header value\r\n1 - Launch the Tool for Lock Seats API\r\n-  i)Select the HTTP method as PUT  \r\n      ii)Enter the response body parameters and  set the response content type\r\n  - Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n  - Select SSl tab and set the hostname verifier to Allow All\r\nEnter Header: Accept- application/xml \r\n             Content-Type - application/xml \r\n             If-Match- Etag\r\n  - i)Enter the URL with cart id given (eg:https://irutapppvn47.back.tickets.com:18443/api/v2/carts/45985539/lock)\r\n     ii)Enter the Body with required parameters \r\n       Give Cart Id,Hold code, Event Id, Numberof seats etc..as parameter \r\n     iii)Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii)In the cart response note down eTag response header value.\r\n8. Verify the Updated Etag is returned\r\nExpected Result:\r\nThe cart's lastUpdatedTime should be changed and the updated Etag should be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. Lock seats (add first offer to the cart)                                                                                  i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request                                                         \r\niii) Click Green Arrow Button\r\n7. Add another offer to the existing cart, note down the eTag response header value\r\n1 - Launch the Tool for Lock Seats API\r\n-  i)Select the HTTP method as PUT  \r\n      ii)Enter the response body parameters and  set the response content type\r\n  - Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n  - Select SSl tab and set the hostname verifier to Allow All\r\nEnter Header: Accept- application/xml \r\n             Content-Type - application/xml \r\n             If-Match- Etag\r\n  - i)Enter the URL with cart id given (eg:https://irutapppvn47.back.tickets.com:18443/api/v2/carts/45985539/lock)\r\n     ii)Enter the Body with required parameters \r\n       Give Cart Id,Hold code, Event Id, Numberof seats etc..as parameter \r\n     iii)Click Green Arrow Button\r\n8. Verify the Updated Etag is returned",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii)In the cart response note down eTag response header value.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii)In the cart response note down eTag response header value.\r\n8. The cart's lastUpdatedTime should be changed and the updated Etag should be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.1.00"
  },
  {
    "id": 30690366,
    "title": "Verify the Etag is returned in API cart response for cancel offer item request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17771",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 16,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48249",
    "custom_preconds": "use the scenarios from C48043 and verify that e-tag is generated(no need a new case just add additional verification)",
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, Event\n4)Offer should be available\r\n2. Launch the API Tool  - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii)Enter the header values\nPV-API-Key - xyz\nPV-Application-ID - kiosk.tickets.com\nContent Type - application/xml\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the LOCK SEAT API request base URL   https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock\nii)Enter the request body and iclude above event id and provide no of seat as 2.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id say cartid1, offer id say offerid1, offeritemid say offeritemid2\r\nExpected Result:\r\nResponse should be successful and cart id say cartid1, offer id say offerid1, offer item id say offeritemid1 should be generated.\r\n7. i)Again call LOCK SEAT API to add offer to existing cart by providing above cart id in the URL\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid1/lock\nii)Enter the request body and iclude above event id and provide no of seat as 2.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id say cartid2, new offer id say offerid2, offeritemid say offeritemid2\r\nExpected Result:\r\nResponse should be successful and new cart id say cartid2, offer id say offerid2, offer item id say offeritemid2 should be generated.\r\n8. i)Again launch API tool and enter Cancel Lock API Request base URL and provide cart id,offer id and offeritemid noted in above step 6(iv)\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid2/offers/offerid2/offerItems/offeritemid2\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\niv)Click Green Arrow Button\nv)Verify the Response of the 'Cancel Lock Seats'\r\nExpected Result:\r\nSuccessfull response should be displayed with offerid2 and offeritemid2 removed and E-Tag value should be updated in response header tab",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\n1) Valid Agency, User should be available\n2) An Event should be available\n3) Note down the Agency, User, Event\n4)Offer should be available\r\n2. Launch the API Tool  - Rest Client\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\nii)Enter the header values\nPV-API-Key - xyz\nPV-Application-ID - kiosk.tickets.com\nContent Type - application/xml\nAccept - application/xml\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i)Enter the LOCK SEAT API request base URL   https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock\nii)Enter the request body and iclude above event id and provide no of seat as 2.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id say cartid1, offer id say offerid1, offeritemid say offeritemid2\r\n7. i)Again call LOCK SEAT API to add offer to existing cart by providing above cart id in the URL\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid1/lock\nii)Enter the request body and iclude above event id and provide no of seat as 2.\niii)Click on Green Arrow button\niv)Verify the response and get the cart id say cartid2, new offer id say offerid2, offeritemid say offeritemid2\r\n8. i)Again launch API tool and enter Cancel Lock API Request base URL and provide cart id,offer id and offeritemid noted in above step 6(iv)\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid2/offers/offerid2/offerItems/offeritemid2\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\niv)Click Green Arrow Button\nv)Verify the Response of the 'Cancel Lock Seats'",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Response should be successful and cart id say cartid1, offer id say offerid1, offer item id say offeritemid1 should be generated.\r\n7. Response should be successful and new cart id say cartid2, offer id say offerid2, offer item id say offeritemid2 should be generated.\r\n8. Successfull response should be displayed with offerid2 and offeritemid2 removed and E-Tag value should be updated in response header tab"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.0.00"
  },
  {
    "id": 30690367,
    "title": "Verify the Etag is returned in API cart response for cancel offer request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17771",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 17,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48250",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4)Offer should be available\r\n2. Launch the API Tool  - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i)Enter the LOCK SEAT API request base URL   https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock\r\nii)Enter the request body and iclude above event id and provide no of seat as 2.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id say cartid1, offer id say offerid1, offeritemid say offeritemid1\r\nExpected Result:\r\nResponse should be successful and cart id say cartid1, offer id say offerid1, offer item id say offeritemid1 should be generated.\r\n7. i)Again call LOCK SEAT API to add offer to existing cart by providing above cart id in the URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid1/lock\r\nii)Enter the request body and iclude above event id and provide no of seat as 2.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id say cartid2, new offer id say offerid2, offeitemid say offeritemid2\r\nExpected Result:\r\nResponse should be successful and new cart id say cartid2, offer id say offerid2, offer item id say offeritemid2 should be generated.\r\n8. i)Again launch API tool and enter Cancel Lock API Request base URL and provide cart id  and offer id noted in above step 6(iv)\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid2/offers/offerid2\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'\r\nExpected Result:\r\nSuccessfull response should be displayed with offerid2 removed and E-Tag value should be updated in response header tab",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4)Offer should be available\r\n2. Launch the API Tool  - Rest Client\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i)Enter the LOCK SEAT API request base URL   https://irutapppvn47.back.tickets.com:18443/api/v2/carts/lock\r\nii)Enter the request body and iclude above event id and provide no of seat as 2.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id say cartid1, offer id say offerid1, offeritemid say offeritemid1\r\n7. i)Again call LOCK SEAT API to add offer to existing cart by providing above cart id in the URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid1/lock\r\nii)Enter the request body and iclude above event id and provide no of seat as 2.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id say cartid2, new offer id say offerid2, offeitemid say offeritemid2\r\n8. i)Again launch API tool and enter Cancel Lock API Request base URL and provide cart id  and offer id noted in above step 6(iv)\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/cartid2/offers/offerid2\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. Response should be successful and cart id say cartid1, offer id say offerid1, offer item id say offeritemid1 should be generated.\r\n7. Response should be successful and new cart id say cartid2, offer id say offerid2, offer item id say offeritemid2 should be generated.\r\n8. Successfull response should be displayed with offerid2 removed and E-Tag value should be updated in response header tab"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "3.0.00"
  },
  {
    "id": 30690368,
    "title": "Verify the Edit price in cart API request with the parameter New Price value as $1 and there is an inclusive service charge in context with fixed amount equals to $2",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 18,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48256",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Create an inclusive service charge NC_TKTSVC3 in context with Per Seat amount equals to $2(per seat charge is $2.00)\r\nExpected Result:\r\nInclusive service charge should be created successfully\r\n3. Include the eevnt in context rule\r\nExpected Result:\r\nEvent should be included\r\n4. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n5. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n6. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n7. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n8. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n9. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n10. Edit the Price for Buyer type with the price $0\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n11. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe edited price should be displayed in the response\r\n12. Perform a checkout API\r\nExpected Result:\r\nUser should be able to perform checkout API\r\n13. Note down the delivery Id\r\nExpected Result:\r\nDelivery id should be noted down\r\n14. Login to PV and verify the ticket price deatils agianst the transaction.\r\nExpected Result:\r\nThe following error should be displayed \"errorCode: pv.cart.1231\r\nmessage: One or more tickets in your cart have a price that is less than the sum of its inclusive service charges. Please communicate this setup error to an appropriate resource for correction.  To continue with your checkout, you must remove or reprice the offending tickets\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Create an inclusive service charge NC_TKTSVC3 in context with Per Seat amount equals to $2(per seat charge is $2.00)\r\n3. Include the eevnt in context rule\r\n4. Perform a Lock Seats API\r\n5. Note down cart id and offer id\r\n6. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n7. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n8. Select SSl tab and set the hostname  verifier to Allow All\r\n9. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\n10. Edit the Price for Buyer type with the price $0\r\n11. Verify the Response of Edit price in cart API\r\n12. Perform a checkout API\r\n13. Note down the delivery Id\r\n14. Login to PV and verify the ticket price deatils agianst the transaction.",
        "expected": "1. \r\n2. Inclusive service charge should be created successfully\r\n3. Event should be included\r\n4. The lock seats API should be performed successfull\r\n5. The cart id and offer id should be note down from the lock seats API response\r\n6. The tool should be setup for edit price cart API\r\n7. The authentication parameters should be set\r\n8. SSL tab setting should be set successfully\r\n9. The request should be entered\r\n10. The edited price should be entered for Buyer type amount\r\n11. The edited price should be displayed in the response\r\n12. User should be able to perform checkout API\r\n13. Delivery id should be noted down\r\n14. The following error should be displayed \"errorCode: pv.cart.1231\r\nmessage: One or more tickets in your cart have a price that is less than the sum of its inclusive service charges. Please communicate this setup error to an appropriate resource for correction.  To continue with your checkout, you must remove or reprice the offending tickets\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690369,
    "title": "Verify the Edit price in cart API request with the parameter New Price value as $0 and there is at lesat one inclusive service charge in context with fixed amount equals to $1",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 19,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48257",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type with the price $0\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe edited price should be displayed in the response\r\n10. Perform a checkout API\r\nExpected Result:\r\nUser should be able to perform checkout API\r\n11. Create an inclusive service charge NC_TKTSVC3 in context with fixed amount equals to $1(per seat charge is $1.00)\r\nExpected Result:\r\nInclusive service charge should be created successfully\r\n12. Include the eevnt in context rule\r\nExpected Result:\r\nEvent should be included\r\n13. Note down the delivery Id\r\nExpected Result:\r\nDelivery id should be noted down\r\n14. Login to PV and verify the ticket price deatils agianst the transaction.\r\nExpected Result:\r\nThe inclusive service charge should not be be displayed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type with the price $0\r\n9. Verify the Response of Edit price in cart API\r\n10. Perform a checkout API\r\n11. Create an inclusive service charge NC_TKTSVC3 in context with fixed amount equals to $1(per seat charge is $1.00)\r\n12. Include the eevnt in context rule\r\n13. Note down the delivery Id\r\n14. Login to PV and verify the ticket price deatils agianst the transaction.",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The edited price should be displayed in the response\r\n10. User should be able to perform checkout API\r\n11. Inclusive service charge should be created successfully\r\n12. Event should be included\r\n13. Delivery id should be noted down\r\n14. The inclusive service charge should not be be displayed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690370,
    "title": "Verify the Edit price in cart API request Without the parameter New Price or Price Value",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 20,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48275",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter the Cart ID and offer ID in the Edit price in cart API request\r\nii)Do not enter New price and Price value parameter in body part\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe follwing error should be thrown\r\n\"errorCode: pv.cart.3003\r\nmessage: price value is required for editing ticket price\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. i)Enter the Cart ID and offer ID in the Edit price in cart API request\r\nii)Do not enter New price and Price value parameter in body part\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The follwing error should be thrown\r\n\"errorCode: pv.cart.3003\r\nmessage: price value is required for editing ticket price\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690371,
    "title": "Verify the Edit price in cart API request with the parameter Buyer type which is not Editable",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 21,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48277",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe follwing error should be thrown\r\n\"errorCode: pv.cart.3013\r\nmessage: BuyerType (id={buyerTypeId) is not editable\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Cart ID and offer ID in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The follwing error should be thrown\r\n\"errorCode: pv.cart.3013\r\nmessage: BuyerType (id={buyerTypeId) is not editable\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690372,
    "title": "Verify the Edit price in cart API request using the parameter wrong offer ID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 22,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48281",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. i)Enter Valid cart ID price in the Edit price in cart API request\r\nii)Enter Wrong offer ID in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe following error should be thrown \"errorCode: pv.cart.3001\r\nmessage: Offer (id={offerId}) is not found in cart (id={cartId})\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. i)Enter Valid cart ID price in the Edit price in cart API request\r\nii)Enter Wrong offer ID in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The following error should be thrown \"errorCode: pv.cart.3001\r\nmessage: Offer (id={offerId}) is not found in cart (id={cartId})\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690373,
    "title": "Verify the Edit price in cart API request With the parameter Wrong Cart Id",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 23,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48282",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter Wrong cart in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe following error should be thrown \"errorCode: pv.cart.1025\r\nmessage: Cart (id={cartId}) could not be found. Please start over\"",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter Wrong cart in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The following error should be thrown \"errorCode: pv.cart.1025\r\nmessage: Cart (id={cartId}) could not be found. Please start over\""
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690374,
    "title": "Verify the Edit price in cart API request With the parameter Ticket ID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 24,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48286",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe edited price should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the Ticket ID(s) in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The edited price should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690375,
    "title": "Verify the Edit price in cart API request With the parameter Buyer Type ID and TicketID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 25,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48287",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the buyer type ID and Ticket IDin the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nError should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the buyer type ID and Ticket IDin the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. Error should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690376,
    "title": "Verify the Edit price in cart API request With the parameter Buyer Type ID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17478",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 26,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48288",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\nExpected Result:\r\nThe lock seats API should be performed successfull\r\n3. Note down cart id and offer id\r\nExpected Result:\r\nThe cart id and offer id should be note down from the lock seats API response\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\nExpected Result:\r\nThe tool should be setup for edit price cart API\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nThe authentication parameters should be set\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. Enter the buyer type ID in the Edit price in cart API request\r\n\r\nExpected Result:\r\nThe request should be entered\r\n8. Edit the Price for Buyer type amount\r\nExpected Result:\r\nThe edited price should be entered for Buyer type amount\r\n9. Verify the Response of Edit price in cart API\r\nExpected Result:\r\nThe edited price should be displayed in the response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Perform a Lock Seats API\r\n3. Note down cart id and offer id\r\n4. 3 - Set up the tool for Edit price in cart API\r\n      i)Select the HTTP method as POST by  clicking on the POST radio button\r\n      ii)Enter the response body parameters and  set the response content type\r\n5. Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. Enter the buyer type ID in the Edit price in cart API request\r\n\r\n8. Edit the Price for Buyer type amount\r\n9. Verify the Response of Edit price in cart API",
        "expected": "1. \r\n2. The lock seats API should be performed successfull\r\n3. The cart id and offer id should be note down from the lock seats API response\r\n4. The tool should be setup for edit price cart API\r\n5. The authentication parameters should be set\r\n6. SSL tab setting should be set successfully\r\n7. The request should be entered\r\n8. The edited price should be entered for Buyer type amount\r\n9. The edited price should be displayed in the response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.50"
  },
  {
    "id": 30690377,
    "title": "Lock Seats API - Verify bundle value promotions_event having no promotions associated",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17296",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 27,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48299",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Bundle Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Create another Event having no promotions associated\r\nNote down this Second Event Code\r\n3) Valid Agency, User should be available\r\n4) An Event should be available\r\n5) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Use the Second Event and System Selectable Buyer Type\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be displayed with an XML message\r\nii) A message should be displayed saying that 'Buyer Type' is associated to a Promotion and 'System selectable'",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Bundle Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Create another Event having no promotions associated\r\nNote down this Second Event Code\r\n3) Valid Agency, User should be available\r\n4) An Event should be available\r\n5) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Use the Second Event and System Selectable Buyer Type\r\niii) Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be displayed with an XML message\r\nii) A message should be displayed saying that 'Buyer Type' is associated to a Promotion and 'System selectable'"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690378,
    "title": "Lock Seats API - Verify bundle value promotions by providing inventoried primary event id which is associated to the inventoried secondary event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17296",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 28,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48301",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Bundle Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\nExpected Result:\r\nPre requsite should be suucessfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Repeat the Request with User Selectable Buyer Type\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked\r\n7. i) Enter the Lock Seats API Request base URL\r\nii) Enter an System Selectable Buyer Type and Coupon codes\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Bundle Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. Repeat the Request with User Selectable Buyer Type\r\n7. i) Enter the Lock Seats API Request base URL\r\nii) Enter an System Selectable Buyer Type and Coupon codes\r\niii) Click Green Arrow Button",
        "expected": "1. Pre requsite should be suucessfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked\r\n7. i) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690379,
    "title": "Lock Seats API - Verify discount value promotions_multiple event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-17296",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 29,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48303",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Discount Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\nExpected Result:\r\nPre-requiste should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. Repeat the Request with User Selectable Buyer Type\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked\r\n7. i) Enter the Lock Seats API Request base URL\r\nii) Enter an System Selectable Buyer Type\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Discount Value Promotion should be set with the following requirement:\r\n- Use a User Selectable Buyer type and System Selectable Buyer Type\r\n- Note down the Buyer Type Codes\r\n- Create Coupon codes. Note down the Coupon Code \r\n- Use multiple Events. note down the Event Codes\r\n2) Valid Agency, User should be available\r\n3) An Event should be available\r\n4) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. Repeat the Request with User Selectable Buyer Type\r\n7. i) Enter the Lock Seats API Request base URL\r\nii) Enter an System Selectable Buyer Type\r\niii) Click Green Arrow Button",
        "expected": "1. Pre-requiste should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked\r\n7. i) An HTTP status code with 200(OK) should be  displayed \r\nii) A successful Response should be generated and the Seats are locked"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690380,
    "title": "Verify the all inclusive tax related fields in Assign delivery API response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16154",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 30,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48307",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2)Create an inclusive tax\r\n3) Create an event and associate above inclusive tax to it\r\n4)Create a delivery service charge and associate the above event and inclusive tax\r\n5) Note down the Agency, User, Event\r\n6)Lock some seats using Lock Seats API and verify the response.Note the cart id\r\n2. Launch the Tool - REST client\r\nExpected Result:\r\nTool should be successfully launched\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\nExpected Result:\r\nSettings should be successfully completed\r\n4. i)Enter the assign delivery request based url \r\nii)Enter the required parameters with url\r\niii)Assign a new delivery for the cart.\r\nExpected Result:\r\nThe user should be successfully able to complete all the above mentioned steps.\r\n5. Click Green Arrow Button and Verify the Response\r\nExpected Result:\r\nAn HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n In the redelivery response, make sure that \r\ni) All tickets of both offers are present.\r\nIi) The delivery methods are appropriate for both offers and intersection of offers. \r\niii) Look in the service charges\r\n6. Verify the all inclusive tax related fields in Assign delivery API response \r\n     a)inclusive tax ID\r\n     b)Inclusive tax Code\r\n     c)Inclusive tax Description\r\n     d)Inclusive tax Public decription\r\n     e)Inclusive tax Rate\r\n     f)Inclusive tax Amount\r\n     g)Inclusive tax Currency code\r\nExpected Result:\r\nAll inclusive tax related fields should be displayed in Assign delivery api response",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available \r\n2)Create an inclusive tax\r\n3) Create an event and associate above inclusive tax to it\r\n4)Create a delivery service charge and associate the above event and inclusive tax\r\n5) Note down the Agency, User, Event\r\n6)Lock some seats using Lock Seats API and verify the response.Note the cart id\r\n2. Launch the Tool - REST client\r\n3. i)Select the HTTP method as PUT by clicking on the PUT radio button\r\n    ii)Set the authentication parameters: Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n    iii)Select SSl tab and set the hostname verifier to Allow All\r\n    iv)Set the Header values(Accept:application/xml OR application/json  & Content-Type:  application/xml OR application/json )\r\n4. i)Enter the assign delivery request based url \r\nii)Enter the required parameters with url\r\niii)Assign a new delivery for the cart.\r\n5. Click Green Arrow Button and Verify the Response\r\n6. Verify the all inclusive tax related fields in Assign delivery API response \r\n     a)inclusive tax ID\r\n     b)Inclusive tax Code\r\n     c)Inclusive tax Description\r\n     d)Inclusive tax Public decription\r\n     e)Inclusive tax Rate\r\n     f)Inclusive tax Amount\r\n     g)Inclusive tax Currency code",
        "expected": "1. \r\n2. Tool should be successfully launched\r\n3. Settings should be successfully completed\r\n4. The user should be successfully able to complete all the above mentioned steps.\r\n5. An HTTP status code with 200(OK) should be displayed along with XML message in response\r\nResponse should be valid and correct informations should be provided without any errors\r\n In the redelivery response, make sure that \r\ni) All tickets of both offers are present.\r\nIi) The delivery methods are appropriate for both offers and intersection of offers. \r\niii) Look in the service charges\r\n6. All inclusive tax related fields should be displayed in Assign delivery api response"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690381,
    "title": "Verify Checkout API for multiple offers and one of the offers includes Never Print Event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16153",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 31,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48309",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\nExpected Result:\r\nPre requisite should be completed successfully\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body  content type and char-set\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body content type and char-set should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSL tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Include the never print event in the lock seat API request\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and delivery deatils should not included in the response.\r\n7. i)Update the lock seat API by adding print later event(take the cart id from the previous lock seat API response)\r\n\r\nii)Select method as PUT.\r\n\r\niii)Click on Green Arow Button\r\nExpected Result:\r\ni)Lock Seat API request should be updated by addin print later event.\r\n\r\nii) Method selected should be PUT.\r\n\r\niii)Response should be displayed correctly and delivery details should not included for Never Print Event and delivery details should be included for\r\nPrint Later Event.\r\n8. i)Launch the Tool for Checkout API(Take the cart id and etag from the lock seat API response  and include in the checkout API )\r\n\r\nii)Do not include the delivery details in the checkout request and verify response\r\n\r\niii)Click on Green Arrow Button and verify the response\r\nExpected Result:\r\ni)Checkout API request URL should be launched successfully.\r\n\r\nii)Request should not contain Delivery Details\r\n\r\niii)An error message shows \"One or more of the tickets in your cart requires a delivery method assignment before you can  checkout.\"\r\n9. i) Include the delivery details in the Checkout API request\r\n\r\nii)Click on Green Arrow Button and verify the response\r\nExpected Result:\r\ni)Request should contain Delivery Details\r\n\r\nii)Checkout should be done successfully.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body  content type and char-set\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSL tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Include the never print event in the lock seat API request\r\niii) Click Green Arrow Button\r\n7. i)Update the lock seat API by adding print later event(take the cart id from the previous lock seat API response)\r\n\r\nii)Select method as PUT.\r\n\r\niii)Click on Green Arow Button\r\n8. i)Launch the Tool for Checkout API(Take the cart id and etag from the lock seat API response  and include in the checkout API )\r\n\r\nii)Do not include the delivery details in the checkout request and verify response\r\n\r\niii)Click on Green Arrow Button and verify the response\r\n9. i) Include the delivery details in the Checkout API request\r\n\r\nii)Click on Green Arrow Button and verify the response",
        "expected": "1. Pre requisite should be completed successfully\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body content type and char-set should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and delivery deatils should not included in the response.\r\n7. i)Lock Seat API request should be updated by addin print later event.\r\n\r\nii) Method selected should be PUT.\r\n\r\niii)Response should be displayed correctly and delivery details should not included for Never Print Event and delivery details should be included for\r\nPrint Later Event.\r\n8. i)Checkout API request URL should be launched successfully.\r\n\r\nii)Request should not contain Delivery Details\r\n\r\niii)An error message shows \"One or more of the tickets in your cart requires a delivery method assignment before you can  checkout.\"\r\n9. i)Request should contain Delivery Details\r\n\r\nii)Checkout should be done successfully."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690382,
    "title": "Verify the field Service charge id, Code, Description and Public Description in Lock Seats Api response when service charges are associated to the Event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16442",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 32,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48320",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) Create Event, Delivery, Transaction, Ticket Inclusive and Non Inclusive Service charges\r\n3) Create an Event and associate above Service charges to it\r\n4) Note down the Agency, User, Event, and all the service charges\r\nExpected Result:\r\nAll the details should be noted\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. Verify the field Service charge id, Code, Description and Public Description in Lock Seats Api response when service charges are associated to the Event\r\nExpected Result:\r\nVerify that the followings are displayed in the Lock seats API response:\r\n1. Service charge ID, \r\n2. Service charge Code, \r\n3. Service charge Description and \r\n4. Service charge Public Description",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) Create Event, Delivery, Transaction, Ticket Inclusive and Non Inclusive Service charges\r\n3) Create an Event and associate above Service charges to it\r\n4) Note down the Agency, User, Event, and all the service charges\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\n7. Verify the field Service charge id, Code, Description and Public Description in Lock Seats Api response when service charges are associated to the Event",
        "expected": "1. All the details should be noted\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. Verify that the followings are displayed in the Lock seats API response:\r\n1. Service charge ID, \r\n2. Service charge Code, \r\n3. Service charge Description and \r\n4. Service charge Public Description"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690383,
    "title": "Verify Assign Delivery API for multiple offers and one of the offers includes Never Print Event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16153",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 33,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48337",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\nExpected Result:\r\nPre requisite should be completed successfully\r\n2. Launch the PV land Lock seats for event with Print status as NEVER\r\nExpected Result:\r\nPV should be launched successfully\r\n3. i) Perfrom add offer event belonging to Print later status\r\nExpected Result:\r\nOffer should be added succesfully\r\n4. Complete the offer\r\nExpected Result:\r\nthe transaction should be completed succesfully\r\n5. Verify that the Delivery details are  not available in response for Never Print Event\r\nExpected Result:\r\ntickets with the print status as NEVER PRINT will \r\nnot be available in reponse\r\n6. i)Submit the Assign Delivery request based url()and verify the response\r\n ii)Assign a new delivery for the cart  and verify the response\r\nExpected Result:\r\nIt should be possible to redeliver and assign new delivery to tickets of Events -print status print now or print later and it should not be possilbe to redeliver tickets of Events - print status never\r\n7. Verify redelivery API\r\nExpected Result:\r\nthe response should be succesful with \r\ntickets of print later status\r\n8. Perfrom checkout API.\r\nExpected Result:\r\nThe reponse should be succesful",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\n2. Launch the PV land Lock seats for event with Print status as NEVER\r\n3. i) Perfrom add offer event belonging to Print later status\r\n4. Complete the offer\r\n5. Verify that the Delivery details are  not available in response for Never Print Event\r\n6. i)Submit the Assign Delivery request based url()and verify the response\r\n ii)Assign a new delivery for the cart  and verify the response\r\n7. Verify redelivery API\r\n8. Perfrom checkout API.",
        "expected": "1. Pre requisite should be completed successfully\r\n2. PV should be launched successfully\r\n3. Offer should be added succesfully\r\n4. the transaction should be completed succesfully\r\n5. tickets with the print status as NEVER PRINT will \r\nnot be available in reponse\r\n6. It should be possible to redeliver and assign new delivery to tickets of Events -print status print now or print later and it should not be possilbe to redeliver tickets of Events - print status never\r\n7. the response should be succesful with \r\ntickets of print later status\r\n8. The reponse should be succesful"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690384,
    "title": "Verify Redelivery API for multiple offers and one of the offers includes Never Print Event",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16153",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 34,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48338",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\nExpected Result:\r\nPre requisite should be completed successfully\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body  content type and char-set\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body content type and char-set should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSL tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\n\r\n( sample request:\r\n\r\n                8635\r\n                                1  \r\n                \r\n                                \r\n                                                1001\r\n                                                1\r\n                                \r\n                \r\n )\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct.\r\n7. Using the cart id from the above response, again submit a request with Event with Never print status\r\nExpected Result:\r\nResponse should be displayed successfully\r\n8. Verify that the Delivery details are  not available in response for Never Print Event\r\nExpected Result:\r\nDelivery details should  not be available in response for Never Print Event\r\n**In the response  i)     A tag  should be added to  tag of cart, which looks like below:\r\n        \r\n                  SALE\r\n                  \r\n                              NEVER-PRINT-EVENT1\r\n                              Never Print Event 1\r\n                               Never Print Event 1\r\n          \r\ntrue\r\n                  ?\r\nii)     If all offerItems in an offer have  true, the  for offer will NOT exist.\r\niii)    ticketIds tag in deliveryMethods should not be present.\r\n9. Submit  the redelivery request for the above cart and verify\r\nExpected Result:\r\nIt should be possible to redeliver tickets of Events( print status now or later) and it should not be possilbe to redeliver tickets of Events ( print status never)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. 1) Valid Agency, User should be available\r\n2) 2 Event should be available (Ticket Print Status of 1 event should be NEVER)\r\n3) Note down the Agency, User, Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body  content type and char-set\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSL tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\n\r\n( sample request:\r\n\r\n                8635\r\n                                1  \r\n                \r\n                                \r\n                                                1001\r\n                                                1\r\n                                \r\n                \r\n )\r\n7. Using the cart id from the above response, again submit a request with Event with Never print status\r\n8. Verify that the Delivery details are  not available in response for Never Print Event\r\n9. Submit  the redelivery request for the above cart and verify",
        "expected": "1. Pre requisite should be completed successfully\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body content type and char-set should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct.\r\n7. Response should be displayed successfully\r\n8. Delivery details should  not be available in response for Never Print Event\r\n**In the response  i)     A tag  should be added to  tag of cart, which looks like below:\r\n        \r\n                  SALE\r\n                  \r\n                              NEVER-PRINT-EVENT1\r\n                              Never Print Event 1\r\n                               Never Print Event 1\r\n          \r\ntrue\r\n                  ?\r\nii)     If all offerItems in an offer have  true, the  for offer will NOT exist.\r\niii)    ticketIds tag in deliveryMethods should not be present.\r\n9. It should be possible to redeliver tickets of Events( print status now or later) and it should not be possilbe to redeliver tickets of Events ( print status never)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690385,
    "title": "Verify any error occurred while changing the order of element in  Structure of body part- Lock Seats API",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16705",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 35,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48384",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. i) Enter the Information Response base URL for the Crfeated Offer\r\nii) Enter the Required parameters for the Request\r\niii)Re-arange the element in  Structure of body part\r\nvi) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n\r\niii) Click Green Arrow Button\r\n7. i) Enter the Information Response base URL for the Crfeated Offer\r\nii) Enter the Required parameters for the Request\r\niii)Re-arange the element in  Structure of body part\r\nvi) Click Green Arrow Button",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid and correct  informations should be provided without any  errors\r\niii) Created Offer details in the Response should be correct."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.30"
  },
  {
    "id": 30690386,
    "title": "Verify whether the ID is not formatted in the error response and log message for the attribute-Cart ID   in a-  Cancel Lock API request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16078",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 36,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48388",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4) A Cart should be created\r\n2. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\nExpected Result:\r\nIn the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n3. Launch the API Tool  - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n7. ii)Enter the LOCK SEAT API request base URL\r\nii)Enter the request body and iclude above event id.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful and get the cart id.\r\n8. 1)Login to PV using valid credentials\r\n2)Search for the above event in Ticket Sales page and click on Map Sales\r\n3)Verify the seat is marked as LOCKED in MAP.\r\nExpected Result:\r\nSeat should be marked as LOCKED\r\n9. i)Again launch API tool and enter Cancel Lock API Request base URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/63285016\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niii)Enter the Required parameters (Cart ID) in the URL\r\nInclude an invalid value for the attribute-Cart ID(Eg: 12345678)\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'\r\nExpected Result:\r\nA proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4) A Cart should be created\r\n2. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\n3. Launch the API Tool  - Rest Client\r\n4. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\n5. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n6. Select SSl tab and set the hostname  verifier to Allow All\r\n7. ii)Enter the LOCK SEAT API request base URL\r\nii)Enter the request body and iclude above event id.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id\r\n8. 1)Login to PV using valid credentials\r\n2)Search for the above event in Ticket Sales page and click on Map Sales\r\n3)Verify the seat is marked as LOCKED in MAP.\r\n9. i)Again launch API tool and enter Cancel Lock API Request base URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/63285016\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niii)Enter the Required parameters (Cart ID) in the URL\r\nInclude an invalid value for the attribute-Cart ID(Eg: 12345678)\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'",
        "expected": "1. \r\n2. In the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n3. Tool should be launched successfully\r\n4. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n5. Authentication parameters should be selected  successfully\r\n6. SSL tab setting should be set successfully\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful and get the cart id.\r\n8. Seat should be marked as LOCKED\r\n9. A proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690387,
    "title": "Verify whether the ID is not formatted in the error response and log message for the attribute-Cart ID   in a-  Get Cart API request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16078",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 37,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48391",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii)Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n3. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n4. Select SSL tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n5. i)Enter the GET CART API Request base URL \r\nwith cart id noted in above step.\r\nInclude an invalid value for the \r\nattribute-Cart ID(Eg: 12345678)\r\n\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nA proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n6. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\nExpected Result:\r\nIn the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n7. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii)Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\n3. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n4. Select SSL tab and set the hostname  verifier to Allow All\r\n5. i)Enter the GET CART API Request base URL \r\nwith cart id noted in above step.\r\nInclude an invalid value for the \r\nattribute-Cart ID(Eg: 12345678)\r\n\r\niii) Click Green Arrow Button\r\n6. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\n7. Launch the API Tool - Rest Client",
        "expected": "1. \r\n2. i) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n3. Authentication parameters should be selected  successfully\r\n4. SSL tab setting should be set successfully\r\n5. A proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n6. In the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 12345678 is submitted it should not be formatted as 1,2345678)\r\n7. Tool should be launched successfully"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690388,
    "title": "Verify whether the ID is not formatted in the error response and log message for the attribute-Patron Account ID   in a- Lock Seats API request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16078",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 38,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48392",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n    Include an invalid value for the attribute-Patron Account ID (Eg: 12345678)\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nA proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)\r\n7. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\nExpected Result:\r\nIn the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n    Include an invalid value for the attribute-Patron Account ID (Eg: 12345678)\r\niii) Click Green Arrow Button\r\n7. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. A proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)\r\n7. In the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690389,
    "title": "Verify whether the ID is not formatted in the error response and log message for the attribute-Event ID   in a-  Lock Seats API request",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-16078",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 39,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48399",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\nInclude an invalid value for the attribute-Event ID (Eg: 12345678)\r\niii) Click Green Arrow Button\r\nExpected Result:\r\nA proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)\r\n7. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format\r\nExpected Result:\r\nIn the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\nInclude an invalid value for the attribute-Event ID (Eg: 12345678)\r\niii) Click Green Arrow Button\r\n7. In Logs:\r\nVerify whether the message is correctly showing the ID without any change in the format",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. A proper error message should be displayed in the XML response\r\n\r\nIn the error message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)\r\n7. In the log message,there should not be a change in the format of the ID value submitted in the request. (eg: if 1073 is submitted it should not be formatted as 1,073)"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.10"
  },
  {
    "id": 30690390,
    "title": "Verify updating a cart after locking seats with lock seats API",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 40,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48406",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. Note the cart id in the response and the Etag also\r\n8. 1 - Launch the Tool for Lock Seats API\r\n-  i)Select the HTTP method as PUT  \r\n      ii)Enter the response body parameters and  set the response content type\r\n  - Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n  - Select SSl tab and set the hostname verifier to Allow All\r\nEnter Header: Accept- application/xml \r\n             Content-Type - application/xml \r\n             If-Match- Etag\r\nExpected Result:\r\nAll tabs should be set with the values successfully\r\n9. - i)Enter the URL with cart id given (eg:https://irutapppvn47.back.tickets.com:18443/api/v2/carts/45985539/lock)\r\n     ii)Enter the Body with required parameters \r\n       Give Cart Id,Hold code, Event Id, Numberof seats etc..as parameter \r\n     iii)Click Green Arrow Button\r\nExpected Result:\r\nUpdating the cart should be successfully completed",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\n\r\niii) Click Green Arrow Button\r\n7. Note the cart id in the response and the Etag also\r\n8. 1 - Launch the Tool for Lock Seats API\r\n-  i)Select the HTTP method as PUT  \r\n      ii)Enter the response body parameters and  set the response content type\r\n  - Set the authentication parameters:  Username and password, Auth type select as BASIC and Check Preemptive checkbox\r\n  - Select SSl tab and set the hostname verifier to Allow All\r\nEnter Header: Accept- application/xml \r\n             Content-Type - application/xml \r\n             If-Match- Etag\r\n9. - i)Enter the URL with cart id given (eg:https://irutapppvn47.back.tickets.com:18443/api/v2/carts/45985539/lock)\r\n     ii)Enter the Body with required parameters \r\n       Give Cart Id,Hold code, Event Id, Numberof seats etc..as parameter \r\n     iii)Click Green Arrow Button",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. \r\n8. All tabs should be set with the values successfully\r\n9. Updating the cart should be successfully completed"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690391,
    "title": "Verify the response of a Lock Seats API request  with Invalid Value",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 41,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48409",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter an Invalid value for the Parameter\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be \r\ndisplayed along with XML message in response\r\nii) User should be getting a message \r\nsaying that the Value is Invalid or the \r\nspecified Value is not Found.",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter an Invalid value for the Parameter\r\niii) Click Green Arrow Button",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be \r\ndisplayed along with XML message in response\r\nii) User should be getting a message \r\nsaying that the Value is Invalid or the \r\nspecified Value is not Found."
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690392,
    "title": "Verify the response of a Lock Seats API request for an Invalid Field",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 42,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48410",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter an Invalid parameter\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) User should be getting a message saying that the field is Invalid",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter an Invalid parameter\r\niii) Click Green Arrow Button",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) User should be getting a message saying that the field is Invalid"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690393,
    "title": "Verify the Cancel Lock Response of Complementary Offers",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 43,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48412",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4) A Cart should be created with Complementary Offers.\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Cancel Lock API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Cancel Lock API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful\r\n7. Verify the Response of the 'Cancel Lock Seats'\r\n\r\ni) Enter the 'Cancel Lock Response' base URL for the selected Offer\r\nii) Enter the Required parameters for the Request (Cart ID)\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid \r\niii) The Cart details in the Response should be correct.\r\niv) User should be getting a confirmation that the lock has been cancelled\r\nv) If the entire cart is cancelled, only the Cart ID and Cart Expiration Seconds will be returned",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4) A Cart should be created with Complementary Offers.\r\n2. Launch the Tool for Cancel Lock API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Cancel Lock API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Cart ID\r\niii) Click Green Arrow Button\r\n7. Verify the Response of the 'Cancel Lock Seats'\r\n\r\ni) Enter the 'Cancel Lock Response' base URL for the selected Offer\r\nii) Enter the Required parameters for the Request (Cart ID)\r\niii) Click Green Arrow Button",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid \r\niii) The Cart details in the Response should be correct.\r\niv) User should be getting a confirmation that the lock has been cancelled\r\nv) If the entire cart is cancelled, only the Cart ID and Cart Expiration Seconds will be returned"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690394,
    "title": "Verify the Cancel Lock Request with required field_Cart ID",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 44,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48421",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available and note down the event id.\r\n3) Note down the Agency, User, Event\r\n2. Launch the API Tool  - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. ii)Enter the LOCK SEAT API request base URL\r\nii)Enter the request body and iclude above event id.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful and get the cart id.\r\n7. i)Again launch API tool and enter Cancel Lock API Request base URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/63285016\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niii)Enter the Required parameters (Cart ID) noted from above step 5(iv) in the URL\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid \r\niii) The Cart details in the Response should be correct.\r\niv) User should be getting a confirmation that the lock has been cancelled\r\nv) If the entire cart is cancelled, only the Cart ID and Cart Expiration Seconds will be returned\r\nvi)Seat should be unlocked in Map Sale page.\r\n8. 1)Login to PV using valid credentials\r\n2)Search for the above event in Ticket Sales page and click on Map Sales\r\n3)Verify the seat is marked as LOCKED in MAP.\r\nExpected Result:\r\nSeat should be marked as LOCKED",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available and note down the event id.\r\n3) Note down the Agency, User, Event\r\n2. Launch the API Tool  - Rest Client\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii)Enter the header values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. ii)Enter the LOCK SEAT API request base URL\r\nii)Enter the request body and iclude above event id.\r\niii)Click on Green Arrow button\r\niv)Verify the response and get the cart id\r\n7. i)Again launch API tool and enter Cancel Lock API Request base URL\r\nhttps://irutapppvn47.back.tickets.com:18443/api/v2/carts/63285016\r\nii)Select the HTTP method as DELETE by clicking on the DELETE radio button\r\niii)Enter the Required parameters (Cart ID) noted from above step 5(iv) in the URL\r\niv)Click Green Arrow Button\r\nv)Verify the Response of the 'Cancel Lock Seats'\r\n8. 1)Login to PV using valid credentials\r\n2)Search for the above event in Ticket Sales page and click on Map Sales\r\n3)Verify the seat is marked as LOCKED in MAP.",
        "expected": "1. \r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Response should be successful and get the cart id.\r\n7. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Response should be valid \r\niii) The Cart details in the Response should be correct.\r\niv) User should be getting a confirmation that the lock has been cancelled\r\nv) If the entire cart is cancelled, only the Cart ID and Cart Expiration Seconds will be returned\r\nvi)Seat should be unlocked in Map Sale page.\r\n8. Seat should be marked as LOCKED"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690395,
    "title": "Verify the Get Cart API Request on providing URL,cart ID,HTTP method,HTTP headers",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 45,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48423",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4)Perform Lock Seats API and note the cart id \r\nand Etag values from response\r\n2. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii) Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\nExpected Result:\r\ni) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n3. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n4. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n5. i)Enter the GET CART API Request base URL \r\nwith cart id,HTTP method as GET and valid HTTP \r\nheaders noted in above step.\r\n\r\nii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be \r\ndisplayed along with XML/JSON message in \r\nresponse\r\nii) Request should be valid \r\niii) Response should be successful\r\n6. Launch the API Tool - Rest Client\r\nExpected Result:\r\nTool should be launched successfully\r\n7. Verify response providing If-Match header \r\nvalue in request body\r\nExpected Result:\r\nUser should be allowed to enter If-Match header \r\nvalue for Get Cart API",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, and Event\r\n4)Perform Lock Seats API and note the cart id \r\nand Etag values from response\r\n2. i) Select the HTTP method as GET by clicking on \r\nthe GET radio button\r\nii) Enter the header tab values\r\nPV-API-Key - xyz\r\nPV-Application-ID - kiosk.tickets.com\r\nContent Type - application/xml\r\nAccept - application/xml\r\n3. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n4. Select SSl tab and set the hostname  verifier to Allow All\r\n5. i)Enter the GET CART API Request base URL \r\nwith cart id,HTTP method as GET and valid HTTP \r\nheaders noted in above step.\r\n\r\nii) Click Green Arrow Button\r\n6. Launch the API Tool - Rest Client\r\n7. Verify response providing If-Match header \r\nvalue in request body",
        "expected": "1. \r\n2. i) Radio button should be selected for GET\r\nii) Response body parameters and request \r\ncontent type should be set successfully\r\n3. Authentication parameters should be selected  successfully\r\n4. SSL tab setting should be set successfully\r\n5. i) An HTTP status code with 200(OK) should be \r\ndisplayed along with XML/JSON message in \r\nresponse\r\nii) Request should be valid \r\niii) Response should be successful\r\n6. Tool should be launched successfully\r\n7. User should be allowed to enter If-Match header \r\nvalue for Get Cart API"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  },
  {
    "id": 30690396,
    "title": "Verify the Intersection of Delivery Methods in Lock Seats API Response",
    "section_id": 1684785,
    "template_id": 1,
    "type_id": 11,
    "priority_id": 6,
    "milestone_id": null,
    "refs": "PV-15114",
    "created_by": 333,
    "created_on": 1684937869,
    "updated_by": 333,
    "updated_on": 1684937869,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 611101,
    "display_order": 46,
    "custom_is_automated": true,
    "custom_pv_category": 31,
    "custom_refs": "C48424",
    "custom_preconds": null,
    "custom_test_purpose": null,
    "custom_steps": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4) Some Ticket Sale Transactions should be completed\r\nExpected Result:\r\nPrerequisite should be successfull\r\n2. Launch the Tool for Lock Seats API\r\nExpected Result:\r\nTool should be launched successfully\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\nExpected Result:\r\ni) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\nExpected Result:\r\nAuthentication parameters should be selected  successfully\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\nExpected Result:\r\nSSL tab setting should be set successfully\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\nExpected Result:\r\ni) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. Verify the Intersection of Delivery Methods\r\nExpected Result:\r\nIn the Information Response, \r\ni) PV should show the available delivery methods\r\nii) PV  should show the cost that would be if all tickets were assigned to a new delivery",
    "custom_expected": null,
    "custom_steps_separated": [
      {
        "content": "1. Prerequisite:\r\n1) Valid Agency, User should be available\r\n2) An Event should be available\r\n3) Note down the Agency, User, Event\r\n4) Some Ticket Sale Transactions should be completed\r\n2. Launch the Tool for Lock Seats API\r\n3. i) Select the HTTP method as POST by  clicking on the POST radio button\r\nii) Enter the response body parameters and  set the request content type\r\n4. Set the authentication parameters:  Username and password, Auth type select as  BASIC and Check Preemptive checkbox\r\n5. Select SSl tab and set the hostname  verifier to Allow All\r\n6. i) Enter the Lock Seats API Request base URL\r\nii) Enter the Required parameters for the Request \r\n   - Event ID \r\n   - Number of Seats\r\n   - Buyer Type ID\r\niii) Click Green Arrow Button\r\n7. Verify the Intersection of Delivery Methods",
        "expected": "1. Prerequisite should be successfull\r\n2. Tool should be launched successfully\r\n3. i) Radio button should be selected for POST\r\nii) Response body parameters and request  content type should be set successfully\r\n4. Authentication parameters should be selected  successfully\r\n5. SSL tab setting should be set successfully\r\n6. i) An HTTP status code with 200(OK) should be  displayed along with XML message in response\r\nii) Request should be valid \r\niii) Offer should be Created.\r\n7. In the Information Response, \r\ni) PV should show the available delivery methods\r\nii) PV  should show the cost that would be if all tickets were assigned to a new delivery"
      }
    ],
    "custom_comment": null,
    "custom_jiras": "2.3.00"
  }
]